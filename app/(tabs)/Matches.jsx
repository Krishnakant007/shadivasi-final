// // ////app/(tabs)/Matches.jsx
// // import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform } from 'react-native';
// // import React, { useState } from 'react';
// // import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign } from '@expo/vector-icons';
// // import { SafeAreaView } from 'react-native-safe-area-context';

// // // Placeholder images (using online images instead of local files)
// // const placeholderImages = {
// //   girl1: 'https://i.pinimg.com/736x/f3/da/67/f3da67caf09a8735732d20ec977e10a5.jpg',
// //   girl2: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// //   girl3: 'https://images.unsplash.com/photo-1554151228-14d9def656e4?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// //   girl4: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// // };

// // export default function Matches() {
// //   const [activeTab, setActiveTab] = useState('All Matches');
// //   const [selectedOption, setSelectedOption] = useState('Newly Joined');

// //   // const tabs = ['All Matches', 'Newly Joined', 'Premium', 'Near Me'];
// //   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

// //   const profileData = {
// //     name: 'Priya Sharma',
// //     age: '23yrs',
// //     height: "5'5\"",
// //     place: 'Salem, Tamil Nadu',
// //     education: 'B.sc',
// //     occupation: 'Not working',
// //     lastSeen: 'Active today',
// //     matchPercentage: '99% match'
// //   };

// //   const personalInfo = [
// //     { label: 'Age', value: '23 years' },
// //     { label: 'Height', value: "5'5\"" },
// //     { label: 'Spoken Language', value: 'Tamil (Mother Tongue)' },
// //     { label: 'Profile created by', value: 'Parents' },
// //     { label: 'Marital Status', value: 'Never married' },
// //     { label: 'Lives in', value: 'Salem, Tamil Nadu' },
// //     { label: 'Eating Habits', value: 'Not specified' },
// //     { label: 'Religion', value: 'Hindu' },
// //     { label: 'Caste', value: 'Kongu Vellala Gounder' },
// //     { label: 'Subcaste', value: 'Kongu Vellala Gounder' },
// //     { label: 'Gotra', value: 'Not specified' },
// //     { label: 'Date Of Birth', value: '02 Apr 2002' },
// //     { label: 'Rassi', value: 'Upgrade to view', icon: 'lock' },
// //     { label: 'Employment', value: 'Works in Private Sector' },
// //     { label: 'Annual Income', value: '₹6-7 lakhs' },
// //     { label: 'Education', value: 'B.sc' },
// //     { label: 'Occupation', value: 'Marketing Professional' },
// //     { label: 'Studied at', value: 'Upgrade to view' },
// //     { label: 'Works at', value: 'Upgrade to view' },
// //   ];

// //   const familyInfo = [
// //     { label: 'Family Status', value: 'Middle class' },
// //     { label: 'Father', value: 'Business man' },
// //     { label: 'Mother', value: 'Business woman' },
// //     { label: 'Ancestral Origin', value: 'Not specified' },
// //   ];

// //   const lifestyleInfo = [
// //     { label: 'Cuisine', value: 'Arabic, North Indian, South Indian' },
// //     { label: 'Hobbies', value: 'Bike/Car enthusiast, Dancing, Pets' },
// //     { label: 'Movies', value: 'Comedy' },
// //     { label: 'Music', value: 'Film songs' },
// //     { label: 'Smoking Habits', value: "Doesn't smoke" },
// //     { label: 'Drinking Habits', value: "Doesn't drink" },
// //   ];

// //   const suggestedProfiles = [
// //     { id: 1, name: 'Ananya', age: 24, height: "5'4\"", image: placeholderImages.girl1 },
// //     { id: 2, name: 'Meera', age: 25, height: "5'6\"", image: placeholderImages.girl2 },
// //     { id: 3, name: 'Divya', age: 23, height: "5'3\"", image: placeholderImages.girl3 },
// //     { id: 4, name: 'Shreya', age: 26, height: "5'5\"", image: placeholderImages.girl4 },
// //   ];

// //   return (
// //     <SafeAreaView style={styles.safeArea}>
// //       <View style={styles.container}>
// //         {/* Header */}
// //         <View style={styles.header}>
// //           <View style={styles.toggleContainer}>
// //             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
// //               <Text style={styles.toggleText}>Regular</Text>
// //             </TouchableOpacity>
// //             <TouchableOpacity style={styles.toggleButton}>
// //               <Text style={styles.toggleText}>Prime</Text>
// //             </TouchableOpacity>
// //           </View>
// //           <TouchableOpacity style={styles.languageButton}>
// //             <Ionicons name="language" size={24} color="#FF6B6B" />
// //           </TouchableOpacity>
// //         </View>

// //         {/* Tabs
// //         // <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.tabsContainer}>
// //         //   {tabs.map((tab) => (
// //         //     <TouchableOpacity
// //         //       key={tab}
// //         //       style={[styles.tab, activeTab === tab && styles.activeTab]}
// //         //       onPress={() => setActiveTab(tab)}
// //         //     >
// //         //       <Text style={[styles.tabText, activeTab === tab && styles.activeTabText]}>{tab}</Text>
// //         //       {tab === 'Newly Joined' && <Feather name="chevron-down" size={16} color="#FF6B6B" />}
// //         //     </TouchableOpacity>
// //         //   ))}
// //         // </ScrollView>
// // */}
// //         {/* Options */}
// //         <View style={styles.optionsContainer}>
// //           {options.map((option) => (
// //             <TouchableOpacity
// //               key={option}
// //               style={[styles.option, selectedOption === option && styles.selectedOption]}
// //               onPress={() => setSelectedOption(option)}
// //             >
// //               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
// //                 {option}
// //               </Text>
// //             </TouchableOpacity>
// //           ))}
// //         </View>

// //         <View style={styles.contentContainer}>
// //           <ScrollView contentContainerStyle={styles.scrollContent}>
// //             {/* Profile Section */}
// //             <View style={styles.profileContainer}>
// //               <Image
// //                 source={{ uri: placeholderImages.girl1 }}
// //                 style={styles.profileImage}
// //                 resizeMode="cover"
// //               />
// //               <View style={styles.profileHeader}>
// //                 <View>
// //                   <Text style={styles.profileName}>{profileData.name}</Text>
// //                   <Text style={styles.profileDetails}>
// //                     {profileData.age}, {profileData.height}, {profileData.place}
// //                   </Text>
// //                   <Text style={styles.profileDetails}>{profileData.education}, {profileData.occupation}</Text>
// //                 </View>
// //                 <View style={styles.matchBadge}>
// //                   <Text style={styles.matchText}>{profileData.matchPercentage}</Text>
// //                 </View>
// //               </View>
// //               <Text style={styles.lastSeen}>{profileData.lastSeen}</Text>

// //               {/* Action Buttons */}
// //               <View style={styles.actionButtons}>
// //                 <TouchableOpacity style={styles.actionButton}>
// //                   <MaterialIcons name="call" size={24} color="#4CAF50" />
// //                 </TouchableOpacity>
// //                 <TouchableOpacity style={styles.actionButton}>
// //                   <FontAwesome name="whatsapp" size={24} color="#25D366" />
// //                 </TouchableOpacity>
// //               </View>
// //             </View>

// //             {/* Information Sections */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Personal Information</Text>
// //               {personalInfo.map((item, index) => (
// //                 <View key={index} style={styles.infoRow}>
// //                   <Text style={styles.infoLabel}>{item.label}</Text>
// //                   <View style={styles.infoValueContainer}>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                     {item.icon && <Feather name={item.icon} size={16} color="#888" />}
// //                   </View>
// //                 </View>
// //               ))}
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Family Information</Text>
// //               {familyInfo.map((item, index) => (
// //                 <View key={index} style={styles.infoRow}>
// //                   <Text style={styles.infoLabel}>{item.label}</Text>
// //                   <Text style={styles.infoValue}>{item.value}</Text>
// //                 </View>
// //               ))}
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>About Myself</Text>
// //               <Text style={styles.aboutText}>
// //                 My daughter is working as a marketing executive. She is currently living in Kozhikode.
// //                 We come from a middle class, nuclear family background with moderate values.
// //               </Text>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Lifestyle</Text>
// //               {lifestyleInfo.map((item, index) => (
// //                 <View key={index} style={styles.infoRow}>
// //                   <Text style={styles.infoLabel}>{item.label}</Text>
// //                   <Text style={styles.infoValue}>{item.value}</Text>
// //                 </View>
// //               ))}
// //             </View>

// //             <View style={styles.section}>
// //               <View style={styles.sectionHeader}>
// //                 <Text style={styles.sectionTitle}>Profiles you may like</Text>
// //                 <TouchableOpacity>
// //                   <Text style={styles.seeAll}>See All</Text>
// //                 </TouchableOpacity>
// //               </View>
// //               <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
// //                 {suggestedProfiles.map((profile) => (
// //                   <TouchableOpacity key={profile.id} style={styles.suggestedProfile}>
// //                     <Image
// //                       source={{ uri: profile.image }}
// //                       style={styles.suggestedImage}
// //                       resizeMode="cover"
// //                     />
// //                     <Text style={styles.suggestedName}>{profile.name}</Text>
// //                     <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
// //                   </TouchableOpacity>
// //                 ))}
// //               </ScrollView>
// //             </View>
            
// //             {/* Spacer for bottom buttons */}
// //             <View style={{ height: 80 }} />
// //           </ScrollView>
// //         </View>

// //         {/* Fixed Bottom Action Buttons */}
// //         <View style={styles.bottomActions}>
// //           <TouchableOpacity style={styles.bottomButton}>
// //             <AntDesign name="close" size={20} color="#FF6B6B" />
// //             <Text style={styles.bottomButtonText}>Dont Show</Text>
// //           </TouchableOpacity>
// //           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
// //             <Feather name="message-square" size={20} color="#fff" />
// //             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>Send Message</Text>
// //           </TouchableOpacity>
// //         </View>
// //       </View>
// //     </SafeAreaView>
// //   );
// // }

// // const styles = StyleSheet.create({
// //   safeArea: {
// //     flex: 1,
// //     backgroundColor: '#fff',
// //   },
// //   container: {
// //     flex: 1,
// //     position: 'relative',
// //   },
// //   contentContainer: {
// //     flex: 1,
// //   },
// //   scrollContent: {
// //     paddingBottom: 80, // Space for fixed buttons
// //   },
// //   header: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   toggleContainer: {
// //     flexDirection: 'row',
// //     backgroundColor: '#f5f5f5',
// //     borderRadius: 20,
// //     padding: 2,
// //   },
// //   toggleButton: {
// //     paddingHorizontal: 15,
// //     paddingVertical: 8,
// //     borderRadius: 15,
// //   },
// //   activeToggle: {
// //     backgroundColor: '#fff',
// //     shadowColor: '#000',
// //     shadowOffset: { width: 0, height: 2 },
// //     shadowOpacity: 0.1,
// //     shadowRadius: 4,
// //     elevation: 2,
// //   },
// //   toggleText: {
// //     fontWeight: 'bold',
// //     color: '#555',
// //   },
// //   languageButton: {
// //     padding: 5,
// //   },
// //   tabsContainer: {
// //     paddingHorizontal: 15,
// //     marginVertical: 10,
// //   },
// //   tab: {
// //     flexDirection: 'row',
// //     alignItems: 'center',
// //     paddingHorizontal: 15,
// //     paddingVertical: 8,
// //     marginRight: 10,
// //     borderRadius: 15,
// //   },
// //   activeTab: {
// //     backgroundColor: '#FF6B6B',
// //   },
// //   tabText: {
// //     color: '#555',
// //     marginRight: 5,
// //   },
// //   activeTabText: {
// //     color: '#fff',
// //   },
// //   optionsContainer: {
// //     flexDirection: 'row',
// //     paddingHorizontal: 15,
// //     marginBottom: 15,
// //   },
// //   option: {
// //     paddingHorizontal: 12,
// //     paddingVertical: 6,
// //     marginRight: 10,
// //     borderRadius: 15,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //   },
// //   selectedOption: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   optionText: {
// //     color: '#555',
// //   },
// //   selectedOptionText: {
// //     color: '#fff',
// //   },
// //   profileContainer: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   profileImage: {
// //     width: '100%',
// //     height: 300,
// //     borderRadius: 10,
// //     marginBottom: 15,
// //   },
// //   profileHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'flex-start',
// //     marginBottom: 10,
// //   },
// //   profileName: {
// //     fontSize: 20,
// //     fontWeight: 'bold',
// //     marginBottom: 5,
// //   },
// //   profileDetails: {
// //     color: '#666',
// //     marginBottom: 2,
// //   },
// //   matchBadge: {
// //     backgroundColor: '#FF6B6B',
// //     paddingHorizontal: 10,
// //     paddingVertical: 5,
// //     borderRadius: 15,
// //   },
// //   matchText: {
// //     color: '#fff',
// //     fontWeight: 'bold',
// //   },
// //   lastSeen: {
// //     color: '#4CAF50',
// //     marginBottom: 15,
// //   },
// //   actionButtons: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-around',
// //     marginVertical: 10,
// //   },
// //   actionButton: {
// //     padding: 10,
// //     borderRadius: 50,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     width: 60,
// //     alignItems: 'center',
// //   },
// //   bottomActions: {
// //     flexDirection: 'row',
// //     padding: 15,
// //     borderTopWidth: 1,
// //     borderTopColor: '#eee',
// //     backgroundColor: '#fff',
// //     position: 'absolute',
// //     bottom: 0,
// //     left: 0,
// //     right: 0,
// //     ...Platform.select({
// //       ios: {
// //         shadowColor: '#000',
// //         shadowOffset: { width: 0, height: -2 },
// //         shadowOpacity: 0.1,
// //         shadowRadius: 4,
// //       },
// //       android: {
// //         elevation: 10,
// //       },
// //     }),
// //   },
// //   bottomButton: {
// //     flex: 1,
// //     flexDirection: 'row',
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderRadius: 10,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     marginHorizontal: 5,
// //   },
// //   messageButton: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   bottomButtonText: {
// //     marginLeft: 5,
// //   },
// //   messageButtonText: {
// //     color: '#fff',
// //   },
// //   section: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   sectionHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     marginBottom: 15,
// //   },
// //   sectionTitle: {
// //     fontSize: 18,
// //     fontWeight: 'bold',
// //     marginBottom: 15,
// //   },
// //   seeAll: {
// //     color: '#FF6B6B',
// //   },
// //   infoRow: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     marginBottom: 10,
// //   },
// //   infoLabel: {
// //     color: '#666',
// //     width: '40%',
// //   },
// //   infoValue: {
// //     fontWeight: 'bold',
// //     width: '60%',
// //     textAlign: 'right',
// //   },
// //   infoValueContainer: {
// //     flexDirection: 'row',
// //     justifyContent: 'flex-end',
// //     alignItems: 'center',
// //     width: '60%',
// //   },
// //   aboutText: {
// //     lineHeight: 22,
// //   },
// //   suggestedProfiles: {
// //     marginBottom: 15,
// //   },
// //   suggestedProfile: {
// //     marginRight: 15,
// //     width: 120,
// //   },
// //   suggestedImage: {
// //     width: 120,
// //     height: 150,
// //     borderRadius: 10,
// //     marginBottom: 5,
// //   },
// //   suggestedName: {
// //     fontWeight: 'bold',
// //   },
// //   suggestedDetails: {
// //     color: '#666',
// //     fontSize: 12,
// //   },
// // });











// // import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform } from 'react-native';
// // import React, { useState } from 'react';
// // import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign } from '@expo/vector-icons';
// // import { SafeAreaView } from 'react-native-safe-area-context';

// // // Placeholder images
// // const placeholderImages = {
// //   girl1: 'https://i.pinimg.com/736x/f3/da/67/f3da67caf09a8735732d20ec977e10a5.jpg',
// //   girl2: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// //   girl3: 'https://images.unsplash.com/photo-1554151228-14d9def656e4?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// //   girl4: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// // };

// // export default function Matches() {
// //   const [selectedOption, setSelectedOption] = useState('Newly Joined');
// //   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

// //   const profileData = {
// //     name: 'Priya Sharma',
// //     age: '23yrs',
// //     height: "5'5\"",
// //     place: 'Salem, Tamil Nadu',
// //     education: 'B.sc',
// //     occupation: 'Not working',
// //     lastSeen: 'Active today',
// //     matchPercentage: '99% match'
// //   };

// //   const personalInfo = [
// //     { label: 'Age', value: '23 years' },
// //     { label: 'Height', value: "5'5\"" },
// //     { label: 'Spoken Language', value: 'Tamil (Mother Tongue)' },
// //     { label: 'Profile created by', value: 'Parents' },
// //     { label: 'Marital Status', value: 'Never married' },
// //     { label: 'Lives in', value: 'Salem, Tamil Nadu' },
// //     { label: 'Eating Habits', value: 'Not specified' },
// //     { label: 'Religion', value: 'Hindu' },
// //     { label: 'Caste', value: 'Kongu Vellala Gounder' },
// //     { label: 'Subcaste', value: 'Kongu Vellala Gounder' },
// //     { label: 'Gotra', value: 'Not specified' },
// //     { label: 'Date Of Birth', value: '02 Apr 2002' },
// //     { label: 'Rassi', value: 'Upgrade to view', icon: 'lock' },
// //     { label: 'Employment', value: 'Works in Private Sector' },
// //     { label: 'Annual Income', value: '₹6-7 lakhs' },
// //     { label: 'Education', value: 'B.sc' },
// //     { label: 'Occupation', value: 'Marketing Professional' },
// //     { label: 'Studied at', value: 'Upgrade to view' },
// //     { label: 'Works at', value: 'Upgrade to view' },
// //   ];

// //   const familyInfo = [
// //     { label: 'Family Status', value: 'Middle class' },
// //     { label: 'Father', value: 'Business man' },
// //     { label: 'Mother', value: 'Business woman' },
// //     { label: 'Ancestral Origin', value: 'Not specified' },
// //   ];

// //   const lifestyleInfo = [
// //     { label: 'Cuisine', value: 'Arabic, North Indian, South Indian' },
// //     { label: 'Hobbies', value: 'Bike/Car enthusiast, Dancing, Pets' },
// //     { label: 'Movies', value: 'Comedy' },
// //     { label: 'Music', value: 'Film songs' },
// //     { label: 'Smoking Habits', value: "Doesn't smoke" },
// //     { label: 'Drinking Habits', value: "Doesn't drink" },
// //   ];

// //   const suggestedProfiles = [
// //     { id: 1, name: 'Ananya', age: 24, height: "5'4\"", image: placeholderImages.girl1 },
// //     { id: 2, name: 'Meera', age: 25, height: "5'6\"", image: placeholderImages.girl2 },
// //     { id: 3, name: 'Divya', age: 23, height: "5'3\"", image: placeholderImages.girl3 },
// //     { id: 4, name: 'Shreya', age: 26, height: "5'5\"", image: placeholderImages.girl4 },
// //   ];

// //   return (
// //     <SafeAreaView style={styles.safeArea}>
// //       <View style={styles.container}>
// //         {/* Header */}
// //         <View style={styles.header}>
// //           <View style={styles.toggleContainer}>
// //             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
// //               <Text style={styles.toggleText}>Regular</Text>
// //             </TouchableOpacity>
// //             <TouchableOpacity style={styles.toggleButton}>
// //               <Text style={styles.toggleText}>Prime</Text>
// //             </TouchableOpacity>
// //           </View>
// //           <TouchableOpacity style={styles.languageButton}>
// //             <Ionicons name="language" size={24} color="#FF6B6B" />
// //           </TouchableOpacity>
// //         </View>

// //         {/* Options */}
// //         <View style={styles.optionsContainer}>
// //           {options.map((option) => (
// //             <TouchableOpacity
// //               key={option}
// //               style={[styles.option, selectedOption === option && styles.selectedOption]}
// //               onPress={() => setSelectedOption(option)}
// //             >
// //               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
// //                 {option}
// //               </Text>
// //             </TouchableOpacity>
// //           ))}
// //         </View>

// //         <View style={styles.contentContainer}>
// //           <ScrollView contentContainerStyle={styles.scrollContent}>
// //             {/* Profile Section */}
// //             <View style={styles.profileContainer}>
// //               <Image
// //                 source={{ uri: placeholderImages.girl1 }}
// //                 style={styles.profileImage}
// //                 resizeMode="cover"
// //               />
// //               <View style={styles.profileHeader}>
// //                 <View>
// //                   <Text style={styles.profileName}>{profileData.name}</Text>
// //                   <Text style={styles.profileDetails}>
// //                     {profileData.age}, {profileData.height}, {profileData.place}
// //                   </Text>
// //                   <Text style={styles.profileDetails}>{profileData.education}, {profileData.occupation}</Text>
// //                 </View>
// //                 <View style={styles.matchBadge}>
// //                   <Text style={styles.matchText}>{profileData.matchPercentage}</Text>
// //                 </View>
// //               </View>
// //               <Text style={styles.lastSeen}>{profileData.lastSeen}</Text>

// //               {/* Action Buttons */}
// //               <View style={styles.actionButtons}>
// //                 <TouchableOpacity style={styles.actionButton}>
// //                   <MaterialIcons name="call" size={24} color="#4CAF50" />
// //                 </TouchableOpacity>
// //                 <TouchableOpacity style={styles.actionButton}>
// //                   <FontAwesome name="whatsapp" size={24} color="#25D366" />
// //                 </TouchableOpacity>
// //               </View>
// //             </View>

// //             {/* Information Sections */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Personal Information</Text>
// //               <View style={styles.infoGrid}>
// //                 {personalInfo.map((item, index) => (
// //                   <View key={index} style={styles.infoItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <View style={styles.infoValueContainer}>
// //                       <Text style={styles.infoValue}>{item.value}</Text>
// //                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
// //                     </View>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Family Information</Text>
// //               <View style={styles.infoGrid}>
// //                 {familyInfo.map((item, index) => (
// //                   <View key={index} style={styles.infoItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>About Myself</Text>
// //               <Text style={styles.aboutText}>
// //                 My daughter is working as a marketing executive. She is currently living in Kozhikode.
// //                 We come from a middle class, nuclear family background with moderate values.
// //               </Text>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Lifestyle</Text>
// //               <View style={styles.infoGrid}>
// //                 {lifestyleInfo.map((item, index) => (
// //                   <View key={index} style={styles.infoItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <View style={styles.sectionHeader}>
// //                 <Text style={styles.sectionTitle}>Profiles you may like</Text>
// //                 <TouchableOpacity>
// //                   <Text style={styles.seeAll}>See All</Text>
// //                 </TouchableOpacity>
// //               </View>
// //               <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
// //                 {suggestedProfiles.map((profile) => (
// //                   <TouchableOpacity key={profile.id} style={styles.suggestedProfile}>
// //                     <Image
// //                       source={{ uri: profile.image }}
// //                       style={styles.suggestedImage}
// //                       resizeMode="cover"
// //                     />
// //                     <Text style={styles.suggestedName}>{profile.name}</Text>
// //                     <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
// //                   </TouchableOpacity>
// //                 ))}
// //               </ScrollView>
// //             </View>
            
// //             {/* Spacer for bottom buttons */}
// //             <View style={{ height: 80 }} />
// //           </ScrollView>
// //         </View>

// //         {/* Fixed Bottom Action Buttons */}
// //         <View style={styles.bottomActions}>
// //           <TouchableOpacity style={styles.bottomButton}>
// //             <AntDesign name="close" size={20} color="#FF6B6B" />
// //             <Text style={styles.bottomButtonText}>Don't Show</Text>
// //           </TouchableOpacity>
// //           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
// //             <Feather name="message-square" size={20} color="#fff" />
// //             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>Send Message</Text>
// //           </TouchableOpacity>
// //         </View>
// //       </View>
// //     </SafeAreaView>
// //   );
// // }

// // const styles = StyleSheet.create({
// //   safeArea: {
// //     flex: 1,
// //     backgroundColor: '#fff',
// //   },
// //   container: {
// //     flex: 1,
// //     position: 'relative',
// //   },
// //   contentContainer: {
// //     flex: 1,
// //   },
// //   scrollContent: {
// //     paddingBottom: 80,
// //   },
// //   header: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   toggleContainer: {
// //     flexDirection: 'row',
// //     backgroundColor: '#f5f5f5',
// //     borderRadius: 20,
// //     padding: 2,
// //   },
// //   toggleButton: {
// //     paddingHorizontal: 15,
// //     paddingVertical: 8,
// //     borderRadius: 15,
// //   },
// //   activeToggle: {
// //     backgroundColor: '#fff',
// //     shadowColor: '#000',
// //     shadowOffset: { width: 0, height: 2 },
// //     shadowOpacity: 0.1,
// //     shadowRadius: 4,
// //     elevation: 2,
// //   },
// //   toggleText: {
// //     fontWeight: 'bold',
// //     color: '#555',
// //   },
// //   languageButton: {
// //     padding: 5,
// //   },
// //   optionsContainer: {
// //     flexDirection: 'row',
// //     paddingHorizontal: 15,
// //     marginBottom: 15,
// //   },
// //   option: {
// //     paddingHorizontal: 12,
// //     paddingVertical: 6,
// //     marginRight: 10,
// //     borderRadius: 15,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //   },
// //   selectedOption: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   optionText: {
// //     color: '#555',
// //     fontSize: 12,
// //   },
// //   selectedOptionText: {
// //     color: '#fff',
// //   },
// //   profileContainer: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   profileImage: {
// //     width: '100%',
// //     height: 300,
// //     borderRadius: 10,
// //     marginBottom: 15,
// //   },
// //   profileHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'flex-start',
// //     marginBottom: 10,
// //   },
// //   profileName: {
// //     fontSize: 20,
// //     fontWeight: 'bold',
// //     marginBottom: 5,
// //     color: '#333',
// //   },
// //   profileDetails: {
// //     color: '#666',
// //     marginBottom: 2,
// //     fontSize: 14,
// //   },
// //   matchBadge: {
// //     backgroundColor: '#FF6B6B',
// //     paddingHorizontal: 10,
// //     paddingVertical: 5,
// //     borderRadius: 15,
// //   },
// //   matchText: {
// //     color: '#fff',
// //     fontWeight: 'bold',
// //     fontSize: 12,
// //   },
// //   lastSeen: {
// //     color: '#4CAF50',
// //     marginBottom: 15,
// //     fontSize: 12,
// //   },
// //   actionButtons: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-around',
// //     marginVertical: 10,
// //   },
// //   actionButton: {
// //     padding: 10,
// //     borderRadius: 50,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     width: 60,
// //     alignItems: 'center',
// //     backgroundColor: '#f9f9f9',
// //   },
// //   bottomActions: {
// //     flexDirection: 'row',
// //     padding: 15,
// //     borderTopWidth: 1,
// //     borderTopColor: '#eee',
// //     backgroundColor: '#fff',
// //     position: 'absolute',
// //     bottom: 0,
// //     left: 0,
// //     right: 0,
// //     ...Platform.select({
// //       ios: {
// //         shadowColor: '#000',
// //         shadowOffset: { width: 0, height: -2 },
// //         shadowOpacity: 0.1,
// //         shadowRadius: 4,
// //       },
// //       android: {
// //         elevation: 10,
// //       },
// //     }),
// //   },
// //   bottomButton: {
// //     flex: 1,
// //     flexDirection: 'row',
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderRadius: 10,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     marginHorizontal: 5,
// //     backgroundColor: '#f9f9f9',
// //   },
// //   messageButton: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   bottomButtonText: {
// //     marginLeft: 5,
// //     fontWeight: '600',
// //   },
// //   messageButtonText: {
// //     color: '#fff',
// //   },
// //   section: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   sectionHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     marginBottom: 15,
// //   },
// //   sectionTitle: {
// //     fontSize: 18,
// //     fontWeight: 'bold',
// //     marginBottom: 15,
// //     color: '#333',
// //   },
// //   seeAll: {
// //     color: '#FF6B6B',
// //     fontWeight: '600',
// //   },
// //   infoGrid: {
// //     flexDirection: 'row',
// //     flexWrap: 'wrap',
// //     justifyContent: 'space-between',
// //   },
// //   infoItem: {
// //     flexDirection: 'row',
// //     width: '48%',
// //     marginBottom: 12,
// //     alignItems: 'center',
// //   },
// //   infoLabel: {
// //     color: '#666',
// //     fontSize: 14,
// //     fontWeight: '500',
// //     marginRight: 4,
// //   },
// //   infoValue: {
// //     fontWeight: '500',
// //     color: '#333',
// //     fontSize: 14,
// //     flexShrink: 1,
// //   },
// //   infoValueContainer: {
// //     flexDirection: 'row',
// //     alignItems: 'center',
// //   },
// //   lockIcon: {
// //     marginLeft: 4,
// //   },
// //   aboutText: {
// //     lineHeight: 22,
// //     color: '#555',
// //   },
// //   suggestedProfiles: {
// //     marginBottom: 15,
// //   },
// //   suggestedProfile: {
// //     marginRight: 15,
// //     width: 120,
// //   },
// //   suggestedImage: {
// //     width: 120,
// //     height: 150,
// //     borderRadius: 10,
// //     marginBottom: 8,
// //   },
// //   suggestedName: {
// //     fontWeight: 'bold',
// //     fontSize: 14,
// //     color: '#333',
// //   },
// //   suggestedDetails: {
// //     color: '#666',
// //     fontSize: 12,
// //   },
// // });










// //app/(tabs)/Matches.js

// // import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform } from 'react-native';
// // import React, { useState } from 'react';
// // import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign } from '@expo/vector-icons';
// // import { SafeAreaView } from 'react-native-safe-area-context';

// // // Placeholder images
// // const placeholderImages = {
// //   girl1: 'https://i.pinimg.com/736x/f3/da/67/f3da67caf09a8735732d20ec977e10a5.jpg',
// //   girl2: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// //   girl3: 'https://images.unsplash.com/photo-1554151228-14d9def656e4?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// //   girl4: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',
// // };

// // export default function Matches() {
// //   const [selectedOption, setSelectedOption] = useState('Newly Joined');
// //   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

// //   const profileData = {
// //     name: 'Priya Sharma',
// //     age: '23yrs',
// //     height: "5'5\"",
// //     place: 'Salem, Tamil Nadu',
// //     education: 'B.sc',
// //     occupation: 'Not working',
// //     lastSeen: 'Active today',
// //     matchPercentage: '99% match'
// //   };

// //   const personalInfo = [
// //     { label: 'Age', value: '23 years' },
// //     { label: 'Height', value: "5'5\"" },
// //     { label: 'Spoken Language', value: 'Tamil (Mother Tongue)' },
// //     { label: 'Profile created by', value: 'Parents' },
// //     { label: 'Marital Status', value: 'Never married' },
// //     { label: 'Lives in', value: 'Salem, Tamil Nadu' },
// //     { label: 'Eating Habits', value: 'Not specified' },
// //     { label: 'Religion', value: 'Hindu' },
// //     { label: 'Caste', value: 'Kongu Vellala Gounder' },
// //     { label: 'Subcaste', value: 'Kongu Vellala Gounder' },
// //     { label: 'Gotra', value: 'Not specified' },
// //     { label: 'Date Of Birth', value: '02 Apr 2002' },
// //     { label: 'Rassi', value: 'Upgrade to view', icon: 'lock' },
// //     { label: 'Employment', value: 'Works in Private Sector' },
// //     { label: 'Annual Income', value: '₹6-7 lakhs' },
// //     { label: 'Education', value: 'B.sc' },
// //     { label: 'Occupation', value: 'Marketing Professional' },
// //     { label: 'Studied at', value: 'Upgrade to view' },
// //     { label: 'Works at', value: 'Upgrade to view' },
// //   ];

// //   const familyInfo = [
// //     { label: 'Family Status', value: 'Middle class' },
// //     { label: 'Father', value: 'Business man' },
// //     { label: 'Mother', value: 'Business woman' },
// //     { label: 'Ancestral Origin', value: 'Not specified' },
// //   ];

// //   const lifestyleInfo = [
// //     { label: 'Cuisine', value: 'Arabic, North Indian, South Indian' },
// //     { label: 'Hobbies', value: 'Bike/Car enthusiast, Dancing, Pets' },
// //     { label: 'Movies', value: 'Comedy' },
// //     { label: 'Music', value: 'Film songs' },
// //     { label: 'Smoking Habits', value: "Doesn't smoke" },
// //     { label: 'Drinking Habits', value: "Doesn't drink" },
// //   ];

// //   const suggestedProfiles = [
// //     { id: 1, name: 'Ananya', age: 24, height: "5'4\"", image: placeholderImages.girl1 },
// //     { id: 2, name: 'Meera', age: 25, height: "5'6\"", image: placeholderImages.girl2 },
// //     { id: 3, name: 'Divya', age: 23, height: "5'3\"", image: placeholderImages.girl3 },
// //     { id: 4, name: 'Shreya', age: 26, height: "5'5\"", image: placeholderImages.girl4 },
// //   ];

// //   return (
// //     <SafeAreaView style={styles.safeArea}>
// //       <View style={styles.container}>
// //         {/* Header */}
// //         <View style={styles.header}>
// //           <View style={styles.toggleContainer}>
// //             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
// //               <Text style={styles.toggleText}>Regular</Text>
// //             </TouchableOpacity>
// //             <TouchableOpacity style={styles.toggleButton}>
// //               <Text style={styles.toggleText}>Prime</Text>
// //             </TouchableOpacity>
// //           </View>
// //           <TouchableOpacity style={styles.languageButton}>
// //             <Ionicons name="language" size={24} color="#FF6B6B" />
// //           </TouchableOpacity>
// //         </View>

// //         {/* Options */}
// //         <View style={styles.optionsContainer}>
// //           {options.map((option) => (
// //             <TouchableOpacity
// //               key={option}
// //               style={[styles.option, selectedOption === option && styles.selectedOption]}
// //               onPress={() => setSelectedOption(option)}
// //             >
// //               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
// //                 {option}
// //               </Text>
// //             </TouchableOpacity>
// //           ))}
// //         </View>

// //         <View style={styles.contentContainer}>
// //           <ScrollView contentContainerStyle={styles.scrollContent}>
// //             {/* Profile Section */}
// //             <View style={styles.profileContainer}>
// //               <Image
// //                 source={{ uri: placeholderImages.girl1 }}
// //                 style={styles.profileImage}
// //                 resizeMode="cover"
// //               />
// //               <View style={styles.profileHeader}>
// //                 <View>
// //                   <Text style={styles.profileName}>{profileData.name}</Text>
// //                   <Text style={styles.profileDetails}>
// //                     {profileData.age}, {profileData.height}, {profileData.place}
// //                   </Text>
// //                   <Text style={styles.profileDetails}>{profileData.education}, {profileData.occupation}</Text>
// //                 </View>
// //                 <View style={styles.matchBadge}>
// //                   <Text style={styles.matchText}>{profileData.matchPercentage}</Text>
// //                 </View>
// //               </View>
// //               <Text style={styles.lastSeen}>{profileData.lastSeen}</Text>

// //               {/* Action Buttons */}
// //               <View style={styles.actionButtons}>
// //                 <TouchableOpacity style={styles.actionButton}>
// //                   <MaterialIcons name="call" size={24} color="#4CAF50" />
// //                 </TouchableOpacity>
// //                 <TouchableOpacity style={styles.actionButton}>
// //                   <FontAwesome name="whatsapp" size={24} color="#25D366" />
// //                 </TouchableOpacity>
// //               </View>
// //             </View>

// //             {/* Information Sections */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Personal Information</Text>
// //               <View style={styles.infoList}>
// //                 {personalInfo.map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label} :</Text>
// //                     <View style={styles.infoValueContainer}>
// //                       <Text style={styles.infoValue}>{item.value}</Text>
// //                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
// //                     </View>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Family Information</Text>
// //               <View style={styles.infoList}>
// //                 {familyInfo.map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>About Myself</Text>
// //               <Text style={styles.aboutText}>
// //                 My daughter is working as a marketing executive. She is currently living in Kozhikode.
// //                 We come from a middle class, nuclear family background with moderate values.
// //               </Text>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>Lifestyle</Text>
// //               <View style={styles.infoList}>
// //                 {lifestyleInfo.map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <View style={styles.sectionHeader}>
// //                 <Text style={styles.sectionTitle}>Profiles you may like</Text>
// //                 <TouchableOpacity>
// //                   <Text style={styles.seeAll}>See All</Text>
// //                 </TouchableOpacity>
// //               </View>
// //               <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
// //                 {suggestedProfiles.map((profile) => (
// //                   <TouchableOpacity key={profile.id} style={styles.suggestedProfile}>
// //                     <Image
// //                       source={{ uri: profile.image }}
// //                       style={styles.suggestedImage}
// //                       resizeMode="cover"
// //                     />
// //                     <Text style={styles.suggestedName}>{profile.name}</Text>
// //                     <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
// //                   </TouchableOpacity>
// //                 ))}
// //               </ScrollView>
// //             </View>
            
// //             {/* Spacer for bottom buttons */}
// //             <View style={{ height: 80 }} />
// //           </ScrollView>
// //         </View>

// //         {/* Fixed Bottom Action Buttons */}
// //         <View style={styles.bottomActions}>
// //           <TouchableOpacity style={styles.bottomButton}>
// //             <AntDesign name="close" size={20} color="#FF6B6B" />
// //             <Text style={styles.bottomButtonText}>Don't Show</Text>
// //           </TouchableOpacity>
// //           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
// //             <Feather name="message-square" size={20} color="#fff" />
// //             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>Send Message</Text>
// //           </TouchableOpacity>
// //         </View>
// //       </View>
// //     </SafeAreaView>
// //   );
// // }

// // const styles = StyleSheet.create({
// //   safeArea: {
// //     flex: 1,
// //     backgroundColor: '#fff',
// //   },
// //   container: {
// //     flex: 1,
// //     position: 'relative',
// //   },
// //   contentContainer: {
// //     flex: 1,
// //   },
// //   scrollContent: {
// //     paddingBottom: 80,
// //   },
// //   header: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   toggleContainer: {
// //     flexDirection: 'row',
// //     backgroundColor: '#f5f5f5',
// //     borderRadius: 20,
// //     padding: 2,
// //   },
// //   toggleButton: {
// //     paddingHorizontal: 15,
// //     paddingVertical: 8,
// //     borderRadius: 15,
// //   },
// //   activeToggle: {
// //     backgroundColor: '#fff',
// //     shadowColor: '#000',
// //     shadowOffset: { width: 0, height: 2 },
// //     shadowOpacity: 0.1,
// //     shadowRadius: 4,
// //     elevation: 2,
// //   },
// //   toggleText: {
// //     fontWeight: 'bold',
// //     color: '#555',
// //   },
// //   languageButton: {
// //     padding: 5,
// //   },
// //   optionsContainer: {
// //     flexDirection: 'row',
// //     paddingHorizontal: 15,
// //     marginBottom: 15,
// //   },
// //   option: {
// //     paddingHorizontal: 12,
// //     paddingVertical: 6,
// //     marginRight: 10,
// //     borderRadius: 15,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //   },
// //   selectedOption: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   optionText: {
// //     color: '#555',
// //     fontSize: 12,
// //   },
// //   selectedOptionText: {
// //     color: '#fff',
// //   },
// //   profileContainer: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   profileImage: {
// //     width: '100%',
// //     height: 300,
// //     borderRadius: 10,
// //     marginBottom: 15,
// //   },
// //   profileHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'flex-start',
// //     marginBottom: 10,
// //   },
// //   profileName: {
// //     fontSize: 20,
// //     fontWeight: 'bold',
// //     marginBottom: 5,
// //     color: '#333',
// //   },
// //   profileDetails: {
// //     color: '#666',
// //     marginBottom: 2,
// //     fontSize: 14,
// //   },
// //   matchBadge: {
// //     backgroundColor: '#FF6B6B',
// //     paddingHorizontal: 10,
// //     paddingVertical: 5,
// //     borderRadius: 15,
// //   },
// //   matchText: {
// //     color: '#fff',
// //     fontWeight: 'bold',
// //     fontSize: 12,
// //   },
// //   lastSeen: {
// //     color: '#4CAF50',
// //     marginBottom: 15,
// //     fontSize: 12,
// //   },
// //   actionButtons: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-around',
// //     marginVertical: 10,
// //   },
// //   actionButton: {
// //     padding: 10,
// //     borderRadius: 50,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     width: 60,
// //     alignItems: 'center',
// //     backgroundColor: '#f9f9f9',
// //   },
// //   bottomActions: {
// //     flexDirection: 'row',
// //     padding: 15,
// //     borderTopWidth: 1,
// //     borderTopColor: '#eee',
// //     backgroundColor: '#fff',
// //     position: 'absolute',
// //     bottom: 0,
// //     left: 0,
// //     right: 0,
// //     ...Platform.select({
// //       ios: {
// //         shadowColor: '#000',
// //         shadowOffset: { width: 0, height: -2 },
// //         shadowOpacity: 0.1,
// //         shadowRadius: 4,
// //       },
// //       android: {
// //         elevation: 10,
// //       },
// //     }),
// //   },
// //   bottomButton: {
// //     flex: 1,
// //     flexDirection: 'row',
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderRadius: 10,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     marginHorizontal: 5,
// //     backgroundColor: '#f9f9f9',
// //   },
// //   messageButton: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   bottomButtonText: {
// //     marginLeft: 5,
// //     fontWeight: '600',
// //   },
// //   messageButtonText: {
// //     color: '#fff',
// //   },
// //   section: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   sectionHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     marginBottom: 15,
// //   },
// //   sectionTitle: {
// //     fontSize: 18,
// //     fontWeight: 'bold',
// //     marginBottom: 15,
// //     color: '#333',
// //   },
// //   seeAll: {
// //     color: '#FF6B6B',
// //     fontWeight: '600',
// //   },
// //   infoList: {
// //     // Single column layout
// //   },
// //   infoListItem: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     marginBottom: 12,
// //     alignItems: 'center',
// //   },
// //   infoLabel: {
// //     color: '#666',
// //     fontSize: 14,
// //     fontWeight: '500',
// //     flex: 1,
// //   },
// //   infoValue: {
// //     fontWeight: '500',
// //     color: '#333',
// //     fontSize: 14,
// //     flex: 1,
// //     textAlign: 'right',
// //   },
// //   infoValueContainer: {
// //     flexDirection: 'row',
// //     alignItems: 'center',
// //     flex: 1,
// //     justifyContent: 'flex-end',
// //   },
// //   lockIcon: {
// //     marginLeft: 4,
// //   },
// //   aboutText: {
// //     lineHeight: 22,
// //     color: '#555',
// //   },
// //   suggestedProfiles: {
// //     marginBottom: 15,
// //   },
// //   suggestedProfile: {
// //     marginRight: 15,
// //     width: 120,
// //   },
// //   suggestedImage: {
// //     width: 120,
// //     height: 150,
// //     borderRadius: 10,
// //     marginBottom: 8,
// //   },
// //   suggestedName: {
// //     fontWeight: 'bold',
// //     fontSize: 14,
// //     color: '#333',
// //   },
// //   suggestedDetails: {
// //     color: '#666',
// //     fontSize: 12,
// //   },
// // });







// //app/(tabs)/Matches.js

// // import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator } from 'react-native';
// // import React, { useState, useEffect } from 'react';
// // import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign } from '@expo/vector-icons';
// // import { SafeAreaView } from 'react-native-safe-area-context';
// // import { useFirestore } from '../hooks/useFirebase';
// // import { collection, query, where, getDocs, limit, doc, getDoc } from 'firebase/firestore';
// // import { db } from '../../config/firebase';
// // import { useLanguage } from '../context/LanguageContext';

// // export default function Matches() {
// //   const [selectedOption, setSelectedOption] = useState('Newly Joined');
// //   const [selectedProfile, setSelectedProfile] = useState(null);
// //   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [loadingProfiles, setLoadingProfiles] = useState(true);
// //   const { userData } = useFirestore();
// //   const { language } = useLanguage();

// //   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

// //   // Translations
// //   const translations = {
// //     newlyJoined: {
// //       ENG: "Newly Joined",
// //       HI: "नए जुड़े"
// //     },
// //     recentlyActive: {
// //       ENG: "Recently Active",
// //       HI: "हाल ही में सक्रिय"
// //     },
// //     mostViewed: {
// //       ENG: "Most Viewed",
// //       HI: "सबसे अधिक देखे गए"
// //     },
// //     personalInfo: {
// //       ENG: "Personal Information",
// //       HI: "व्यक्तिगत जानकारी"
// //     },
// //     familyInfo: {
// //       ENG: "Family Information",
// //       HI: "पारिवारिक जानकारी"
// //     },
// //     aboutMyself: {
// //       ENG: "About Myself",
// //       HI: "मेरे बारे में"
// //     },
// //     lifestyle: {
// //       ENG: "Lifestyle",
// //       HI: "जीवन शैली"
// //     },
// //     profilesYouMayLike: {
// //       ENG: "Profiles you may like",
// //       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
// //     },
// //     seeAll: {
// //       ENG: "See All",
// //       HI: "सभी देखें"
// //     },
// //     dontShow: {
// //       ENG: "Don't Show",
// //       HI: "दिखाएं नहीं"
// //     },
// //     sendMessage: {
// //       ENG: "Send Message",
// //       HI: "संदेश भेजें"
// //     },
// //     activeToday: {
// //       ENG: "Active today",
// //       HI: "आज सक्रिय"
// //     },
// //     match: {
// //       ENG: "match",
// //       HI: "मेल"
// //     },
// //     notUpdated: {
// //       ENG: "Not updated",
// //       HI: "अपडेट नहीं किया गया"
// //     },
// //     loading: {
// //       ENG: "Loading...",
// //       HI: "लोड हो रहा है..."
// //     }
// //   };

// //   // Fetch a random profile from the opposite gender
// //   const fetchRandomProfile = async () => {
// //     if (!userData) return;
    
// //     try {
// //       setLoading(true);
// //       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
// //       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
// //       // Get all profiles
// //       const querySnapshot = await getDocs(profilesRef);
// //       const profiles = [];
      
// //       querySnapshot.forEach((doc) => {
// //         profiles.push({
// //           id: doc.id,
// //           ...doc.data()
// //         });
// //       });
      
// //       // Select a random profile
// //       if (profiles.length > 0) {
// //         const randomIndex = Math.floor(Math.random() * profiles.length);
// //         setSelectedProfile(profiles[randomIndex]);
// //       }
      
// //       // Fetch suggested profiles (limit to 4)
// //       const suggestedQuery = query(profilesRef, limit(4));
// //       const suggestedSnapshot = await getDocs(suggestedQuery);
// //       const suggested = [];
      
// //       suggestedSnapshot.forEach((doc) => {
// //         const profileData = doc.data();
// //         suggested.push({
// //           id: doc.id,
// //           name: profileData.firstName || 'User',
// //           age: profileData.age || calculateAge(profileData.dateOfBirth),
// //           height: profileData.height || "5'5\"",
// //           image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
// //           city: profileData.city || '',
// //           occupation: profileData.occupation || ''
// //         });
// //       });
      
// //       setSuggestedProfiles(suggested);
// //     } catch (error) {
// //       console.error('Error fetching profiles:', error);
// //     } finally {
// //       setLoading(false);
// //       setLoadingProfiles(false);
// //     }
// //   };

// //   // Calculate age from date of birth
// //   const calculateAge = (dateOfBirth) => {
// //     if (!dateOfBirth) return 25;
// //     try {
// //       const [day, month, year] = dateOfBirth.split('/');
// //       const birthDate = new Date(`${year}-${month}-${day}`);
// //       const today = new Date();
// //       let age = today.getFullYear() - birthDate.getFullYear();
// //       const monthDiff = today.getMonth() - birthDate.getMonth();
      
// //       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
// //         age--;
// //       }
      
// //       return age;
// //     } catch (error) {
// //       return 25;
// //     }
// //   };

// //   // Format personal information data
// //   const getPersonalInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
// //       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
// //       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
// //       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
// //       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
// //       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state}` : translations.notUpdated[language] },
// //       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
// //       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
// //       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
// //       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
// //       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
// //       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
// //       { label: 'Rassi', value: 'Upgrade to view', icon: 'lock' },
// //       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
// //       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
// //       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
// //       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
// //       { label: 'Studied at', value: 'Upgrade to view', icon: 'lock' },
// //       { label: 'Works at', value: 'Upgrade to view', icon: 'lock' },
// //     ];
// //   };

// //   // Format family information data
// //   const getFamilyInfo = () => {
// //     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
// //     const familyInfo = selectedProfile.familyInfo;
// //     return [
// //       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
// //       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
// //       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
// //       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
// //       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
// //       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
// //     ];
// //   };

// //   // Format lifestyle information data
// //   const getLifestyleInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
// //       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
// //       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
// //       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
// //       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
// //       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
// //     ];
// //   };

// //   useEffect(() => {
// //     fetchRandomProfile();
// //   }, [userData]);

// //   if (loading) {
// //     return (
// //       <SafeAreaView style={styles.safeArea}>
// //         <View style={styles.loadingContainer}>
// //           <ActivityIndicator size="large" color="#FF6B6B" />
// //           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
// //         </View>
// //       </SafeAreaView>
// //     );
// //   }

// //   return (
// //     <SafeAreaView style={styles.safeArea}>
// //       <View style={styles.container}>
// //         {/* Header */}
// //         <View style={styles.header}>
// //           <View style={styles.toggleContainer}>
// //             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
// //               <Text style={styles.toggleText}>Regular</Text>
// //             </TouchableOpacity>
// //             <TouchableOpacity style={styles.toggleButton}>
// //               <Text style={styles.toggleText}>Prime</Text>
// //             </TouchableOpacity>
// //           </View>
// //           <TouchableOpacity style={styles.languageButton}>
// //             <Ionicons name="language" size={24} color="#FF6B6B" />
// //           </TouchableOpacity>
// //         </View>

// //         {/* Options */}
// //         <View style={styles.optionsContainer}>
// //           {options.map((option) => (
// //             <TouchableOpacity
// //               key={option}
// //               style={[styles.option, selectedOption === option && styles.selectedOption]}
// //               onPress={() => setSelectedOption(option)}
// //             >
// //               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
// //                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
// //               </Text>
// //             </TouchableOpacity>
// //           ))}
// //         </View>

// //         <View style={styles.contentContainer}>
// //           <ScrollView contentContainerStyle={styles.scrollContent}>
// //             {/* Profile Section */}
// //             {selectedProfile && (
// //               <View style={styles.profileContainer}>
// //                 <Image
// //                   source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
// //                   style={styles.profileImage}
// //                   resizeMode="cover"
// //                 />
// //                 <View style={styles.profileHeader}>
// //                   <View>
// //                     <Text style={styles.profileName}>
// //                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
// //                     </Text>
// //                     <Text style={styles.profileDetails}>
// //                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
// //                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
// //                     </Text>
// //                     <Text style={styles.profileDetails}>
// //                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
// //                     </Text>
// //                   </View>
// //                   <View style={styles.matchBadge}>
// //                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
// //                   </View>
// //                 </View>
// //                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

// //                 {/* Action Buttons */}
// //                 <View style={styles.actionButtons}>
// //                   <TouchableOpacity style={styles.actionButton}>
// //                     <MaterialIcons name="call" size={24} color="#4CAF50" />
// //                   </TouchableOpacity>
// //                   <TouchableOpacity style={styles.actionButton}>
// //                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
// //                   </TouchableOpacity>
// //                 </View>
// //               </View>
// //             )}

// //             {/* Information Sections */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getPersonalInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label} :</Text>
// //                     <View style={styles.infoValueContainer}>
// //                       <Text style={styles.infoValue}>{item.value}</Text>
// //                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
// //                     </View>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getFamilyInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
// //               <Text style={styles.aboutText}>
// //                 {selectedProfile?.aboutMe || 'No description available yet.'}
// //               </Text>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getLifestyleInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <View style={styles.sectionHeader}>
// //                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
// //                 <TouchableOpacity>
// //                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
// //                 </TouchableOpacity>
// //               </View>
// //               {loadingProfiles ? (
// //                 <View style={styles.loadingContainerSection}>
// //                   <ActivityIndicator size="small" color="#FF6B6B" />
// //                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
// //                 </View>
// //               ) : (
// //                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
// //                   {suggestedProfiles.map((profile) => (
// //                     <TouchableOpacity key={profile.id} style={styles.suggestedProfile}>
// //                       <Image
// //                         source={{ uri: profile.image }}
// //                         style={styles.suggestedImage}
// //                         resizeMode="cover"
// //                       />
// //                       <Text style={styles.suggestedName}>{profile.name}</Text>
// //                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
// //                     </TouchableOpacity>
// //                   ))}
// //                 </ScrollView>
// //               )}
// //             </View>
            
// //             {/* Spacer for bottom buttons */}
// //             <View style={{ height: 80 }} />
// //           </ScrollView>
// //         </View>

// //         {/* Fixed Bottom Action Buttons */}
// //         <View style={styles.bottomActions}>
// //           <TouchableOpacity style={styles.bottomButton}>
// //             <AntDesign name="close" size={20} color="#FF6B6B" />
// //             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
// //           </TouchableOpacity>
// //           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
// //             <Feather name="message-square" size={20} color="#fff" />
// //             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
// //           </TouchableOpacity>
// //         </View>
// //       </View>
// //     </SafeAreaView>
// //   );
// // }

// // const styles = StyleSheet.create({
// //   safeArea: {
// //     flex: 1,
// //     backgroundColor: '#fff',
// //   },
// //   container: {
// //     flex: 1,
// //     position: 'relative',
// //   },
// //   contentContainer: {
// //     flex: 1,
// //   },
// //   scrollContent: {
// //     paddingBottom: 80,
// //   },
// //   header: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   toggleContainer: {
// //     flexDirection: 'row',
// //     backgroundColor: '#f5f5f5',
// //     borderRadius: 20,
// //     padding: 2,
// //   },
// //   toggleButton: {
// //     paddingHorizontal: 15,
// //     paddingVertical: 8,
// //     borderRadius: 15,
// //   },
// //   activeToggle: {
// //     backgroundColor: '#fff',
// //     shadowColor: '#000',
// //     shadowOffset: { width: 0, height: 2 },
// //     shadowOpacity: 0.1,
// //     shadowRadius: 4,
// //     elevation: 2,
// //   },
// //   toggleText: {
// //     fontWeight: 'bold',
// //     color: '#555',
// //   },
// //   languageButton: {
// //     padding: 5,
// //   },
// //   optionsContainer: {
// //     flexDirection: 'row',
// //     paddingHorizontal: 15,
// //     marginBottom: 15,
// //   },
// //   option: {
// //     paddingHorizontal: 12,
// //     paddingVertical: 6,
// //     marginRight: 10,
// //     borderRadius: 15,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //   },
// //   selectedOption: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   optionText: {
// //     color: '#555',
// //     fontSize: 12,
// //   },
// //   selectedOptionText: {
// //     color: '#fff',
// //   },
// //   profileContainer: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   profileImage: {
// //     width: '100%',
// //     height: 300,
// //     borderRadius: 10,
// //     marginBottom: 15,
// //   },
// //   profileHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'flex-start',
// //     marginBottom: 10,
// //   },
// //   profileName: {
// //     fontSize: 20,
// //     fontWeight: 'bold',
// //     marginBottom: 5,
// //     color: '#333',
// //   },
// //   profileDetails: {
// //     color: '#666',
// //     marginBottom: 2,
// //     fontSize: 14,
// //   },
// //   matchBadge: {
// //     backgroundColor: '#FF6B6B',
// //     paddingHorizontal: 10,
// //     paddingVertical: 5,
// //     borderRadius: 15,
// //   },
// //   matchText: {
// //     color: '#fff',
// //     fontWeight: 'bold',
// //     fontSize: 12,
// //   },
// //   lastSeen: {
// //     color: '#4CAF50',
// //     marginBottom: 15,
// //     fontSize: 12,
// //   },
// //   actionButtons: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-around',
// //     marginVertical: 10,
// //   },
// //   actionButton: {
// //     padding: 10,
// //     borderRadius: 50,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     width: 60,
// //     alignItems: 'center',
// //     backgroundColor: '#f9f9f9',
// //   },
// //   bottomActions: {
// //     flexDirection: 'row',
// //     padding: 15,
// //     borderTopWidth: 1,
// //     borderTopColor: '#eee',
// //     backgroundColor: '#fff',
// //     position: 'absolute',
// //     bottom: 0,
// //     left: 0,
// //     right: 0,
// //     ...Platform.select({
// //       ios: {
// //         shadowColor: '#000',
// //         shadowOffset: { width: 0, height: -2 },
// //         shadowOpacity: 0.1,
// //         shadowRadius: 4,
// //       },
// //       android: {
// //         elevation: 10,
// //       },
// //     }),
// //   },
// //   bottomButton: {
// //     flex: 1,
// //     flexDirection: 'row',
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderRadius: 10,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     marginHorizontal: 5,
// //     backgroundColor: '#f9f9f9',
// //   },
// //   messageButton: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   bottomButtonText: {
// //     marginLeft: 5,
// //     fontWeight: '600',
// //   },
// //   messageButtonText: {
// //     color: '#fff',
// //   },
// //   section: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   sectionHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     marginBottom: 15,
// //   },
// //   sectionTitle: {
// //     fontSize: 18,
// //     fontWeight: 'bold',
// //     marginBottom: 15,
// //     color: '#333',
// //   },
// //   seeAll: {
// //     color: '#FF6B6B',
// //     fontWeight: '600',
// //   },
// //   infoList: {
// //     // Single column layout
// //   },
// //   infoListItem: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     marginBottom: 12,
// //     alignItems: 'center',
// //   },
// //   infoLabel: {
// //     color: '#666',
// //     fontSize: 14,
// //     fontWeight: '500',
// //     flex: 1,
// //   },
// //   infoValue: {
// //     fontWeight: '500',
// //     color: '#333',
// //     fontSize: 14,
// //     flex: 1,
// //     textAlign: 'right',
// //   },
// //   infoValueContainer: {
// //     flexDirection: 'row',
// //     alignItems: 'center',
// //     flex: 1,
// //     justifyContent: 'flex-end',
// //   },
// //   lockIcon: {
// //     marginLeft: 4,
// //   },
// //   aboutText: {
// //     lineHeight: 22,
// //     color: '#555',
// //   },
// //   suggestedProfiles: {
// //     marginBottom: 15,
// //   },
// //   suggestedProfile: {
// //     marginRight: 15,
// //     width: 120,
// //   },
// //   suggestedImage: {
// //     width: 120,
// //     height: 150,
// //     borderRadius: 10,
// //     marginBottom: 8,
// //   },
// //   suggestedName: {
// //     fontWeight: 'bold',
// //     fontSize: 14,
// //     color: '#333',
// //   },
// //   suggestedDetails: {
// //     color: '#666',
// //     fontSize: 12,
// //   },
// //   loadingContainer: {
// //     flex: 1,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //   },
// //   loadingContainerSection: {
// //     height: 150,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //   },
// //   loadingText: {
// //     marginTop: 10,
// //     color: '#666',
// //   },
// // });









// // //app/(tabs)/Matches.js

// // import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal } from 'react-native';
// // import React, { useState, useEffect } from 'react';
// // import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// // import { SafeAreaView } from 'react-native-safe-area-context';
// // import { useFirestore } from '../hooks/useFirebase';
// // import { collection, query, where, getDocs, limit, doc, getDoc } from 'firebase/firestore';
// // import { db } from '../../config/firebase';
// // import { useLanguage } from '../context/LanguageContext';

// // export default function Matches() {
// //   const [selectedOption, setSelectedOption] = useState('Newly Joined');
// //   const [selectedProfile, setSelectedProfile] = useState(null);
// //   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [loadingProfiles, setLoadingProfiles] = useState(true);
// //   const [showFullMobile, setShowFullMobile] = useState(false);
// //   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
// //   const [selectedGalleryImage, setSelectedGalleryImage] = useState(null);
// //   const { userData } = useFirestore();
// //   const { language } = useLanguage();

// //   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

// //   // Translations
// //   const translations = {
// //     newlyJoined: {
// //       ENG: "Newly Joined",
// //       HI: "नए जुड़े"
// //     },
// //     recentlyActive: {
// //       ENG: "Recently Active",
// //       HI: "हाल ही में सक्रिय"
// //     },
// //     mostViewed: {
// //       ENG: "Most Viewed",
// //       HI: "सबसे अधिक देखे गए"
// //     },
// //     personalInfo: {
// //       ENG: "Personal Information",
// //       HI: "व्यक्तिगत जानकारी"
// //     },
// //     contactInfo: {
// //       ENG: "Contact Information",
// //       HI: "संपर्क जानकारी"
// //     },
// //     familyInfo: {
// //       ENG: "Family Information",
// //       HI: "पारिवारिक जानकारी"
// //     },
// //     aboutMyself: {
// //       ENG: "About Myself",
// //       HI: "मेरे बारे में"
// //     },
// //     lifestyle: {
// //       ENG: "Lifestyle",
// //       HI: "जीवन शैली"
// //     },
// //     profilesYouMayLike: {
// //       ENG: "Profiles you may like",
// //       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
// //     },
// //     seeAll: {
// //       ENG: "See All",
// //       HI: "सभी देखें"
// //     },
// //     dontShow: {
// //       ENG: "Don't Show",
// //       HI: "दिखाएं नहीं"
// //     },
// //     sendMessage: {
// //       ENG: "Send Message",
// //       HI: "संदेश भेजें"
// //     },
// //     activeToday: {
// //       ENG: "Active today",
// //       HI: "आज सक्रिय"
// //     },
// //     match: {
// //       ENG: "match",
// //       HI: "मेल"
// //     },
// //     notUpdated: {
// //       ENG: "Not updated",
// //       HI: "अपडेट नहीं किया गया"
// //     },
// //     loading: {
// //       ENG: "Loading...",
// //       HI: "लोड हो रहा है..."
// //     },
// //     mobileNumber: {
// //       ENG: "Mobile Number",
// //       HI: "मोबाइल नंबर"
// //     },
// //     upgradeToView: {
// //       ENG: "Upgrade to view",
// //       HI: "देखने के लिए अपग्रेड करें"
// //     },
// //     viewGallery: {
// //       ENG: "View Gallery",
// //       HI: "गैलरी देखें"
// //     },
// //     close: {
// //       ENG: "Close",
// //       HI: "बंद करें"
// //     }
// //   };

// //   // Fetch a random profile from the opposite gender
// //   const fetchRandomProfile = async () => {
// //     if (!userData) return;
    
// //     try {
// //       setLoading(true);
// //       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
// //       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
// //       // Get all profiles
// //       const querySnapshot = await getDocs(profilesRef);
// //       const profiles = [];
      
// //       querySnapshot.forEach((doc) => {
// //         profiles.push({
// //           id: doc.id,
// //           ...doc.data()
// //         });
// //       });
      
// //       // Select a random profile
// //       if (profiles.length > 0) {
// //         const randomIndex = Math.floor(Math.random() * profiles.length);
// //         setSelectedProfile(profiles[randomIndex]);
// //       }
      
// //       // Fetch suggested profiles (limit to 4)
// //       const suggestedQuery = query(profilesRef, limit(4));
// //       const suggestedSnapshot = await getDocs(suggestedQuery);
// //       const suggested = [];
      
// //       suggestedSnapshot.forEach((doc) => {
// //         const profileData = doc.data();
// //         suggested.push({
// //           id: doc.id,
// //           name: profileData.firstName || 'User',
// //           age: profileData.age || calculateAge(profileData.dateOfBirth),
// //           height: profileData.height || "5'5\"",
// //           image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
// //           city: profileData.city || '',
// //           occupation: profileData.occupation || '',
// //           fullData: profileData // Store full data for when user clicks
// //         });
// //       });
      
// //       setSuggestedProfiles(suggested);
// //     } catch (error) {
// //       console.error('Error fetching profiles:', error);
// //     } finally {
// //       setLoading(false);
// //       setLoadingProfiles(false);
// //     }
// //   };

// //   // Fetch profile by ID when user clicks on suggested profile
// //   const fetchProfileById = async (profileId) => {
// //     if (!userData) return;
    
// //     try {
// //       setLoading(true);
// //       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
// //       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
// //       const profileSnapshot = await getDoc(profileDoc);
      
// //       if (profileSnapshot.exists()) {
// //         setSelectedProfile({
// //           id: profileSnapshot.id,
// //           ...profileSnapshot.data()
// //         });
// //       }
// //     } catch (error) {
// //       console.error('Error fetching profile:', error);
// //     } finally {
// //       setLoading(false);
// //     }
// //   };

// //   // Calculate age from date of birth
// //   const calculateAge = (dateOfBirth) => {
// //     if (!dateOfBirth) return 25;
// //     try {
// //       const [day, month, year] = dateOfBirth.split('/');
// //       const birthDate = new Date(`${year}-${month}-${day}`);
// //       const today = new Date();
// //       let age = today.getFullYear() - birthDate.getFullYear();
// //       const monthDiff = today.getMonth() - birthDate.getMonth();
      
// //       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
// //         age--;
// //       }
      
// //       return age;
// //     } catch (error) {
// //       return 25;
// //     }
// //   };

// //   // Format mobile number with hidden digits
// //   const formatMobileNumber = (mobileNumber) => {
// //     if (!mobileNumber) return 'Not available';
// //     if (showFullMobile) return mobileNumber;
    
// //     // Show first 2 digits and hide the rest with *
// //     if (mobileNumber.length > 2) {
// //       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
// //     }
// //     return mobileNumber;
// //   };

// //   // Format personal information data
// //   const getPersonalInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
// //       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
// //       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
// //       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
// //       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
// //       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state}` : translations.notUpdated[language] },
// //       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
// //       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
// //       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
// //       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
// //       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
// //       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
// //       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
// //       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
// //       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
// //       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
// //       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
// //       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
// //       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
// //     ];
// //   };

// //   // Format contact information data
// //   const getContactInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       {
// //         label: translations.mobileNumber[language],
// //         value: formatMobileNumber(selectedProfile.mobileNumber),
// //         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
// //         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
// //       },
// //       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
// //     ];
// //   };

// //   // Format family information data
// //   const getFamilyInfo = () => {
// //     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
// //     const familyInfo = selectedProfile.familyInfo;
// //     return [
// //       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
// //       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
// //       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
// //       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
// //       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
// //       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
// //     ];
// //   };

// //   // Format lifestyle information data
// //   const getLifestyleInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
// //       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
// //       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
// //       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
// //       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
// //       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
// //     ];
// //   };

// //   // Open gallery image
// //   const openGalleryImage = (imageUri) => {
// //     setSelectedGalleryImage(imageUri);
// //     setGalleryModalVisible(true);
// //   };

// //   useEffect(() => {
// //     fetchRandomProfile();
// //   }, [userData]);

// //   if (loading) {
// //     return (
// //       <SafeAreaView style={styles.safeArea}>
// //         <View style={styles.loadingContainer}>
// //           <ActivityIndicator size="large" color="#FF6B6B" />
// //           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
// //         </View>
// //       </SafeAreaView>
// //     );
// //   }

// //   return (
// //     <SafeAreaView style={styles.safeArea}>
// //       <View style={styles.container}>
// //         {/* Header */}
// //         <View style={styles.header}>
// //           <View style={styles.toggleContainer}>
// //             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
// //               <Text style={styles.toggleText}>Regular</Text>
// //             </TouchableOpacity>
// //             <TouchableOpacity style={styles.toggleButton}>
// //               <Text style={styles.toggleText}>Prime</Text>
// //             </TouchableOpacity>
// //           </View>
// //           <TouchableOpacity style={styles.languageButton}>
// //             <Ionicons name="language" size={24} color="#FF6B6B" />
// //           </TouchableOpacity>
// //         </View>

// //         {/* Options */}
// //         <View style={styles.optionsContainer}>
// //           {options.map((option) => (
// //             <TouchableOpacity
// //               key={option}
// //               style={[styles.option, selectedOption === option && styles.selectedOption]}
// //               onPress={() => setSelectedOption(option)}
// //             >
// //               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
// //                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
// //               </Text>
// //             </TouchableOpacity>
// //           ))}
// //         </View>

// //         <View style={styles.contentContainer}>
// //           <ScrollView contentContainerStyle={styles.scrollContent}>
// //             {/* Profile Section */}
// //             {selectedProfile && (
// //               <View style={styles.profileContainer}>
// //                 <TouchableOpacity onPress={() => openGalleryImage(selectedProfile.profilePhoto)}>
// //                   <Image
// //                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
// //                     style={styles.profileImage}
// //                     resizeMode="cover"
// //                   />
// //                 </TouchableOpacity>
                
// //                 {/* Gallery Photos */}
// //                 {selectedProfile.galleryPhotos && selectedProfile.galleryPhotos.length > 0 && (
// //                   <View style={styles.gallerySection}>
// //                     <Text style={styles.galleryTitle}>{translations.viewGallery[language]}</Text>
// //                     <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.galleryContainer}>
// //                       {selectedProfile.galleryPhotos.map((photo, index) => (
// //                         <TouchableOpacity key={index} onPress={() => openGalleryImage(photo)}>
// //                           <Image
// //                             source={{ uri: photo }}
// //                             style={styles.galleryImage}
// //                             resizeMode="cover"
// //                           />
// //                         </TouchableOpacity>
// //                       ))}
// //                     </ScrollView>
// //                   </View>
// //                 )}

// //                 <View style={styles.profileHeader}>
// //                   <View>
// //                     <Text style={styles.profileName}>
// //                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
// //                     </Text>
// //                     <Text style={styles.profileDetails}>
// //                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
// //                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
// //                     </Text>
// //                     <Text style={styles.profileDetails}>
// //                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
// //                     </Text>
// //                   </View>
// //                   <View style={styles.matchBadge}>
// //                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
// //                   </View>
// //                 </View>
// //                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

// //                 {/* Action Buttons */}
// //                 <View style={styles.actionButtons}>
// //                   <TouchableOpacity style={styles.actionButton}>
// //                     <MaterialIcons name="call" size={24} color="#4CAF50" />
// //                   </TouchableOpacity>
// //                   <TouchableOpacity style={styles.actionButton}>
// //                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
// //                   </TouchableOpacity>
// //                 </View>
// //               </View>
// //             )}

// //             {/* Information Sections */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getPersonalInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label} :</Text>
// //                     <View style={styles.infoValueContainer}>
// //                       <Text style={styles.infoValue}>{item.value}</Text>
// //                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
// //                     </View>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             {/* Contact Information Section */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getContactInfo().map((item, index) => (
// //                   <TouchableOpacity
// //                     key={index}
// //                     style={styles.infoListItem}
// //                     onPress={item.onPress}
// //                     disabled={!item.onPress}
// //                   >
// //                     <Text style={styles.infoLabel}>{item.label} :</Text>
// //                     <View style={styles.infoValueContainer}>
// //                       <Text style={styles.infoValue}>{item.value}</Text>
// //                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
// //                     </View>
// //                   </TouchableOpacity>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getFamilyInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
// //               <Text style={styles.aboutText}>
// //                 {selectedProfile?.aboutMe || 'No description available yet.'}
// //               </Text>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getLifestyleInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <View style={styles.sectionHeader}>
// //                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
// //                 <TouchableOpacity>
// //                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
// //                 </TouchableOpacity>
// //               </View>
// //               {loadingProfiles ? (
// //                 <View style={styles.loadingContainerSection}>
// //                   <ActivityIndicator size="small" color="#FF6B6B" />
// //                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
// //                 </View>
// //               ) : (
// //                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
// //                   {suggestedProfiles.map((profile) => (
// //                     <TouchableOpacity
// //                       key={profile.id}
// //                       style={styles.suggestedProfile}
// //                       onPress={() => fetchProfileById(profile.id)}
// //                     >
// //                       <Image
// //                         source={{ uri: profile.image }}
// //                         style={styles.suggestedImage}
// //                         resizeMode="cover"
// //                       />
// //                       <Text style={styles.suggestedName}>{profile.name}</Text>
// //                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
// //                     </TouchableOpacity>
// //                   ))}
// //                 </ScrollView>
// //               )}
// //             </View>
            
// //             {/* Spacer for bottom buttons */}
// //             <View style={{ height: 80 }} />
// //           </ScrollView>
// //         </View>

// //         {/* Fixed Bottom Action Buttons */}
// //         <View style={styles.bottomActions}>
// //           <TouchableOpacity style={styles.bottomButton}>
// //             <AntDesign name="close" size={20} color="#FF6B6B" />
// //             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
// //           </TouchableOpacity>
// //           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
// //             <Feather name="message-square" size={20} color="#fff" />
// //             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
// //           </TouchableOpacity>
// //         </View>
// //       </View>

// //       {/* Gallery Modal */}
// //       <Modal
// //         visible={galleryModalVisible}
// //         transparent={true}
// //         animationType="fade"
// //         onRequestClose={() => setGalleryModalVisible(false)}
// //       >
// //         <View style={styles.modalContainer}>
// //           <TouchableOpacity
// //             style={styles.modalBackground}
// //             onPress={() => setGalleryModalVisible(false)}
// //           />
// //           <View style={styles.modalContent}>
// //             <Image
// //               source={{ uri: selectedGalleryImage }}
// //               style={styles.modalImage}
// //               resizeMode="contain"
// //             />
// //             <TouchableOpacity
// //               style={styles.closeButton}
// //               onPress={() => setGalleryModalVisible(false)}
// //             >
// //               <Entypo name="cross" size={24} color="#fff" />
// //             </TouchableOpacity>
// //           </View>
// //         </View>
// //       </Modal>
// //     </SafeAreaView>
// //   );
// // }

// // const styles = StyleSheet.create({
// //   safeArea: {
// //     flex: 1,
// //     backgroundColor: '#fff',
// //   },
// //   container: {
// //     flex: 1,
// //     position: 'relative',
// //   },
// //   contentContainer: {
// //     flex: 1,
// //   },
// //   scrollContent: {
// //     paddingBottom: 80,
// //   },
// //   header: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   toggleContainer: {
// //     flexDirection: 'row',
// //     backgroundColor: '#f5f5f5',
// //     borderRadius: 20,
// //     padding: 2,
// //   },
// //   toggleButton: {
// //     paddingHorizontal: 15,
// //     paddingVertical: 8,
// //     borderRadius: 15,
// //   },
// //   activeToggle: {
// //     backgroundColor: '#fff',
// //     shadowColor: '#000',
// //     shadowOffset: { width: 0, height: 2 },
// //     shadowOpacity: 0.1,
// //     shadowRadius: 4,
// //     elevation: 2,
// //   },
// //   toggleText: {
// //     fontWeight: 'bold',
// //     color: '#555',
// //   },
// //   languageButton: {
// //     padding: 5,
// //   },
// //   optionsContainer: {
// //     flexDirection: 'row',
// //     paddingHorizontal: 15,
// //     marginBottom: 15,
// //   },
// //   option: {
// //     paddingHorizontal: 12,
// //     paddingVertical: 6,
// //     marginRight: 10,
// //     borderRadius: 15,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //   },
// //   selectedOption: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   optionText: {
// //     color: '#555',
// //     fontSize: 12,
// //   },
// //   selectedOptionText: {
// //     color: '#fff',
// //   },
// //   profileContainer: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   profileImage: {
// //     width: '100%',
// //     height: 300,
// //     borderRadius: 10,
// //     marginBottom: 15,
// //   },
// //   gallerySection: {
// //     marginBottom: 15,
// //   },
// //   galleryTitle: {
// //     fontSize: 16,
// //     fontWeight: '600',
// //     color: '#FF6B6B',
// //     marginBottom: 10,
// //   },
// //   galleryContainer: {
// //     marginBottom: 10,
// //   },
// //   galleryImage: {
// //     width: 80,
// //     height: 80,
// //     borderRadius: 8,
// //     marginRight: 10,
// //   },
// //   profileHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'flex-start',
// //     marginBottom: 10,
// //   },
// //   profileName: {
// //     fontSize: 20,
// //     fontWeight: 'bold',
// //     marginBottom: 5,
// //     color: '#333',
// //   },
// //   profileDetails: {
// //     color: '#666',
// //     marginBottom: 2,
// //     fontSize: 14,
// //   },
// //   matchBadge: {
// //     backgroundColor: '#FF6B6B',
// //     paddingHorizontal: 10,
// //     paddingVertical: 5,
// //     borderRadius: 15,
// //   },
// //   matchText: {
// //     color: '#fff',
// //     fontWeight: 'bold',
// //     fontSize: 12,
// //   },
// //   lastSeen: {
// //     color: '#4CAF50',
// //     marginBottom: 15,
// //     fontSize: 12,
// //   },
// //   actionButtons: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-around',
// //     marginVertical: 10,
// //   },
// //   actionButton: {
// //     padding: 10,
// //     borderRadius: 50,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     width: 60,
// //     alignItems: 'center',
// //     backgroundColor: '#f9f9f9',
// //   },
// //   bottomActions: {
// //     flexDirection: 'row',
// //     padding: 15,
// //     borderTopWidth: 1,
// //     borderTopColor: '#eee',
// //     backgroundColor: '#fff',
// //     position: 'absolute',
// //     bottom: 0,
// //     left: 0,
// //     right: 0,
// //     ...Platform.select({
// //       ios: {
// //         shadowColor: '#000',
// //         shadowOffset: { width: 0, height: -2 },
// //         shadowOpacity: 0.1,
// //         shadowRadius: 4,
// //       },
// //       android: {
// //         elevation: 10,
// //       },
// //     }),
// //   },
// //   bottomButton: {
// //     flex: 1,
// //     flexDirection: 'row',
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderRadius: 10,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     marginHorizontal: 5,
// //     backgroundColor: '#f9f9f9',
// //   },
// //   messageButton: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   bottomButtonText: {
// //     marginLeft: 5,
// //     fontWeight: '600',
// //   },
// //   messageButtonText: {
// //     color: '#fff',
// //   },
// //   section: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   sectionHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     marginBottom: 15,
// //   },
// //   sectionTitle: {
// //     fontSize: 18,
// //     fontWeight: 'bold',
// //     marginBottom: 15,
// //     color: '#333',
// //   },
// //   seeAll: {
// //     color: '#FF6B6B',
// //     fontWeight: '600',
// //   },
// //   infoList: {
// //     // Single column layout
// //   },
// //   infoListItem: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     marginBottom: 12,
// //     alignItems: 'center',
// //   },
// //   infoLabel: {
// //     color: '#666',
// //     fontSize: 14,
// //     fontWeight: '500',
// //     flex: 1,
// //   },
// //   infoValue: {
// //     fontWeight: '500',
// //     color: '#333',
// //     fontSize: 14,
// //     flex: 1,
// //     textAlign: 'right',
// //   },
// //   infoValueContainer: {
// //     flexDirection: 'row',
// //     alignItems: 'center',
// //     flex: 1,
// //     justifyContent: 'flex-end',
// //   },
// //   lockIcon: {
// //     marginLeft: 4,
// //   },
// //   aboutText: {
// //     lineHeight: 22,
// //     color: '#555',
// //   },
// //   suggestedProfiles: {
// //     marginBottom: 15,
// //   },
// //   suggestedProfile: {
// //     marginRight: 15,
// //     width: 120,
// //   },
// //   suggestedImage: {
// //     width: 120,
// //     height: 150,
// //     borderRadius: 10,
// //     marginBottom: 8,
// //   },
// //   suggestedName: {
// //     fontWeight: 'bold',
// //     fontSize: 14,
// //     color: '#333',
// //   },
// //   suggestedDetails: {
// //     color: '#666',
// //     fontSize: 12,
// //   },
// //   loadingContainer: {
// //     flex: 1,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //   },
// //   loadingContainerSection: {
// //     height: 150,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //   },
// //   loadingText: {
// //     marginTop: 10,
// //     color: '#666',
// //   },
// //   modalContainer: {
// //     flex: 1,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     backgroundColor: 'rgba(0, 0, 0, 0.9)',
// //   },
// //   modalBackground: {
// //     position: 'absolute',
// //     top: 0,
// //     left: 0,
// //     right: 0,
// //     bottom: 0,
// //   },
// //   modalContent: {
// //     width: '90%',
// //     height: '80%',
// //     position: 'relative',
// //   },
// //   modalImage: {
// //     width: '100%',
// //     height: '100%',
// //     borderRadius: 10,
// //   },
// //   closeButton: {
// //     position: 'absolute',
// //     top: 20,
// //     right: 20,
// //     backgroundColor: 'rgba(0, 0, 0, 0.5)',
// //     borderRadius: 20,
// //     padding: 8,
// //   },
// // });








// //app/(tabs)/Matches.js

// // import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal } from 'react-native';
// // import React, { useState, useEffect } from 'react';
// // import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// // import { SafeAreaView } from 'react-native-safe-area-context';
// // import { useFirestore } from '../hooks/useFirebase';
// // import { collection, query, where, getDocs, limit, doc, getDoc } from 'firebase/firestore';
// // import { db } from '../../config/firebase';
// // import { useLanguage } from '../context/LanguageContext';

// // export default function Matches() {
// //   const [selectedOption, setSelectedOption] = useState('Newly Joined');
// //   const [selectedProfile, setSelectedProfile] = useState(null);
// //   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [loadingProfiles, setLoadingProfiles] = useState(true);
// //   const [showFullMobile, setShowFullMobile] = useState(false);
// //   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
// //   const [selectedGalleryImage, setSelectedGalleryImage] = useState(null);
// //   const { userData } = useFirestore();
// //   const { language } = useLanguage();

// //   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

// //   // Translations
// //   const translations = {
// //     newlyJoined: {
// //       ENG: "Newly Joined",
// //       HI: "नए जुड़े"
// //     },
// //     recentlyActive: {
// //       ENG: "Recently Active",
// //       HI: "हाल ही में सक्रिय"
// //     },
// //     mostViewed: {
// //       ENG: "Most Viewed",
// //       HI: "सबसे अधिक देखे गए"
// //     },
// //     personalInfo: {
// //       ENG: "Personal Information",
// //       HI: "व्यक्तिगत जानकारी"
// //     },
// //     contactInfo: {
// //       ENG: "Contact Information",
// //       HI: "संपर्क जानकारी"
// //     },
// //     familyInfo: {
// //       ENG: "Family Information",
// //       HI: "पारिवारिक जानकारी"
// //     },
// //     aboutMyself: {
// //       ENG: "About Myself",
// //       HI: "मेरे बारे में"
// //     },
// //     lifestyle: {
// //       ENG: "Lifestyle",
// //       HI: "जीवन शैली"
// //     },
// //     profilesYouMayLike: {
// //       ENG: "Profiles you may like",
// //       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
// //     },
// //     seeAll: {
// //       ENG: "See All",
// //       HI: "सभी देखें"
// //     },
// //     dontShow: {
// //       ENG: "Don't Show",
// //       HI: "दिखाएं नहीं"
// //     },
// //     sendMessage: {
// //       ENG: "Send Message",
// //       HI: "संदेश भेजें"
// //     },
// //     activeToday: {
// //       ENG: "Active today",
// //       HI: "आज सक्रिय"
// //     },
// //     match: {
// //       ENG: "match",
// //       HI: "मेल"
// //     },
// //     notUpdated: {
// //       ENG: "Not updated",
// //       HI: "अपडेट नहीं किया गया"
// //     },
// //     loading: {
// //       ENG: "Loading...",
// //       HI: "लोड हो रहा है..."
// //     },
// //     mobileNumber: {
// //       ENG: "Mobile Number",
// //       HI: "मोबाइल नंबर"
// //     },
// //     upgradeToView: {
// //       ENG: "Upgrade to view",
// //       HI: "देखने के लिए अपग्रेड करें"
// //     },
// //     viewGallery: {
// //       ENG: "View Gallery",
// //       HI: "गैलरी देखें"
// //     },
// //     close: {
// //       ENG: "Close",
// //       HI: "बंद करें"
// //     }
// //   };

// //   // Fetch a random profile from the opposite gender
// //   const fetchRandomProfile = async () => {
// //     if (!userData) return;
    
// //     try {
// //       setLoading(true);
// //       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
// //       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
// //       // Get all profiles
// //       const querySnapshot = await getDocs(profilesRef);
// //       const profiles = [];
      
// //       querySnapshot.forEach((doc) => {
// //         profiles.push({
// //           id: doc.id,
// //           ...doc.data()
// //         });
// //       });
      
// //       // Select a random profile
// //       if (profiles.length > 0) {
// //         const randomIndex = Math.floor(Math.random() * profiles.length);
// //         setSelectedProfile(profiles[randomIndex]);
// //       }
      
// //       // Fetch suggested profiles (limit to 4)
// //       const suggestedQuery = query(profilesRef, limit(4));
// //       const suggestedSnapshot = await getDocs(suggestedQuery);
// //       const suggested = [];
      
// //       suggestedSnapshot.forEach((doc) => {
// //         const profileData = doc.data();
// //         suggested.push({
// //           id: doc.id,
// //           name: profileData.firstName || 'User',
// //           age: profileData.age || calculateAge(profileData.dateOfBirth),
// //           height: profileData.height || "5'5\"",
// //           image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
// //           city: profileData.city || '',
// //           occupation: profileData.occupation || '',
// //           fullData: profileData // Store full data for when user clicks
// //         });
// //       });
      
// //       setSuggestedProfiles(suggested);
// //     } catch (error) {
// //       console.error('Error fetching profiles:', error);
// //     } finally {
// //       setLoading(false);
// //       setLoadingProfiles(false);
// //     }
// //   };

// //   // Fetch profile by ID when user clicks on suggested profile
// //   const fetchProfileById = async (profileId) => {
// //     if (!userData) return;
    
// //     try {
// //       setLoading(true);
// //       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
// //       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
// //       const profileSnapshot = await getDoc(profileDoc);
      
// //       if (profileSnapshot.exists()) {
// //         setSelectedProfile({
// //           id: profileSnapshot.id,
// //           ...profileSnapshot.data()
// //         });
// //       }
// //     } catch (error) {
// //       console.error('Error fetching profile:', error);
// //     } finally {
// //       setLoading(false);
// //     }
// //   };

// //   // Calculate age from date of birth
// //   const calculateAge = (dateOfBirth) => {
// //     if (!dateOfBirth) return 25;
// //     try {
// //       const [day, month, year] = dateOfBirth.split('/');
// //       const birthDate = new Date(`${year}-${month}-${day}`);
// //       const today = new Date();
// //       let age = today.getFullYear() - birthDate.getFullYear();
// //       const monthDiff = today.getMonth() - birthDate.getMonth();
      
// //       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
// //         age--;
// //       }
      
// //       return age;
// //     } catch (error) {
// //       return 25;
// //     }
// //   };

// //   // Format mobile number with hidden digits
// //   const formatMobileNumber = (mobileNumber) => {
// //     if (!mobileNumber) return 'Not available';
// //     if (showFullMobile) return mobileNumber;
    
// //     // Show first 2 digits and hide the rest with *
// //     if (mobileNumber.length > 2) {
// //       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
// //     }
// //     return mobileNumber;
// //   };

// //   // Format personal information data
// //   const getPersonalInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
// //       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
// //       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
// //       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
// //       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
// //       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state}` : translations.notUpdated[language] },
// //       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
// //       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
// //       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
// //       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
// //       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
// //       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
// //       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
// //       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
// //       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
// //       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
// //       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
// //       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
// //       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
// //     ];
// //   };

// //   // Format contact information data
// //   const getContactInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       {
// //         label: translations.mobileNumber[language],
// //         value: formatMobileNumber(selectedProfile.mobileNumber),
// //         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
// //         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
// //       },
// //       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
// //     ];
// //   };

// //   // Format family information data
// //   const getFamilyInfo = () => {
// //     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
// //     const familyInfo = selectedProfile.familyInfo;
// //     return [
// //       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
// //       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
// //       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
// //       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
// //       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
// //       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
// //     ];
// //   };

// //   // Format lifestyle information data
// //   const getLifestyleInfo = () => {
// //     if (!selectedProfile) return [];
    
// //     return [
// //       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
// //       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
// //       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
// //       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
// //       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
// //       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
// //     ];
// //   };

// //   // Open gallery image
// //   const openGalleryImage = (imageUri) => {
// //     setSelectedGalleryImage(imageUri);
// //     setGalleryModalVisible(true);
// //   };

// //   useEffect(() => {
// //     fetchRandomProfile();
// //   }, [userData]);

// //   if (loading) {
// //     return (
// //       <SafeAreaView style={styles.safeArea}>
// //         <View style={styles.loadingContainer}>
// //           <ActivityIndicator size="large" color="#FF6B6B" />
// //           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
// //         </View>
// //       </SafeAreaView>
// //     );
// //   }

// //   return (
// //     <SafeAreaView style={styles.safeArea}>
// //       <View style={styles.container}>
// //         {/* Header */}
// //         <View style={styles.header}>
// //           <View style={styles.toggleContainer}>
// //             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
// //               <Text style={styles.toggleText}>Regular</Text>
// //             </TouchableOpacity>
// //             <TouchableOpacity style={styles.toggleButton}>
// //               <Text style={styles.toggleText}>Prime</Text>
// //             </TouchableOpacity>
// //           </View>
// //           <TouchableOpacity style={styles.languageButton}>
// //             <Ionicons name="language" size={24} color="#FF6B6B" />
// //           </TouchableOpacity>
// //         </View>

// //         {/* Options */}
// //         <View style={styles.optionsContainer}>
// //           {options.map((option) => (
// //             <TouchableOpacity
// //               key={option}
// //               style={[styles.option, selectedOption === option && styles.selectedOption]}
// //               onPress={() => setSelectedOption(option)}
// //             >
// //               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
// //                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
// //               </Text>
// //             </TouchableOpacity>
// //           ))}
// //         </View>

// //         <View style={styles.contentContainer}>
// //           <ScrollView contentContainerStyle={styles.scrollContent}>
// //             {/* Profile Section */}
// //             {selectedProfile && (
// //               <View style={styles.profileContainer}>
// //                 <TouchableOpacity onPress={() => openGalleryImage(selectedProfile.profilePhoto)}>
// //                   <Image
// //                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
// //                     style={styles.profileImage}
// //                     resizeMode="cover"
// //                   />
// //                 </TouchableOpacity>
                
// //                 {/* Gallery Photos - Displayed directly without "View Gallery" text */}
// //                 {selectedProfile.galleryPhotos && selectedProfile.galleryPhotos.length > 0 && (
// //                   <View style={styles.gallerySection}>
// //                     <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.galleryContainer}>
// //                       {selectedProfile.galleryPhotos.map((photo, index) => (
// //                         <TouchableOpacity key={index} onPress={() => openGalleryImage(photo)}>
// //                           <Image
// //                             source={{ uri: photo }}
// //                             style={styles.galleryImage}
// //                             resizeMode="cover"
// //                           />
// //                         </TouchableOpacity>
// //                       ))}
// //                     </ScrollView>
// //                   </View>
// //                 )}

// //                 <View style={styles.profileHeader}>
// //                   <View>
// //                     <Text style={styles.profileName}>
// //                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
// //                     </Text>
// //                     <Text style={styles.profileDetails}>
// //                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
// //                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
// //                     </Text>
// //                     <Text style={styles.profileDetails}>
// //                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
// //                     </Text>
// //                   </View>
// //                   <View style={styles.matchBadge}>
// //                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
// //                   </View>
// //                 </View>
// //                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

// //                 {/* Action Buttons */}
// //                 <View style={styles.actionButtons}>
// //                   <TouchableOpacity style={styles.actionButton}>
// //                     <MaterialIcons name="call" size={24} color="#4CAF50" />
// //                   </TouchableOpacity>
// //                   <TouchableOpacity style={styles.actionButton}>
// //                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
// //                   </TouchableOpacity>
// //                 </View>
// //               </View>
// //             )}

// //             {/* Information Sections */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getPersonalInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label} :</Text>
// //                     <View style={styles.infoValueContainer}>
// //                       <Text style={styles.infoValue}>{item.value}</Text>
// //                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
// //                     </View>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             {/* Contact Information Section */}
// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getContactInfo().map((item, index) => (
// //                   <TouchableOpacity
// //                     key={index}
// //                     style={styles.infoListItem}
// //                     onPress={item.onPress}
// //                     disabled={!item.onPress}
// //                   >
// //                     <Text style={styles.infoLabel}>{item.label} :</Text>
// //                     <View style={styles.infoValueContainer}>
// //                       <Text style={styles.infoValue}>{item.value}</Text>
// //                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
// //                     </View>
// //                   </TouchableOpacity>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getFamilyInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
// //               <Text style={styles.aboutText}>
// //                 {selectedProfile?.aboutMe || 'No description available yet.'}
// //               </Text>
// //             </View>

// //             <View style={styles.section}>
// //               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
// //               <View style={styles.infoList}>
// //                 {getLifestyleInfo().map((item, index) => (
// //                   <View key={index} style={styles.infoListItem}>
// //                     <Text style={styles.infoLabel}>{item.label}:</Text>
// //                     <Text style={styles.infoValue}>{item.value}</Text>
// //                   </View>
// //                 ))}
// //               </View>
// //             </View>

// //             <View style={styles.section}>
// //               <View style={styles.sectionHeader}>
// //                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
// //                 <TouchableOpacity>
// //                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
// //                 </TouchableOpacity>
// //               </View>
// //               {loadingProfiles ? (
// //                 <View style={styles.loadingContainerSection}>
// //                   <ActivityIndicator size="small" color="#FF6B6B" />
// //                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
// //                 </View>
// //               ) : (
// //                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
// //                   {suggestedProfiles.map((profile) => (
// //                     <TouchableOpacity
// //                       key={profile.id}
// //                       style={styles.suggestedProfile}
// //                       onPress={() => fetchProfileById(profile.id)}
// //                     >
// //                       <Image
// //                         source={{ uri: profile.image }}
// //                         style={styles.suggestedImage}
// //                         resizeMode="cover"
// //                       />
// //                       <Text style={styles.suggestedName}>{profile.name}</Text>
// //                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
// //                     </TouchableOpacity>
// //                   ))}
// //                 </ScrollView>
// //               )}
// //             </View>
            
// //             {/* Spacer for bottom buttons */}
// //             <View style={{ height: 80 }} />
// //           </ScrollView>
// //         </View>

// //         {/* Fixed Bottom Action Buttons */}
// //         <View style={styles.bottomActions}>
// //           <TouchableOpacity style={styles.bottomButton}>
// //             <AntDesign name="close" size={20} color="#FF6B6B" />
// //             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
// //           </TouchableOpacity>
// //           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
// //             <Feather name="message-square" size={20} color="#fff" />
// //             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
// //           </TouchableOpacity>
// //         </View>
// //       </View>

// //       {/* Gallery Modal */}
// //       <Modal
// //         visible={galleryModalVisible}
// //         transparent={true}
// //         animationType="fade"
// //         onRequestClose={() => setGalleryModalVisible(false)}
// //       >
// //         <View style={styles.modalContainer}>
// //           <TouchableOpacity
// //             style={styles.modalBackground}
// //             onPress={() => setGalleryModalVisible(false)}
// //           />
// //           <View style={styles.modalContent}>
// //             <Image
// //               source={{ uri: selectedGalleryImage }}
// //               style={styles.modalImage}
// //               resizeMode="contain"
// //             />
// //             <TouchableOpacity
// //               style={styles.closeButton}
// //               onPress={() => setGalleryModalVisible(false)}
// //             >
// //               <Entypo name="cross" size={24} color="#fff" />
// //             </TouchableOpacity>
// //           </View>
// //         </View>
// //       </Modal>
// //     </SafeAreaView>
// //   );
// // }

// // const styles = StyleSheet.create({
// //   safeArea: {
// //     flex: 1,
// //     backgroundColor: '#fff',
// //   },
// //   container: {
// //     flex: 1,
// //     position: 'relative',
// //   },
// //   contentContainer: {
// //     flex: 1,
// //   },
// //   scrollContent: {
// //     paddingBottom: 80,
// //   },
// //   header: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   toggleContainer: {
// //     flexDirection: 'row',
// //     backgroundColor: '#f5f5f5',
// //     borderRadius: 20,
// //     padding: 2,
// //   },
// //   toggleButton: {
// //     paddingHorizontal: 15,
// //     paddingVertical: 8,
// //     borderRadius: 15,
// //   },
// //   activeToggle: {
// //     backgroundColor: '#fff',
// //     shadowColor: '#000',
// //     shadowOffset: { width: 0, height: 2 },
// //     shadowOpacity: 0.1,
// //     shadowRadius: 4,
// //     elevation: 2,
// //   },
// //   toggleText: {
// //     fontWeight: 'bold',
// //     color: '#555',
// //   },
// //   languageButton: {
// //     padding: 5,
// //   },
// //   optionsContainer: {
// //     flexDirection: 'row',
// //     paddingHorizontal: 15,
// //     marginBottom: 15,
// //   },
// //   option: {
// //     paddingHorizontal: 12,
// //     paddingVertical: 6,
// //     marginRight: 10,
// //     borderRadius: 15,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //   },
// //   selectedOption: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   optionText: {
// //     color: '#555',
// //     fontSize: 12,
// //   },
// //   selectedOptionText: {
// //     color: '#fff',
// //   },
// //   profileContainer: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   profileImage: {
// //     width: '100%',
// //     height: 300,
// //     borderRadius: 10,
// //     marginBottom: 15,
// //   },
// //   gallerySection: {
// //     marginBottom: 15,
// //   },
// //   galleryContainer: {
// //     marginBottom: 10,
// //   },
// //   galleryImage: {
// //     width: 80,
// //     height: 80,
// //     borderRadius: 8,
// //     marginRight: 10,
// //   },
// //   profileHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'flex-start',
// //     marginBottom: 10,
// //   },
// //   profileName: {
// //     fontSize: 20,
// //     fontWeight: 'bold',
// //     marginBottom: 5,
// //     color: '#333',
// //   },
// //   profileDetails: {
// //     color: '#666',
// //     marginBottom: 2,
// //     fontSize: 14,
// //   },
// //   matchBadge: {
// //     backgroundColor: '#FF6B6B',
// //     paddingHorizontal: 10,
// //     paddingVertical: 5,
// //     borderRadius: 15,
// //   },
// //   matchText: {
// //     color: '#fff',
// //     fontWeight: 'bold',
// //     fontSize: 12,
// //   },
// //   lastSeen: {
// //     color: '#4CAF50',
// //     marginBottom: 15,
// //     fontSize: 12,
// //   },
// //   actionButtons: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-around',
// //     marginVertical: 10,
// //   },
// //   actionButton: {
// //     padding: 10,
// //     borderRadius: 50,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     width: 60,
// //     alignItems: 'center',
// //     backgroundColor: '#f9f9f9',
// //   },
// //   bottomActions: {
// //     flexDirection: 'row',
// //     padding: 15,
// //     borderTopWidth: 1,
// //     borderTopColor: '#eee',
// //     backgroundColor: '#fff',
// //     position: 'absolute',
// //     bottom: 0,
// //     left: 0,
// //     right: 0,
// //     ...Platform.select({
// //       ios: {
// //         shadowColor: '#000',
// //         shadowOffset: { width: 0, height: -2 },
// //         shadowOpacity: 0.1,
// //         shadowRadius: 4,
// //       },
// //       android: {
// //         elevation: 10,
// //       },
// //     }),
// //   },
// //   bottomButton: {
// //     flex: 1,
// //     flexDirection: 'row',
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     padding: 15,
// //     borderRadius: 10,
// //     borderWidth: 1,
// //     borderColor: '#eee',
// //     marginHorizontal: 5,
// //     backgroundColor: '#f9f9f9',
// //   },
// //   messageButton: {
// //     backgroundColor: '#FF6B6B',
// //     borderColor: '#FF6B6B',
// //   },
// //   bottomButtonText: {
// //     marginLeft: 5,
// //     fontWeight: '600',
// //   },
// //   messageButtonText: {
// //     color: '#fff',
// //   },
// //   section: {
// //     padding: 15,
// //     borderBottomWidth: 1,
// //     borderBottomColor: '#eee',
// //   },
// //   sectionHeader: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     alignItems: 'center',
// //     marginBottom: 15,
// //   },
// //   sectionTitle: {
// //     fontSize: 18,
// //     fontWeight: 'bold',
// //     marginBottom: 15,
// //     color: '#333',
// //   },
// //   seeAll: {
// //     color: '#FF6B6B',
// //     fontWeight: '600',
// //   },
// //   infoList: {
// //     // Single column layout
// //   },
// //   infoListItem: {
// //     flexDirection: 'row',
// //     justifyContent: 'space-between',
// //     marginBottom: 12,
// //     alignItems: 'center',
// //   },
// //   infoLabel: {
// //     color: '#666',
// //     fontSize: 14,
// //     fontWeight: '500',
// //     flex: 1,
// //   },
// //   infoValue: {
// //     fontWeight: '500',
// //     color: '#333',
// //     fontSize: 14,
// //     flex: 1,
// //     textAlign: 'right',
// //   },
// //   infoValueContainer: {
// //     flexDirection: 'row',
// //     alignItems: 'center',
// //     flex: 1,
// //     justifyContent: 'flex-end',
// //   },
// //   lockIcon: {
// //     marginLeft: 4,
// //   },
// //   aboutText: {
// //     lineHeight: 22,
// //     color: '#555',
// //   },
// //   suggestedProfiles: {
// //     marginBottom: 15,
// //   },
// //   suggestedProfile: {
// //     marginRight: 15,
// //     width: 120,
// //   },
// //   suggestedImage: {
// //     width: 120,
// //     height: 150,
// //     borderRadius: 10,
// //     marginBottom: 8,
// //   },
// //   suggestedName: {
// //     fontWeight: 'bold',
// //     fontSize: 14,
// //     color: '#333',
// //   },
// //   suggestedDetails: {
// //     color: '#666',
// //     fontSize: 12,
// //   },
// //   loadingContainer: {
// //     flex: 1,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //   },
// //   loadingContainerSection: {
// //     height: 150,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //   },
// //   loadingText: {
// //     marginTop: 10,
// //     color: '#666',
// //   },
// //   modalContainer: {
// //     flex: 1,
// //     justifyContent: 'center',
// //     alignItems: 'center',
// //     backgroundColor: 'rgba(0, 0, 0, 0.9)',
// //   },
// //   modalBackground: {
// //     position: 'absolute',
// //     top: 0,
// //     left: 0,
// //     right: 0,
// //     bottom: 0,
// //   },
// //   modalContent: {
// //     width: '90%',
// //     height: '80%',
// //     position: 'relative',
// //   },
// //   modalImage: {
// //     width: '100%',
// //     height: '100%',
// //     borderRadius: 10,
// //   },
// //   closeButton: {
// //     position: 'absolute',
// //     top: 20,
// //     right: 20,
// //     backgroundColor: 'rgba(0, 0, 0, 0.5)',
// //     borderRadius: 20,
// //     padding: 8,
// //   },
// // });











// // //app/(tabs)/Matches.js
// //app/(tabs)/Matches.js

// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions } from 'react-native';
// import React, { useState, useEffect } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { useFirestore } from '../hooks/useFirebase';
// import { collection, query, where, getDocs, limit, doc, getDoc } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const { userData } = useFirestore();
//   const { language } = useLanguage();

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show",
//       HI: "दिखाएं नहीं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     }
//   };

//   // Fetch a random profile from the opposite gender
//   const fetchRandomProfile = async () => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
//       // Get all profiles
//       const querySnapshot = await getDocs(profilesRef);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data
//         if (profileData.firstName || profileData.profilePhoto) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       // Select a random profile
//       if (profiles.length > 0) {
//         const randomIndex = Math.floor(Math.random() * profiles.length);
//         setSelectedProfile(profiles[randomIndex]);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Fetch suggested profiles (limit to 4)
//       const suggestedQuery = query(profilesRef, limit(4));
//       const suggestedSnapshot = await getDocs(suggestedQuery);
//       const suggested = [];
      
//       suggestedSnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         if (profileData.firstName || profileData.profilePhoto) {
//           suggested.push({
//             id: doc.id,
//             name: profileData.firstName || 'User',
//             age: profileData.age || calculateAge(profileData.dateOfBirth),
//             height: profileData.height || "5'5\"",
//             image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
//             city: profileData.city || '',
//             occupation: profileData.occupation || '',
//             fullData: profileData
//           });
//         }
//       });
      
//       setSuggestedProfiles(suggested);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   };

//   // Fetch profile by ID when user clicks on suggested profile
//   const fetchProfileById = async (profileId) => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
//       const profileSnapshot = await getDoc(profileDoc);
      
//       if (profileSnapshot.exists()) {
//         setSelectedProfile({
//           id: profileSnapshot.id,
//           ...profileSnapshot.data()
//         });
//       }
//     } catch (error) {
//       console.error('Error fetching profile:', error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return 25;
//     try {
//       const [day, month, year] = dateOfBirth.split('/');
//       const birthDate = new Date(`${year}-${month}-${day}`);
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return 25;
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return 'Not available';
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state}` : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
//     const familyInfo = selectedProfile.familyInfo;
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   useEffect(() => {
//     fetchRandomProfile();
//   }, [userData]);

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton}>
//             <Ionicons name="language" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <View style={styles.contentContainer}>
//           <ScrollView contentContainerStyle={styles.scrollContent}>
//             {/* Profile Section */}
//             {selectedProfile && (
//               <View style={styles.profileContainer}>
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
//                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             )}

//             {/* Information Sections */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getPersonalInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             {/* Contact Information Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getContactInfo().map((item, index) => (
//                   <TouchableOpacity
//                     key={index}
//                     style={styles.infoListItem}
//                     onPress={item.onPress}
//                     disabled={!item.onPress}
//                   >
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </TouchableOpacity>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getFamilyInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//               <Text style={styles.aboutText}>
//                 {selectedProfile?.aboutMe || 'No description available yet.'}
//               </Text>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//               <View style={styles.infoList}>
//                 {getLifestyleInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <View style={styles.sectionHeader}>
//                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
//                 <TouchableOpacity>
//                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
//                 </TouchableOpacity>
//               </View>
//               {loadingProfiles ? (
//                 <View style={styles.loadingContainerSection}>
//                   <ActivityIndicator size="small" color="#FF6B6B" />
//                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//                 </View>
//               ) : (
//                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
//                   {suggestedProfiles.map((profile) => (
//                     <TouchableOpacity
//                       key={profile.id}
//                       style={styles.suggestedProfile}
//                       onPress={() => fetchProfileById(profile.id)}
//                     >
//                       <Image
//                         source={{ uri: profile.image }}
//                         style={styles.suggestedImage}
//                         resizeMode="cover"
//                       />
//                       <Text style={styles.suggestedName}>{profile.name}</Text>
//                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
//                     </TouchableOpacity>
//                   ))}
//                 </ScrollView>
//               )}
//             </View>
            
//             {/* Spacer for bottom buttons */}
//             <View style={{ height: 80 }} />
//           </ScrollView>
//         </View>

//         {/* Fixed Bottom Action Buttons */}
//         <View style={styles.bottomActions}>
//           <TouchableOpacity style={styles.bottomButton}>
//             <AntDesign name="close" size={20} color="#FF6B6B" />
//             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//           </TouchableOpacity>
//           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
//             <Feather name="message-square" size={20} color="#fff" />
//             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//           </TouchableOpacity>
//         </View>
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   contentContainer: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-around',
//     marginVertical: 10,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 60,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });









// // app/(tabs)/Matches.jsx
// //

//app/(tabs)/Matches.js

// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions } from 'react-native';
// import React, { useState, useEffect } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { useFirestore } from '../hooks/useFirebase';
// import { collection, query, where, getDocs, limit, doc, getDoc } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const { userData } = useFirestore();
//   const { language } = useLanguage();

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show",
//       HI: "दिखाएं नहीं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     }
//   };

//   // Fetch a random profile from the opposite gender
//   const fetchRandomProfile = async () => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
//       // Get all profiles
//       const querySnapshot = await getDocs(profilesRef);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data
//         if (profileData.firstName || profileData.profilePhoto) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       // Select a random profile
//       if (profiles.length > 0) {
//         const randomIndex = Math.floor(Math.random() * profiles.length);
//         setSelectedProfile(profiles[randomIndex]);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Fetch suggested profiles (limit to 4)
//       const suggestedQuery = query(profilesRef, limit(4));
//       const suggestedSnapshot = await getDocs(suggestedQuery);
//       const suggested = [];
      
//       suggestedSnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         if (profileData.firstName || profileData.profilePhoto) {
//           suggested.push({
//             id: doc.id,
//             name: profileData.firstName || 'User',
//             age: profileData.age || calculateAge(profileData.dateOfBirth),
//             height: profileData.height || "5'5\"",
//             image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
//             city: profileData.city || '',
//             occupation: profileData.occupation || '',
//             fullData: profileData
//           });
//         }
//       });
      
//       setSuggestedProfiles(suggested);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   };

//   // Fetch profile by ID when user clicks on suggested profile
//   const fetchProfileById = async (profileId) => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
//       const profileSnapshot = await getDoc(profileDoc);
      
//       if (profileSnapshot.exists()) {
//         setSelectedProfile({
//           id: profileSnapshot.id,
//           ...profileSnapshot.data()
//         });
//       }
//     } catch (error) {
//       console.error('Error fetching profile:', error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return 25;
//     try {
//       const [day, month, year] = dateOfBirth.split('/');
//       const birthDate = new Date(`${year}-${month}-${day}`);
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return 25;
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return 'Not available';
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state}` : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
//     const familyInfo = selectedProfile.familyInfo;
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   useEffect(() => {
//     fetchRandomProfile();
//   }, [userData]);

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton}>
//             <Ionicons name="language" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <View style={styles.contentContainer}>
//           <ScrollView contentContainerStyle={styles.scrollContent}>
//             {/* Profile Section */}
//             {selectedProfile && (
//               <View style={styles.profileContainer}>
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
//                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             )}

//             {/* Information Sections */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getPersonalInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             {/* Contact Information Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getContactInfo().map((item, index) => (
//                   <TouchableOpacity
//                     key={index}
//                     style={styles.infoListItem}
//                     onPress={item.onPress}
//                     disabled={!item.onPress}
//                   >
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </TouchableOpacity>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getFamilyInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//               <Text style={styles.aboutText}>
//                 {selectedProfile?.aboutMe || 'No description available yet.'}
//               </Text>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//               <View style={styles.infoList}>
//                 {getLifestyleInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <View style={styles.sectionHeader}>
//                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
//                 <TouchableOpacity>
//                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
//                 </TouchableOpacity>
//               </View>
//               {loadingProfiles ? (
//                 <View style={styles.loadingContainerSection}>
//                   <ActivityIndicator size="small" color="#FF6B6B" />
//                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//                 </View>
//               ) : (
//                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
//                   {suggestedProfiles.map((profile) => (
//                     <TouchableOpacity
//                       key={profile.id}
//                       style={styles.suggestedProfile}
//                       onPress={() => fetchProfileById(profile.id)}
//                     >
//                       <Image
//                         source={{ uri: profile.image }}
//                         style={styles.suggestedImage}
//                         resizeMode="cover"
//                       />
//                       <Text style={styles.suggestedName}>{profile.name}</Text>
//                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
//                     </TouchableOpacity>
//                   ))}
//                 </ScrollView>
//               )}
//             </View>
            
//             {/* Spacer for bottom buttons */}
//             <View style={{ height: 80 }} />
//           </ScrollView>
//         </View>

//         {/* Fixed Bottom Action Buttons */}
//         <View style={styles.bottomActions}>
//           <TouchableOpacity style={styles.bottomButton}>
//             <AntDesign name="close" size={20} color="#FF6B6B" />
//             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//           </TouchableOpacity>
//           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
//             <Feather name="message-square" size={20} color="#fff" />
//             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//           </TouchableOpacity>
//         </View>
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   contentContainer: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-around',
//     marginVertical: 10,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 60,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });







//app/(tabs)/Matches.js

// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions } from 'react-native';
// import React, { useState, useEffect } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { useFirestore } from '../hooks/useFirebase';
// import { collection, query, where, getDocs, limit, doc, getDoc } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const { userData } = useFirestore();
//   const { language } = useLanguage();

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show",
//       HI: "दिखाएं नहीं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     }
//   };

//   // Fetch a random profile from the opposite gender
//   const fetchRandomProfile = async () => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
//       // Get all profiles
//       const querySnapshot = await getDocs(profilesRef);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data
//         if (profileData.firstName || profileData.profilePhoto) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       // Select a random profile
//       if (profiles.length > 0) {
//         const randomIndex = Math.floor(Math.random() * profiles.length);
//         setSelectedProfile(profiles[randomIndex]);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Fetch suggested profiles (limit to 4)
//       const suggestedQuery = query(profilesRef, limit(4));
//       const suggestedSnapshot = await getDocs(suggestedQuery);
//       const suggested = [];
      
//       suggestedSnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         if (profileData.firstName || profileData.profilePhoto) {
//           suggested.push({
//             id: doc.id,
//             name: profileData.firstName || 'User',
//             age: profileData.age || calculateAge(profileData.dateOfBirth),
//             height: profileData.height || "5'5\"",
//             image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
//             city: profileData.city || '',
//             occupation: profileData.occupation || '',
//             fullData: profileData
//           });
//         }
//       });
      
//       setSuggestedProfiles(suggested);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   };

//   // Fetch profile by ID when user clicks on suggested profile
//   const fetchProfileById = async (profileId) => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
//       const profileSnapshot = await getDoc(profileDoc);
      
//       if (profileSnapshot.exists()) {
//         setSelectedProfile({
//           id: profileSnapshot.id,
//           ...profileSnapshot.data()
//         });
//       }
//     } catch (error) {
//       console.error('Error fetching profile:', error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return 25;
//     try {
//       const [day, month, year] = dateOfBirth.split('/');
//       const birthDate = new Date(`${year}-${month}-${day}`);
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return 25;
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return 'Not available';
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state}` : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
//     const familyInfo = selectedProfile.familyInfo;
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   useEffect(() => {
//     fetchRandomProfile();
//   }, [userData]);

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton}>
//             <Ionicons name="language" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <View style={styles.contentContainer}>
//           <ScrollView contentContainerStyle={styles.scrollContent}>
//             {/* Profile Section */}
//             {selectedProfile && (
//               <View style={styles.profileContainer}>
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
//                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             )}

//             {/* Information Sections */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getPersonalInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             {/* Contact Information Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getContactInfo().map((item, index) => (
//                   <TouchableOpacity
//                     key={index}
//                     style={styles.infoListItem}
//                     onPress={item.onPress}
//                     disabled={!item.onPress}
//                   >
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </TouchableOpacity>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getFamilyInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//               <Text style={styles.aboutText}>
//                 {selectedProfile?.aboutMe || 'No description available yet.'}
//               </Text>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//               <View style={styles.infoList}>
//                 {getLifestyleInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <View style={styles.sectionHeader}>
//                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
//                 <TouchableOpacity>
//                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
//                 </TouchableOpacity>
//               </View>
//               {loadingProfiles ? (
//                 <View style={styles.loadingContainerSection}>
//                   <ActivityIndicator size="small" color="#FF6B6B" />
//                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//                 </View>
//               ) : (
//                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
//                   {suggestedProfiles.map((profile) => (
//                     <TouchableOpacity
//                       key={profile.id}
//                       style={styles.suggestedProfile}
//                       onPress={() => fetchProfileById(profile.id)}
//                     >
//                       <Image
//                         source={{ uri: profile.image }}
//                         style={styles.suggestedImage}
//                         resizeMode="cover"
//                       />
//                       <Text style={styles.suggestedName}>{profile.name}</Text>
//                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
//                     </TouchableOpacity>
//                   ))}
//                 </ScrollView>
//               )}
//             </View>
            
//             {/* Spacer for bottom buttons */}
//             <View style={{ height: 80 }} />
//           </ScrollView>
//         </View>

//         {/* Fixed Bottom Action Buttons */}
//         <View style={styles.bottomActions}>
//           <TouchableOpacity style={styles.bottomButton}>
//             <AntDesign name="close" size={20} color="#FF6B6B" />
//             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//           </TouchableOpacity>
//           <TouchableOpacity style={[styles.bottomButton, styles.messageButton]}>
//             <Feather name="message-square" size={20} color="#fff" />
//             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//           </TouchableOpacity>
//         </View>
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   contentContainer: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-around',
//     marginVertical: 10,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 60,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });










//31

// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions } from 'react-native';
// import React, { useState, useEffect } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { useFirestore } from '../hooks/useFirebase';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../hooks/useAuth';
// import { useRouter } from 'expo-router';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const { userData } = useFirestore();
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show",
//       HI: "दिखाएं नहीं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     }
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         alert('User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || 'User',
//         fromUserImage: userData?.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       alert('Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       alert('Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       alert('Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const querySnapshot = await getDocs(chatsRef);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds &&
//             chatData.participantIds.includes(user.id) &&
//             chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         // Chat exists, navigate to it
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const currentUser = {
//           id: user.id,
//           displayName: user.displayName || 'You'
//         };
        
//         const otherUser = {
//           id: selectedProfile.id,
//           displayName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim() || 'User'
//         };

//         const chatData = {
//           participants: [currentUser.displayName, otherUser.displayName],
//           participantIds: [currentUser.id, otherUser.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: currentUser.id,
//             userName: currentUser.displayName,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: otherUser.id,
//             userName: otherUser.displayName,
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         // Navigate to the new chat
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       alert('Failed to start chat. Please try again.');
//     }
//   };

//   // Fetch a random profile from the opposite gender
//   const fetchRandomProfile = async () => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
//       // Get all profiles
//       const querySnapshot = await getDocs(profilesRef);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data
//         if (profileData.firstName || profileData.profilePhoto) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       // Select a random profile
//       if (profiles.length > 0) {
//         const randomIndex = Math.floor(Math.random() * profiles.length);
//         setSelectedProfile(profiles[randomIndex]);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Fetch suggested profiles (limit to 4)
//       const suggested = [];
//       const maxSuggestions = 4;
      
//       for (let i = 0; i < Math.min(profiles.length, maxSuggestions); i++) {
//         const profileData = profiles[i];
//         if (profileData.firstName || profileData.profilePhoto) {
//           suggested.push({
//             id: profileData.id || `temp-${i}`,
//             name: profileData.firstName || 'User',
//             age: profileData.age || calculateAge(profileData.dateOfBirth),
//             height: profileData.height || "5'5\"",
//             image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
//             city: profileData.city || '',
//             occupation: profileData.occupation || '',
//             fullData: profileData
//           });
//         }
//       }
      
//       setSuggestedProfiles(suggested);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   };

//   // Fetch profile by ID when user clicks on suggested profile
//   const fetchProfileById = async (profileId) => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
//       const profileSnapshot = await getDoc(profileDoc);
      
//       if (profileSnapshot.exists()) {
//         setSelectedProfile({
//           id: profileSnapshot.id,
//           ...profileSnapshot.data()
//         });
//       }
//     } catch (error) {
//       console.error('Error fetching profile:', error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return 25;
//     try {
//       const [day, month, year] = dateOfBirth.split('/');
//       const birthDate = new Date(`${year}-${month}-${day}`);
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return 25;
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return 'Not available';
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state}` : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
//     const familyInfo = selectedProfile.familyInfo;
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   useEffect(() => {
//     fetchRandomProfile();
//   }, [userData]);

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton}>
//             <Ionicons name="language" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <View style={styles.contentContainer}>
//           <ScrollView contentContainerStyle={styles.scrollContent}>
//             {/* Profile Section */}
//             {selectedProfile && (
//               <View style={styles.profileContainer}>
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
//                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             )}

//             {/* Information Sections */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getPersonalInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             {/* Contact Information Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getContactInfo().map((item, index) => (
//                   <TouchableOpacity
//                     key={index}
//                     style={styles.infoListItem}
//                     onPress={item.onPress}
//                     disabled={!item.onPress}
//                   >
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </TouchableOpacity>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getFamilyInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//               <Text style={styles.aboutText}>
//                 {selectedProfile?.aboutMe || 'No description available yet.'}
//               </Text>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//               <View style={styles.infoList}>
//                 {getLifestyleInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <View style={styles.sectionHeader}>
//                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
//                 <TouchableOpacity>
//                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
//                 </TouchableOpacity>
//               </View>
//               {loadingProfiles ? (
//                 <View style={styles.loadingContainerSection}>
//                   <ActivityIndicator size="small" color="#FF6B6B" />
//                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//                 </View>
//               ) : (
//                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
//                   {suggestedProfiles.map((profile) => (
//                     <TouchableOpacity
//                       key={profile.id}
//                       style={styles.suggestedProfile}
//                       onPress={() => fetchProfileById(profile.id)}
//                     >
//                       <Image
//                         source={{ uri: profile.image }}
//                         style={styles.suggestedImage}
//                         resizeMode="cover"
//                       />
//                       <Text style={styles.suggestedName}>{profile.name}</Text>
//                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
//                     </TouchableOpacity>
//                   ))}
//                 </ScrollView>
//               )}
//             </View>
            
//             {/* Spacer for bottom buttons */}
//             <View style={{ height: 80 }} />
//           </ScrollView>
//         </View>

//         {/* Fixed Bottom Action Buttons */}
//         <View style={styles.bottomActions}>
//           <TouchableOpacity
//             style={styles.bottomButton}
//             onPress={() => fetchRandomProfile()}
//           >
//             <AntDesign name="close" size={20} color="#FF6B6B" />
//             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//           </TouchableOpacity>
//           <TouchableOpacity
//             style={[styles.bottomButton, styles.messageButton]}
//             onPress={startChat}
//           >
//             <Feather name="message-square" size={20} color="#fff" />
//             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//           </TouchableOpacity>
//         </View>
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   contentContainer: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-around',
//     marginVertical: 10,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 60,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },

//             })
            













// app/(tabs)/Matches.js
//31 trail2
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert } from 'react-native';
// import React, { useState, useEffect } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { useFirestore } from '../hooks/useFirebase';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../hooks/useAuth';
// import { useRouter } from 'expo-router';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const { userData } = useFirestore();
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show",
//       HI: "दिखाएं नहीं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     }
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || 'User',
//         fromUserImage: userData?.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const querySnapshot = await getDocs(chatsRef);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds &&
//             chatData.participantIds.includes(user.id) &&
//             chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             user.displayName || 'You',
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: user.displayName || 'You',
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Fetch a random profile from the opposite gender
//   const fetchRandomProfile = async () => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
//       // Get all profiles
//       const querySnapshot = await getDocs(profilesRef);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data
//         if (profileData.firstName || profileData.profilePhoto) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       // Select a random profile
//       if (profiles.length > 0) {
//         const randomIndex = Math.floor(Math.random() * profiles.length);
//         setSelectedProfile(profiles[randomIndex]);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Fetch suggested profiles (limit to 4)
//       const suggested = [];
//       const maxSuggestions = 4;
      
//       for (let i = 0; i < Math.min(profiles.length, maxSuggestions); i++) {
//         const profileData = profiles[i];
//         if (profileData.firstName || profileData.profilePhoto) {
//           suggested.push({
//             id: profileData.id || `temp-${i}`,
//             name: profileData.firstName || 'User',
//             age: profileData.age || calculateAge(profileData.dateOfBirth),
//             height: profileData.height || "5'5\"",
//             image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
//             city: profileData.city || '',
//             occupation: profileData.occupation || '',
//             fullData: profileData
//           });
//         }
//       }
      
//       setSuggestedProfiles(suggested);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   };

//   // Fetch profile by ID when user clicks on suggested profile
//   const fetchProfileById = async (profileId) => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
//       const profileSnapshot = await getDoc(profileDoc);
      
//       if (profileSnapshot.exists()) {
//         setSelectedProfile({
//           id: profileSnapshot.id,
//           ...profileSnapshot.data()
//         });
//       } else {
//         Alert.alert('Error', 'Profile not found');
//       }
//     } catch (error) {
//       console.error('Error fetching profile:', error);
//       Alert.alert('Error', 'Failed to load profile');
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return 25;
//     try {
//       const [day, month, year] = dateOfBirth.split('/');
//       const birthDate = new Date(`${year}-${month}-${day}`);
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return 25;
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
//     const familyInfo = selectedProfile.familyInfo;
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   useEffect(() => {
//     fetchRandomProfile();
//   }, [userData]);

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton}>
//             <Ionicons name="language" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <View style={styles.contentContainer}>
//           <ScrollView contentContainerStyle={styles.scrollContent}>
//             {/* Profile Section */}
//             {selectedProfile && (
//               <View style={styles.profileContainer}>
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
//                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             )}

//             {/* Information Sections */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getPersonalInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             {/* Contact Information Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getContactInfo().map((item, index) => (
//                   <TouchableOpacity
//                     key={index}
//                     style={styles.infoListItem}
//                     onPress={item.onPress}
//                     disabled={!item.onPress}
//                   >
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </TouchableOpacity>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getFamilyInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//               <Text style={styles.aboutText}>
//                 {selectedProfile?.aboutMe || 'No description available yet.'}
//               </Text>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//               <View style={styles.infoList}>
//                 {getLifestyleInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <View style={styles.sectionHeader}>
//                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
//                 <TouchableOpacity>
//                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
//                 </TouchableOpacity>
//               </View>
//               {loadingProfiles ? (
//                 <View style={styles.loadingContainerSection}>
//                   <ActivityIndicator size="small" color="#FF6B6B" />
//                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//                 </View>
//               ) : (
//                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
//                   {suggestedProfiles.map((profile) => (
//                     <TouchableOpacity
//                       key={profile.id}
//                       style={styles.suggestedProfile}
//                       onPress={() => fetchProfileById(profile.id)}
//                     >
//                       <Image
//                         source={{ uri: profile.image }}
//                         style={styles.suggestedImage}
//                         resizeMode="cover"
//                       />
//                       <Text style={styles.suggestedName}>{profile.name}</Text>
//                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
//                     </TouchableOpacity>
//                   ))}
//                 </ScrollView>
//               )}
//             </View>
            
//             {/* Spacer for bottom buttons */}
//             <View style={{ height: 80 }} />
//           </ScrollView>
//         </View>

//         {/* Fixed Bottom Action Buttons */}
//         <View style={styles.bottomActions}>
//           <TouchableOpacity
//             style={styles.bottomButton}
//             onPress={() => fetchRandomProfile()}
//           >
//             <AntDesign name="close" size={20} color="#FF6B6B" />
//             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//           </TouchableOpacity>
//           <TouchableOpacity
//             style={[styles.bottomButton, styles.messageButton]}
//             onPress={startChat}
//           >
//             <Feather name="message-square" size={20} color="#fff" />
//             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//           </TouchableOpacity>
//         </View>
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   contentContainer: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-around',
//     marginVertical: 10,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 60,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });














//1/09/2025
// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert } from 'react-native';
// import React, { useState, useEffect, useCallback } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { useFirestore } from '../hooks/useFirebase';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../hooks/useAuth';
// import { useRouter } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [suggestedProfiles, setSuggestedProfiles] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { userData } = useFirestore();
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show",
//       HI: "दिखाएं नहीं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     }
//   };

//   // Fetch a random profile from the opposite gender
//   const fetchRandomProfile = useCallback(async () => {
//     if (!userData || hasLoaded) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users', genderToFetch, 'profiles');
      
//       // Get all profiles
//       const querySnapshot = await getDocs(profilesRef);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data
//         if (profileData.firstName || profileData.profilePhoto) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       // Select a random profile
//       if (profiles.length > 0) {
//         const randomIndex = Math.floor(Math.random() * profiles.length);
//         setSelectedProfile(profiles[randomIndex]);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Fetch suggested profiles (limit to 4)
//       const suggested = [];
//       const maxSuggestions = 4;
      
//       for (let i = 0; i < Math.min(profiles.length, maxSuggestions); i++) {
//         const profileData = profiles[i];
//         if (profileData.firstName || profileData.profilePhoto) {
//           suggested.push({
//             id: profileData.id || `temp-${i}`,
//             name: profileData.firstName || 'User',
//             age: profileData.age || calculateAge(profileData.dateOfBirth),
//             height: profileData.height || "5'5\"",
//             image: profileData.profilePhoto || 'https://via.placeholder.com/140x160',
//             city: profileData.city || '',
//             occupation: profileData.occupation || '',
//             fullData: profileData
//           });
//         }
//       }
      
//       setSuggestedProfiles(suggested);
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [userData, hasLoaded]);

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && userData) {
//         fetchRandomProfile();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [fetchRandomProfile, hasLoaded, userData])
//   );

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || 'User',
//         fromUserImage: userData?.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const querySnapshot = await getDocs(chatsRef);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds &&
//             chatData.participantIds.includes(user.id) &&
//             chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             user.displayName || 'You',
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: user.displayName || 'You',
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Fetch profile by ID when user clicks on suggested profile
//   const fetchProfileById = async (profileId) => {
//     if (!userData) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = userData.gender === 'Male' ? 'Female' : 'Male';
//       const profileDoc = doc(db, 'Users', genderToFetch, 'profiles', profileId);
//       const profileSnapshot = await getDoc(profileDoc);
      
//       if (profileSnapshot.exists()) {
//         setSelectedProfile({
//           id: profileSnapshot.id,
//           ...profileSnapshot.data()
//         });
//       } else {
//         Alert.alert('Error', 'Profile not found');
//       }
//     } catch (error) {
//       console.error('Error fetching profile:', error);
//       Alert.alert('Error', 'Failed to load profile');
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return 25;
//     try {
//       const [day, month, year] = dateOfBirth.split('/');
//       const birthDate = new Date(`${year}-${month}-${day}`);
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return 25;
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile || !selectedProfile.familyInfo) return [];
    
//     const familyInfo = selectedProfile.familyInfo;
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? selectedProfile.interests.join(', ') : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfile = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchRandomProfile();
//   };

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfile}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <View style={styles.contentContainer}>
//           <ScrollView contentContainerStyle={styles.scrollContent}>
//             {/* Profile Section */}
//             {selectedProfile && (
//               <View style={styles.profileContainer}>
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth)}yrs,{' '}
//                       {selectedProfile.height || "5'5\""}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </View>
//             )}

//             {/* Information Sections */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getPersonalInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             {/* Contact Information Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getContactInfo().map((item, index) => (
//                   <TouchableOpacity
//                     key={index}
//                     style={styles.infoListItem}
//                     onPress={item.onPress}
//                     disabled={!item.onPress}
//                   >
//                     <Text style={styles.infoLabel}>{item.label} :</Text>
//                     <View style={styles.infoValueContainer}>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                       {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                     </View>
//                   </TouchableOpacity>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//               <View style={styles.infoList}>
//                 {getFamilyInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//               <Text style={styles.aboutText}>
//                 {selectedProfile?.aboutMe || 'No description available yet.'}
//               </Text>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//               <View style={styles.infoList}>
//                 {getLifestyleInfo().map((item, index) => (
//                   <View key={index} style={styles.infoListItem}>
//                     <Text style={styles.infoLabel}>{item.label}:</Text>
//                     <Text style={styles.infoValue}>{item.value}</Text>
//                   </View>
//                 ))}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <View style={styles.sectionHeader}>
//                 <Text style={styles.sectionTitle}>{translations.profilesYouMayLike[language]}</Text>
//                 <TouchableOpacity>
//                   <Text style={styles.seeAll}>{translations.seeAll[language]}</Text>
//                 </TouchableOpacity>
//               </View>
//               {loadingProfiles ? (
//                 <View style={styles.loadingContainerSection}>
//                   <ActivityIndicator size="small" color="#FF6B6B" />
//                   <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//                 </View>
//               ) : (
//                 <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestedProfiles}>
//                   {suggestedProfiles.map((profile) => (
//                     <TouchableOpacity
//                       key={profile.id}
//                       style={styles.suggestedProfile}
//                       onPress={() => fetchProfileById(profile.id)}
//                     >
//                       <Image
//                         source={{ uri: profile.image }}
//                         style={styles.suggestedImage}
//                         resizeMode="cover"
//                       />
//                       <Text style={styles.suggestedName}>{profile.name}</Text>
//                       <Text style={styles.suggestedDetails}>{profile.age}, {profile.height}</Text>
//                     </TouchableOpacity>
//                   ))}
//                 </ScrollView>
//               )}
//             </View>
            
//             {/* Spacer for bottom buttons */}
//             <View style={{ height: 80 }} />
//           </ScrollView>
//         </View>

//         {/* Fixed Bottom Action Buttons */}
//         <View style={styles.bottomActions}>
//           <TouchableOpacity
//             style={styles.bottomButton}
//             onPress={refreshProfile}
//           >
//             <AntDesign name="close" size={20} color="#FF6B6B" />
//             <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//           </TouchableOpacity>
//           <TouchableOpacity
//             style={[styles.bottomButton, styles.messageButton]}
//             onPress={startChat}
//           >
//             <Feather name="message-square" size={20} color="#fff" />
//             <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//           </TouchableOpacity>
//         </View>
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   contentContainer: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-around',
//     marginVertical: 10,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 60,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });





//02-09-2025
// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewAllProfiles: {
//       ENG: "View All Profiles",
//       HI: "सभी प्रोफाइल देखें"
//     }
//   };

//   // PanResponder for swipe gestures
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10 || Math.abs(gestureState.dy) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Fetch all profiles from the opposite gender
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [fetchAllProfiles, hasLoaded, user])
//   );

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     if (currentProfileIndex >= updatedProfiles.length) {
//       setCurrentProfileIndex(updatedProfiles.length - 1);
//     }
    
//     // Set the new current profile
//     setSelectedProfile(updatedProfiles[currentProfileIndex] || updatedProfiles[0]);
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // View all profiles in a grid view
//   const viewAllProfiles = () => {
//     // This would navigate to a screen showing all profiles in a grid
//     // For now, we'll just show an alert
//     Alert.alert('Info', 'This would show all profiles in a grid view');
//   };

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <View style={styles.contentContainer}>
//           <ScrollView contentContainerStyle={styles.scrollContent}>
//             {/* Profile Counter */}
//             {filteredProfiles.length > 0 && (
//               <View style={styles.profileCounter}>
//                 <Text style={styles.profileCounterText}>
//                   {currentProfileIndex + 1} / {filteredProfiles.length}
//                 </Text>
//                 <TouchableOpacity onPress={viewAllProfiles} style={styles.viewAllButton}>
//                   <Text style={styles.viewAllText}>{translations.viewAllProfiles[language]}</Text>
//                 </TouchableOpacity>
//               </View>
//             )}

//             {/* Profile Section with Swipe Gestures */}
//             {selectedProfile ? (
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}

//                   {/* Navigation Arrows */}
//                   {filteredProfiles.length > 1 && (
//                     <>
//                       <TouchableOpacity
//                         style={[styles.navArrow, styles.prevArrow]}
//                         onPress={goToPreviousProfile}
//                       >
//                         <Ionicons name="chevron-back" size={30} color="#fff" />
//                       </TouchableOpacity>
//                       <TouchableOpacity
//                         style={[styles.navArrow, styles.nextArrow]}
//                         onPress={goToNextProfile}
//                       >
//                         <Ionicons name="chevron-forward" size={30} color="#fff" />
//                       </TouchableOpacity>
//                     </>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                       {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             ) : (
//               <View style={styles.noProfilesContainer}>
//                 <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//               </View>
//             )}

//             {/* Information Sections */}
//             {selectedProfile && (
//               <>
//                 <View style={styles.section}>
//                   <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                   <View style={styles.infoList}>
//                     {getPersonalInfo().map((item, index) => (
//                       <View key={index} style={styles.infoListItem}>
//                         <Text style={styles.infoLabel}>{item.label} :</Text>
//                         <View style={styles.infoValueContainer}>
//                           <Text style={styles.infoValue}>{item.value}</Text>
//                           {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                         </View>
//                       </View>
//                     ))}
//                   </View>
//                 </View>

//                 {/* Contact Information Section */}
//                 <View style={styles.section}>
//                   <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                   <View style={styles.infoList}>
//                     {getContactInfo().map((item, index) => (
//                       <TouchableOpacity
//                         key={index}
//                         style={styles.infoListItem}
//                         onPress={item.onPress}
//                         disabled={!item.onPress}
//                       >
//                         <Text style={styles.infoLabel}>{item.label} :</Text>
//                         <View style={styles.infoValueContainer}>
//                           <Text style={styles.infoValue}>{item.value}</Text>
//                           {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                         </View>
//                       </TouchableOpacity>
//                     ))}
//                   </View>
//                 </View>

//                 <View style={styles.section}>
//                   <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                   <View style={styles.infoList}>
//                     {getFamilyInfo().map((item, index) => (
//                       <View key={index} style={styles.infoListItem}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                       </View>
//                     ))}
//                   </View>
//                 </View>

//                 <View style={styles.section}>
//                   <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                   <Text style={styles.aboutText}>
//                     {selectedProfile?.aboutMe || 'No description available yet.'}
//                   </Text>
//                 </View>

//                 <View style={styles.section}>
//                   <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                   <View style={styles.infoList}>
//                     {getLifestyleInfo().map((item, index) => (
//                       <View key={index} style={styles.infoListItem}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                       </View>
//                     ))}
//                   </View>
//                 </View>
//               </>
//             )}
            
//             {/* Spacer for bottom buttons */}
//             <View style={{ height: 80 }} />
//           </ScrollView>
//         </View>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   contentContainer: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileCounter: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     paddingHorizontal: 15,
//     marginBottom: 10,
//   },
//   profileCounterText: {
//     color: '#666',
//     fontSize: 14,
//   },
//   viewAllButton: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   viewAllText: {
//     color: '#fff',
//     fontSize: 12,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '50%',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     justifyContent: 'center',
//     alignItems: 'center',
//     marginTop: -20,
//   },
//   prevArrow: {
//     left: 10,
//   },
//   nextArrow: {
//     right: 10,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });








//3/09/2025
// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   };

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Fetch all profiles from the opposite gender
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [fetchAllProfiles, hasLoaded, user])
//   );

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Navigation Arrows - Fixed at screen edges */}
//               {filteredProfiles.length > 1 && (
//                 <>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.prevArrow]}
//                     onPress={goToPreviousProfile}
//                   >
//                     <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.nextArrow]}
//                     onPress={goToNextProfile}
//                   >
//                     <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                 </>
//               )}
              
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                       {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label} :</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <Text style={styles.infoLabel}>{item.label} :</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: -20,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: -20,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });








//trail2

// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations
//   const translations = {
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   };

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Fetch all profiles from the opposite gender
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [fetchAllProfiles, hasLoaded, user, params])
//   );

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Navigation Arrows - Fixed at screen edges */}
//               {filteredProfiles.length > 1 && (
//                 <>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.prevArrow]}
//                     onPress={goToPreviousProfile}
//                   >
//                     <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.nextArrow]}
//                     onPress={goToNextProfile}
//                   >
//                     <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                 </>
//               )}
              
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                       {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label} :</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <Text style={styles.infoLabel}>{item.label} :</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: -20,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: -20,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });









// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Navigation Arrows - Fixed at screen edges */}
//               {filteredProfiles.length > 1 && (
//                 <>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.prevArrow]}
//                     onPress={goToPreviousProfile}
//                   >
//                     <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.nextArrow]}
//                     onPress={goToNextProfile}
//                   >
//                     <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                 </>
//               )}
              
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                       {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label} :</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <Text style={styles.infoLabel}>{item.label} :</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: -20,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//    nextArrow: {
//     right: -20,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 15,
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   seeAll: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginBottom: 12,
//     alignItems: 'center',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     textAlign: 'right',
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     justifyContent: 'flex-end',
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   suggestedProfiles: {
//     marginBottom: 15,
//   },
//   suggestedProfile: {
//     marginRight: 15,
//     width: 120,
//   },
//   suggestedImage: {
//     width: 120,
//     height: 150,
//     borderRadius: 10,
//     marginBottom: 8,
//   },
//   suggestedName: {
//     fontWeight: 'bold',
//     fontSize: 14,
//     color: '#333',
//   },
//   suggestedDetails: {
//     color: '#666',
//     fontSize: 12,
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingContainerSection: {
//     height: 150,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });





//05/09/2025

// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रоफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         {/* Fixed Profile Card Section - Completely fixed at the top */}
//         {selectedProfile ? (
//           <View style={styles.fixedProfileSection}>
//             {/* Navigation Arrows - Fixed at screen edges */}
//             {filteredProfiles.length > 1 && (
//               <>
//                 <TouchableOpacity
//                   style={[styles.navArrow, styles.prevArrow]}
//                   onPress={goToPreviousProfile}
//                 >
//                   <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//                 </TouchableOpacity>
//                 <TouchableOpacity
//                   style={[styles.navArrow, styles.nextArrow]}
//                   onPress={goToNextProfile}
//                 >
//                   <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//                 </TouchableOpacity>
//               </>
//             )}
            
//             {/* Profile Card - Completely fixed */}
//             <Animated.View
//               style={[
//                 styles.profileContainer,
//                 {
//                   transform: [
//                     { translateX: swipeX },
//                     { translateY: swipeY },
//                     { scale: scale }
//                   ]
//                 }
//               ]}
//               {...panResponder.panHandlers}
//             >
//               {/* Main Profile Image with Gallery Icon */}
//               <View style={styles.profileImageContainer}>
//                 <TouchableOpacity onPress={openGallery}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
//                 </TouchableOpacity>
                
//                 {/* Gallery Icon with Count (bottom-right corner) */}
//                 {getTotalPhotoCount() > 0 && (
//                   <TouchableOpacity
//                     style={styles.galleryIconContainer}
//                     onPress={openGallery}
//                   >
//                     <Ionicons name="images" size={20} color="#fff" />
//                     <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                   </TouchableOpacity>
//                 )}
//               </View>

//               <View style={styles.profileHeader}>
//                 <View>
//                   <Text style={styles.profileName}>
//                     {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                   </Text>
//                   <Text style={styles.profileDetails}>
//                     {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                     {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                   </Text>
//                   <Text style={styles.profileDetails}>
//                     {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                   </Text>
//                 </View>
//                 <View style={styles.matchBadge}>
//                   <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                 </View>
//               </View>
//               <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//               {/* Action Buttons */}
//               <View style={styles.actionButtons}>
//                 <TouchableOpacity
//                   style={styles.interestButton}
//                   onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                 >
//                   <Ionicons name="heart" size={20} color="#FF6B6B" />
//                   <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                 </TouchableOpacity>
//                 <TouchableOpacity style={styles.actionButton}>
//                   <MaterialIcons name="call" size={24} color="#4CAF50" />
//                 </TouchableOpacity>
//                 <TouchableOpacity style={styles.actionButton}>
//                   <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                 </TouchableOpacity>
//               </View>
//             </Animated.View>
//           </View>
//         ) : (
//           <View style={styles.noProfilesContainer}>
//             <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//           </View>
//         )}

//         {/* Scrollable Information Section - Separate from the fixed profile */}
//         <ScrollView
//           style={styles.infoScrollView}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoGridItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoGridItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoGridItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoGridItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//   },
//   infoScrollView: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingTop: 470, // Space for the fixed profile card
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//     backgroundColor: '#fff',
//     zIndex: 100,
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//     backgroundColor: '#fff',
//     zIndex: 100,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   fixedProfileSection: {
//     position: 'absolute',
//     top: 120, // Below header and options
//     left: 0,
//     right: 0,
//     backgroundColor: '#fff',
//     zIndex: 50,
//     paddingBottom: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   profileContainer: {
//     padding: 15,
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 5,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//    nextArrow: {
//     right: 5,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     zIndex: 100,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoGrid: {
//     flexDirection: 'row',
//     flexWrap: 'wrap',
//     justifyContent: 'space-between',
//   },
//   infoGridItem: {
//     width: '48%',
//     flexDirection: 'row',
//     marginBottom: 12,
//     alignItems: 'flex-start',
//   },
//   infoLabelContainer: {
//     flex: 1,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     textAlign: 'right',
//     flexShrink: 1,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'flex-end',
//     flex: 1,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });







//07/09/2025

// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Animation values for scroll effects
//   const scrollY = useRef(new Animated.Value(0)).current;
//   const cardScale = useRef(new Animated.Value(1)).current;
//   const cardTranslateY = useRef(new Animated.Value(0)).current;
//   const cardOpacity = useRef(new Animated.Value(1)).current;

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Handle scroll events for animation
//   const handleScroll = Animated.event(
//     [{ nativeEvent: { contentOffset: { y: scrollY } } }],
//     { useNativeDriver: false }
//   );

//   // Set up scroll animations
//   useEffect(() => {
//     // Animate profile card based on scroll position
//     scrollY.addListener(({ value }) => {
//       // Calculate animation values based on scroll position
//       const scrollDistance = Math.max(0, value);
      
//       // Scale up the card as user scrolls down
//       const scaleValue = 1 + (scrollDistance / 500);
//       cardScale.setValue(Math.min(scaleValue, 1.2));
      
//       // Move card up as user scrolls down
//       const translateYValue = -scrollDistance / 2;
//       cardTranslateY.setValue(translateYValue);
      
//       // Fade out card as user scrolls down
//       const opacityValue = 1 - (scrollDistance / 300);
//       cardOpacity.setValue(Math.max(opacityValue, 0.7));
//     });

//     return () => {
//       scrollY.removeAllListeners();
//     };
//   }, []);

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Reset scroll position
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Reset scroll position
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Reset scroll position
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           onScroll={handleScroll}
//           scrollEventThrottle={16}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures and Scroll Animation */}
//           {selectedProfile ? (
//             <Animated.View style={[
//               styles.profileSection,
//               {
//                 transform: [
//                   { translateY: cardTranslateY },
//                   { scale: cardScale }
//                 ],
//                 opacity: cardOpacity
//               }
//             ]}>
//               {/* Navigation Arrows - Fixed at screen edges */}
//               {filteredProfiles.length > 1 && (
//                 <>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.prevArrow]}
//                     onPress={goToPreviousProfile}
//                   >
//                     <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.nextArrow]}
//                     onPress={goToNextProfile}
//                   >
//                     <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                 </>
//               )}
              
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                       {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     <Text style={styles.matchText}>{translations.activeToday[language]}</Text>
//                   </View>
//                 </View>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </Animated.View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoGridItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoGridItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoGridItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoGrid}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoGridItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '##FF6B6B',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//    nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//     alignItems: 'center',
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoGrid: {
//     flexDirection: 'row',
//     flexWrap: 'wrap',
//     justifyContent: 'space-between',
//   },
//   infoGridItem: {
//     width: '48%',
//     flexDirection: 'row',
//     marginBottom: 12,
//     alignItems: 'flex-start',
//   },
//   infoLabelContainer: {
//     flex: 1,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     textAlign: 'right',
//     flexShrink: 1,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'flex-end',
//     flex: 1,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });







//08/09/2001

// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Navigation Arrows - Fixed at screen edges */}
//               {filteredProfiles.length > 1 && (
//                 <>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.prevArrow]}
//                     onPress={goToPreviousProfile}
//                   >
//                     <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.nextArrow]}
//                     onPress={goToNextProfile}
//                   >
//                     <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                 </>
//               )}
              
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <TouchableOpacity onPress={openGallery}>
//                     <Image
//                       source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                       style={styles.profileImage}
//                       resizeMode="cover"
//                     />
//                   </TouchableOpacity>
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                       {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <Text style={styles.infoLabel}>{item.label}</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//    nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '##f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     textAlign: 'right',
//     flex: 1,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'flex-end',
//     flex: 1,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });








//trail2

// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interefits) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Navigation Arrows - Fixed at screen edges */}
//               {filteredProfiles.length > 1 && (
//                 <>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.prevArrow]}
//                     onPress={goToPreviousProfile}
//                   >
//                     <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                   <TouchableOpacity
//                     style={[styles.navArrow, styles.nextArrow]}
//                     onPress={goToNextProfile}
//                   >
//                     <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//                   </TouchableOpacity>
//                 </>
//               )}
              
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity onPress={scrollToInformation} style={styles.profileImageContainer}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </TouchableOpacity>

//                 <TouchableOpacity onPress={scrollToInformation}>
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>
//                 </TouchableOpacity>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <Text style={styles.infoLabel}>{item.label}:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }


// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//    nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     flex: 1,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     textAlign: 'right',
//     flex: 1,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'flex-end',
//     flex: 1,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });




//trail3
// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity onPress={scrollToInformation} style={styles.profileImageContainer}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </TouchableOpacity>

//                 <TouchableOpacity onPress={scrollToInformation}>
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>
//                 </TouchableOpacity>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}:</Text>
//                       </View>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     textAlign: 'right',
//     flex: 1,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'flex-end',
//     flex: 1,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });


// trail4
// app/(tabs)/Matches.js
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity onPress={scrollToInformation} style={styles.profileImageContainer}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </TouchableOpacity>

//                 <TouchableOpacity onPress={scrollToInformation}>
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>
//                 </TouchableOpacity>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-end',
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     marginHorizontal: 5,
//     width: 10,
//     textAlign: 'center',
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });










// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity onPress={scrollToInformation} style={styles.profileImageContainer}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </TouchableOpacity>

//                 <TouchableOpacity onPress={scrollToInformation}>
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>
//                 </TouchableOpacity>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }
// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-end',
//     paddingRight: 10,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'right',
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });





//09/09/2025

// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] =useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//         Animated.spring(swipeX, {
//           toValue: 0,
//           useNativeDriver: true
//         }),
//         Animated.spring(swipeY, {
//           toValue: 0,
//           useNativeDriver: true
//         }),
//         Animated.spring(scale, {
//           toValue: 1,
//           useNativeDriver: true
//         })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity onPress={scrollToInformation} style={styles.profileImageContainer}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </TouchableOpacity>

//                 <TouchableOpacity onPress={scrollToInformation}>
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>
//                 </TouchableOpacity>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }


// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });




//trail2
// //app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity onPress={openGallery} style={styles.profileImageContainer}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </TouchableOpacity>

//                 <View style={styles.profileHeader}>
//                   <View>
//                     <Text style={styles.profileName}>
//                       {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                       {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                     </Text>
//                     <Text style={styles.profileDetails}>
//                       {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                     </Text>
//                   </View>
//                   <View style={styles.matchBadge}>
//                     <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                   </View>
//                 </View>
//                 <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                 {/* View Details Button */}
//                 <TouchableOpacity style={styles.viewDetailsButton} onPress={scrollToInformation}>
//                   <Text style={styles.viewDetailsText}>{translations.viewDetails[language]}</Text>
//                   <Ionicons name="arrow-down" size={16} color="#FF6B6B" />
//                 </TouchableOpacity>

//                 {/* Action Buttons */}
//                 <View style={styles.actionButtons}>
//                   <TouchableOpacity
//                     style={styles.interestButton}
//                     onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                   >
//                     <Ionicons name="heart" size={20} color="#FF6B6B" />
//                     <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <MaterialIcons name="call" size={24} color="#4CAF50" />
//                   </TouchableOpacity>
//                   <TouchableOpacity style={styles.actionButton}>
//                     <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                   </TouchableOpacity>
//                 </View>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//     selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   viewDetailsButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'center',
//     backgroundColor: '#f8f8f8',
//     padding: 10,
//     borderRadius: 8,
//     marginBottom: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   viewDetailsText: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//     marginRight: 5,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });




//trail3


//app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Handle tap on profile info area (below image)
//   const handleProfileInfoTap = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: selectedProfile.smoking || translations.notUpdated[language] },
//       { label: 'Drinking Habits', value: selectedProfile.drinking || translations.notUpdated[language] },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <View style={styles.profileImageContainer}>
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <TouchableOpacity
//                       style={styles.galleryIconContainer}
//                       onPress={openGallery}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </TouchableOpacity>
//                   )}
//                 </View>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={0.9}
//                   onPress={handleProfileInfoTap}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* View Details Button */}
//                   <TouchableOpacity style={styles.viewDetailsButton} onPress={scrollToInformation}>
//                     <Text style={styles.viewDetailsText}>{translations.viewDetails[language]}</Text>
//                     <Ionicons name="arrow-down" size={16} color="#FF6B6B" />
//                   </TouchableOpacity>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <TouchableOpacity
//             style={styles.modalBackground}
//             onPress={() => setGalleryModalVisible(false)}
//           />
          
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }
// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: '#f0f0f0',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#fff',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   viewDetailsButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     justifyContent: 'center',
//     backgroundColor: '#f8f8f8',
//     padding: 10,
//     borderRadius: 8,
//     marginBottom: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   viewDetailsText: {
//     color: '#FF6B6B',
//     fontWeight: '600',
//     marginRight: 5,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalBackground: {
//     position: 'absolute',
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });








//10/09/2025

//app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push(`/chat/${existingChat.id}?name=${selectedProfile.firstName}`);
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push(`/chat/${chatRef.id}?name=${selectedProfile.firstName}`);
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
    
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
    
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View
//                       style={styles.galleryIconContainer}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });








//13/09/2025
// app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile - FIXED VERSION
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         // Navigate to existing chat with proper parameters
//         router.push({
//           pathname: `/chat/${existingChat.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         // Navigate to new chat with proper parameters
//         router.push({
//           pathname: `/chat/${chatRef.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
    
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
    
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View
//                       style={styles.galleryIconContainer}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });



















// app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
//       const profilesRef = collection(db, 'Users');
      
//       // Query users by gender
//       const q = query(
//         profilesRef,
//         where('gender', '==', genderToFetch)
//       );
      
//       const querySnapshot = await getDocs(q);
//       const profiles = [];
      
//       querySnapshot.forEach((doc) => {
//         const profileData = doc.data();
//         // Check if profile has required data and exclude current user
//         if ((profileData.firstName || profileData.profilePhoto) && doc.id !== user.id) {
//           profiles.push({
//             id: doc.id,
//             ...profileData
//           });
//         }
//       });
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push({
//           pathname: `/chat/${existingChat.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push({
//           pathname: `/chat/${chatRef.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
    
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
    
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View
//                       style={styles.galleryIconContainer}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//     infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });



//14/09/2025

//app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';
// import { useFirestore } from '../hooks/useFirebase';
// import AsyncStorage from '@react-native-async-storage/async-storage';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();
//   const { fetchProfiles } = useFirestore();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Cache expiration time (5 minutes)
//   const CACHE_EXPIRY = 5 * 60 * 1000;

//   // Get cached data with expiration check
//   const getCachedData = async (key) => {
//     try {
//       const cached = await AsyncStorage.getItem(key);
//       if (!cached) return null;
      
//       const { data, timestamp } = JSON.parse(cached);
//       if (Date.now() - timestamp > CACHE_EXPIRY) {
//         await AsyncStorage.removeItem(key);
//         return null;
//       }
      
//       return data;
//     } catch (error) {
//       console.error('Error getting cached data:', error);
//       return null;
//     }
//   };

//   // Set data to cache with timestamp
//   const setCachedData = async (key, data) => {
//     try {
//       const cacheData = {
//         data,
//         timestamp: Date.now()
//       };
//       await AsyncStorage.setItem(key, JSON.stringify(cacheData));
//     } catch (error) {
//       console.error('Error setting cached data:', error);
//     }
//   };

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
      
//       // Check cache first
//       const cacheKey = `matches_${genderToFetch}`;
//       const cachedProfiles = await getCachedData(cacheKey);
      
//       if (cachedProfiles) {
//         setAllProfiles(cachedProfiles);
//         setFilteredProfiles(cachedProfiles);
        
//         if (cachedProfiles.length > 0) {
//           setSelectedProfile(cachedProfiles[0]);
//           setCurrentProfileIndex(0);
//         } else {
//           setSelectedProfile({
//             id: 'fallback',
//             firstName: 'No profiles',
//             lastName: 'available',
//             profilePhoto: 'https://via.placeholder.com/300',
//             galleryPhotos: []
//           });
//         }
        
//         setHasLoaded(true);
//         setLoading(false);
//         setLoadingProfiles(false);
//         return;
//       }
      
//       // Use the optimized fetchProfiles function
//       const profiles = await fetchProfiles(genderToFetch, 20);
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Cache the results
//       await setCachedData(cacheKey, profiles);
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user, fetchProfiles]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push({
//           pathname: `/chat/${existingChat.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push({
//           pathname: `/chat/${chatRef.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
    
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
    
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View
//                       style={styles.galleryIconContainer}
//                     >
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//     infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });




//17/09/2025
//app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';
// import { useFirestore } from '../hooks/useFirebase';
// import AsyncStorage from '@react-native-async-storage/async-storage';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();
//   const { fetchProfiles } = useFirestore();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Cache expiration time (5 minutes)
//   const CACHE_EXPIRY = 5 * 60 * 1000;

//   // Get cached data with expiration check
//   const getCachedData = async (key) => {
//     try {
//       const cached = await AsyncStorage.getItem(key);
//       if (!cached) return null;
      
//       const { data, timestamp } = JSON.parse(cached);
//       if (Date.now() - timestamp > CACHE_EXPIRY) {
//         await AsyncStorage.removeItem(key);
//         return null;
//       }
      
//       return data;
//     } catch (error) {
//       console.error('Error getting cached data:', error);
//       return null;
//     }
//   };

//   // Set data to cache with timestamp
//   const setCachedData = async (key, data) => {
//     try {
//       const cacheData = {
//         data,
//         timestamp: Date.now()
//       };
//       await AsyncStorage.setItem(key, JSON.stringify(cacheData));
//     } catch (error) {
//       console.error('Error setting cached data:', error);
//     }
//   };

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लオード हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     },
//     verifiedProfile: {
//       ENG: "Verified Profile",
//       HI: "सत्यापित प्रोफाइल"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
    
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
      
//       // Check cache first
//       const cacheKey = `matches_${genderToFetch}`;
//       const cachedProfiles = await getCachedData(cacheKey);
      
//       if (cachedProfiles) {
//         setAllProfiles(cachedProfiles);
//         setFilteredProfiles(cachedProfiles);
        
//         if (cachedProfiles.length > 0) {
//           setSelectedProfile(cachedProfiles[0]);
//           setCurrentProfileIndex(0);
//         } else {
//           setSelectedProfile({
//             id: 'fallback',
//             firstName: 'No profiles',
//             lastName: 'available',
//             profilePhoto: 'https://via.placeholder.com/300',
//             galleryPhotos: []
//           });
//         }
        
//         setHasLoaded(true);
//         setLoading(false);
//         setLoadingProfiles(false);
//         return;
//       }
      
//       // Use the optimized fetchProfiles function
//       const profiles = await fetchProfiles(genderToFetch, 20);
      
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
      
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
      
//       // Cache the results
//       await setCachedData(cacheKey, profiles);
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user, fetchProfiles]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
        
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
        
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
    
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
    
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
    
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
    
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
      
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
      
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
      
//       if (existingChat) {
//         router.push({
//           pathname: `/chat/${existingChat.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
        
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
        
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
        
//         router.push({
//           pathname: `/chat/${chatRef.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
      
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
      
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
      
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
    
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
    
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
    
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
    
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
    
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
    
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
    
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon and Verification Badge */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                  
//                   {/* Verification Badge */}
//                   {selectedProfile.verificationStatus === 'verified' && (
//                     <View style={styles.verificationBadge}>
//                       <Image
//                         source={require('../../assets/badge.png')}
//                         style={styles.verificationBadgeImage}
//                       />
//                     </View>
//                   )}
                  
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View style={styles.galleryIconContainer}>
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
          
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={styles.bottomButtonText}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
            
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
            
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   verificationBadge: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     borderRadius: 12,
//     padding: 4,
//     zIndex: 10,
//   },
//   verificationBadgeImage: {
//     width: 24,
//     height: 24,
//     borderRadius: 12,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//     infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });






//18/09/2025
//app/(tabs)/Matches.jsx

// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';
// import { useFirestore } from '../hooks/useFirebase';
// import AsyncStorage from '@react-native-async-storage/async-storage';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();
//   const { fetchProfiles } = useFirestore();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Cache expiration time (5 minutes)
//   const CACHE_EXPIRY = 5 * 60 * 1000;

//   // Get cached data with expiration check
//   const getCachedData = async (key) => {
//     try {
//       const cached = await AsyncStorage.getItem(key);
//       if (!cached) return null;
     
//       const { data, timestamp } = JSON.parse(cached);
//       if (Date.now() - timestamp > CACHE_EXPIRY) {
//         await AsyncStorage.removeItem(key);
//         return null;
//       }
     
//       return data;
//     } catch (error) {
//       console.error('Error getting cached data:', error);
//       return null;
//     }
//   };

//   // Set data to cache with timestamp
//   const setCachedData = async (key, data) => {
//     try {
//       const cacheData = {
//         data,
//         timestamp: Date.now()
//       };
//       await AsyncStorage.setItem(key, JSON.stringify(cacheData));
//     } catch (error) {
//       console.error('Error setting cached data:', error);
//     }
//   };

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     },
//     verifiedProfile: {
//       ENG: "Verified Profile",
//       HI: "सत्यापित प्रोफाइल"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
   
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
     
//       // Check cache first
//       const cacheKey = `matches_${genderToFetch}`;
//       const cachedProfiles = await getCachedData(cacheKey);
     
//       if (cachedProfiles) {
//         setAllProfiles(cachedProfiles);
//         setFilteredProfiles(cachedProfiles);
       
//         if (cachedProfiles.length > 0) {
//           setSelectedProfile(cachedProfiles[0]);
//           setCurrentProfileIndex(0);
//         } else {
//           setSelectedProfile({
//             id: 'fallback',
//             firstName: 'No profiles',
//             lastName: 'available',
//             profilePhoto: 'https://via.placeholder.com/300',
//             galleryPhotos: []
//           });
//         }
       
//         setHasLoaded(true);
//         setLoading(false);
//         setLoadingProfiles(false);
//         return;
//       }
     
//       // Use the optimized fetchProfiles function
//       const profiles = await fetchProfiles(genderToFetch, 20);
     
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
     
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
     
//       // Cache the results
//       await setCachedData(cacheKey, profiles);
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user, fetchProfiles, getCachedData, setCachedData]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
       
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
       
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
   
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
   
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
   
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
   
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
   
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
     
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
     
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
     
//       if (existingChat) {
//         router.push({
//           pathname: `/chat/${existingChat.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
       
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
       
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
       
//         router.push({
//           pathname: `/chat/${chatRef.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
     
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
     
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
     
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
   
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
   
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
   
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
   
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
   
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
   
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
   
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
   
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon and Verification Badge */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                 
//                   {/* Verification Badge */}
//                   {selectedProfile.verificationStatus === 'verified' && (
//                     <View style={styles.verificationBadge}>
//                       <Image
//                         source={require('../../assets/badge.png')}
//                         style={styles.verificationBadgeImage}
//                       />
//                     </View>
//                   )}
                 
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View style={styles.galleryIconContainer}>
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
         
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={styles.bottomButtonText}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
           
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
           
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   verificationBadge: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     borderRadius: 12,
//     padding: 4,
//     zIndex: 10,
//   },
//   verificationBadgeImage: {
//     width: 24,
//     height: 24,
//     borderRadius: 12,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//     infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });





//20/09/2025
// //app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';
// import { useFirestore } from '../hooks/useFirebase';
// import AsyncStorage from '@react-native-async-storage/async-storage';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();
//   const { fetchProfiles } = useFirestore();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Cache expiration time (5 minutes)
//   const CACHE_EXPIRY = 5 * 60 * 1000;

//   // Get cached data with expiration check
//   const getCachedData = async (key) => {
//     try {
//       const cached = await AsyncStorage.getItem(key);
//       if (!cached) return null;
     
//       const { data, timestamp } = JSON.parse(cached);
//       if (Date.now() - timestamp > CACHE_EXPIRY) {
//         await AsyncStorage.removeItem(key);
//         return null;
//       }
     
//       return data;
//     } catch (error) {
//       console.error('Error getting cached data:', error);
//       return null;
//     }
//   };

//   // Set data to cache with timestamp
//   const setCachedData = async (key, data) => {
//     try {
//       const cacheData = {
//         data,
//         timestamp: Date.now()
//       };
//       await AsyncStorage.setItem(key, JSON.stringify(cacheData));
//     } catch (error) {
//       console.error('Error setting cached data:', error);
//     }
//   };

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     },
//     verifiedProfile: {
//       ENG: "Verified Profile",
//       HI: "सत्यापित प्रोफाइल"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
   
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
     
//       // Check cache first
//       const cacheKey = `matches_${genderToFetch}`;
//       const cachedProfiles = await getCachedData(cacheKey);
     
//       if (cachedProfiles) {
//         setAllProfiles(cachedProfiles);
//         setFilteredProfiles(cachedProfiles);
       
//         if (cachedProfiles.length > 0) {
//           setSelectedProfile(cachedProfiles[0]);
//           setCurrentProfileIndex(0);
//         } else {
//           setSelectedProfile({
//             id: 'fallback',
//             firstName: 'No profiles',
//             lastName: 'available',
//             profilePhoto: 'https://via.placeholder.com/300',
//             galleryPhotos: []
//           });
//         }
       
//         setHasLoaded(true);
//         setLoading(false);
//         setLoadingProfiles(false);
//         return;
//       }
     
//       // Use the optimized fetchProfiles function
//       const profiles = await fetchProfiles(genderToFetch, 20);
     
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
     
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
     
//       // Cache the results
//       await setCachedData(cacheKey, profiles);
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user, fetchProfiles]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
       
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
       
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
   
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
   
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
   
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
   
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
   
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
     
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
     
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
     
//       if (existingChat) {
//         router.push({
//           pathname: `/chat/${existingChat.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
       
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
       
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
       
//         router.push({
//           pathname: `/chat/${chatRef.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
     
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
     
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
     
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
   
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
   
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
   
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
   
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
   
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
   
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
   
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
   
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon and Verification Badge */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                 
//                   {/* Verification Badge */}
//                   {selectedProfile.verificationStatus === 'verified' && (
//                     <View style={styles.verificationBadge}>
//                       <Image
//                         source={require('../../assets/badge.png')}
//                         style={styles.verificationBadgeImage}
//                       />
//                     </View>
//                   )}
                 
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View style={styles.galleryIconContainer}>
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={styles.interestButton}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                     >
//                       <Ionicons name="heart" size={20} color="#FF6B6B" />
//                       <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
         
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 80 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={styles.bottomButtonText}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
           
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
           
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 80,
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   verificationBadge: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     borderRadius: 12,
//     padding: 4,
//     zIndex: 10,
//   },
//   verificationBadgeImage: {
//     width: 24,
//     height: 24,
//     borderRadius: 12,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 15,
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//     flex: 1,
//     flexDirection: 'row',
//     justifyContent: 'center',
//     alignItems: 'center',
//     padding: 15,
//     borderRadius: 10,
//     borderWidth: 1,
//     borderColor: '#eee',
//     marginHorizontal: 5,
//     backgroundColor: '#f9f9f9',
//   },
//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//     infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });


//23/09/2025
// app/(tabs)/Matches.jsx
// import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
// import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
// import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot, updateDoc } from 'firebase/firestore';
// import { db } from '../../config/firebase';
// import { useLanguage } from '../context/LanguageContext';
// import { useAuth } from '../context/AuthContext';
// import { useRouter, useLocalSearchParams } from 'expo-router';
// import { useFocusEffect } from '@react-navigation/native';
// import { useFirestore } from '../hooks/useFirebase';
// import AsyncStorage from '@react-native-async-storage/async-storage';

// const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// export default function Matches() {
//   const [selectedOption, setSelectedOption] = useState('Newly Joined');
//   const [selectedProfile, setSelectedProfile] = useState(null);
//   const [allProfiles, setAllProfiles] = useState([]);
//   const [filteredProfiles, setFilteredProfiles] = useState([]);
//   const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [loadingProfiles, setLoadingProfiles] = useState(true);
//   const [showFullMobile, setShowFullMobile] = useState(false);
//   const [galleryModalVisible, setGalleryModalVisible] = useState(false);
//   const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
//   const [hasLoaded, setHasLoaded] = useState(false);
//   const [sentInterests, setSentInterests] = useState({});
//   const { user } = useAuth();
//   const { language } = useLanguage();
//   const router = useRouter();
//   const params = useLocalSearchParams();
//   const { fetchProfiles } = useFirestore();

//   // Animation values for swipe gestures
//   const swipeX = useRef(new Animated.Value(0)).current;
//   const swipeY = useRef(new Animated.Value(0)).current;
//   const scale = useRef(new Animated.Value(1)).current;

//   // Ref for scroll view
//   const scrollViewRef = useRef(null);

//   const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

//   // Cache expiration time (5 minutes)
//   const CACHE_EXPIRY = 5 * 60 * 1000;

//   // Get cached data with expiration check
//   const getCachedData = async (key) => {
//     try {
//       const cached = await AsyncStorage.getItem(key);
//       if (!cached) return null;
     
//       const { data, timestamp } = JSON.parse(cached);
//       if (Date.now() - timestamp > CACHE_EXPIRY) {
//         await AsyncStorage.removeItem(key);
//         return null;
//       }
     
//       return data;
//     } catch (error) {
//       console.error('Error getting cached data:', error);
//       return null;
//     }
//   };

//   // Set data to cache with timestamp
//   const setCachedData = async (key, data) => {
//     try {
//       const cacheData = {
//         data,
//         timestamp: Date.now()
//       };
//       await AsyncStorage.setItem(key, JSON.stringify(cacheData));
//     } catch (error) {
//       console.error('Error setting cached data:', error);
//     }
//   };

//   // Load sent interests
//   const loadSentInterests = useCallback(async () => {
//     if (!user?.id) return;
    
//     try {
//       const interestsRef = collection(db, 'Users', user.id, 'sentInterests');
//       const q = query(interestsRef);
      
//       const querySnapshot = await getDocs(q);
//       const interestsMap = {};
      
//       querySnapshot.forEach((doc) => {
//         const interestData = doc.data();
//         if (interestData.toUserId) {
//           interestsMap[interestData.toUserId] = interestData.status || 'pending';
//         }
//       });
      
//       setSentInterests(interestsMap);
//     } catch (error) {
//       console.error('Error loading sent interests:', error);
//     }
//   }, [user]);

//   // Translations - memoized to prevent recreation
//   const translations = useMemo(() => ({
//     newlyJoined: {
//       ENG: "Newly Joined",
//       HI: "नए जुड़े"
//     },
//     recentlyActive: {
//       ENG: "Recently Active",
//       HI: "हाल ही में सक्रिय"
//     },
//     mostViewed: {
//       ENG: "Most Viewed",
//       HI: "सबसे अधिक देखे गए"
//     },
//     personalInfo: {
//       ENG: "Personal Information",
//       HI: "व्यक्तिगत जानकारी"
//     },
//     contactInfo: {
//       ENG: "Contact Information",
//       HI: "संपर्क जानकारी"
//     },
//     familyInfo: {
//       ENG: "Family Information",
//       HI: "पारिवारिक जानकारी"
//     },
//     aboutMyself: {
//       ENG: "About Myself",
//       HI: "मेरे बारे में"
//     },
//     lifestyle: {
//       ENG: "Lifestyle",
//       HI: "जीवन शैली"
//     },
//     profilesYouMayLike: {
//       ENG: "Profiles you may like",
//       HI: "आपको पसंद आ सकने वाले प्रोफाइल"
//     },
//     seeAll: {
//       ENG: "See All",
//       HI: "सभी देखें"
//     },
//     dontShow: {
//       ENG: "Don't Show Again",
//       HI: "फिर से न दिखाएं"
//     },
//     sendMessage: {
//       ENG: "Send Message",
//       HI: "संदेश भेजें"
//     },
//     sendInterest: {
//       ENG: "Send Interest",
//       HI: "रुचि भेजें"
//     },
//     interestSent: {
//       ENG: "Interest Sent",
//       HI: "रुचि भेज दी गई"
//     },
//     activeToday: {
//       ENG: "Active today",
//       HI: "आज सक्रिय"
//     },
//     match: {
//       ENG: "match",
//       HI: "मेल"
//     },
//     notUpdated: {
//       ENG: "Not updated",
//       HI: "अपडेट नहीं किया गया"
//     },
//     loading: {
//       ENG: "Loading...",
//       HI: "लोड हो रहा है..."
//     },
//     mobileNumber: {
//       ENG: "Mobile Number",
//       HI: "मोबाइल नंबर"
//     },
//     upgradeToView: {
//       ENG: "Upgrade to view",
//       HI: "देखने के लिए अपग्रेड करें"
//     },
//     viewGallery: {
//       ENG: "View Gallery",
//       HI: "गैलरी देखें"
//     },
//     close: {
//       ENG: "Close",
//       HI: "बंद करें"
//     },
//     noProfilesAvailable: {
//       ENG: "No profiles available",
//       HI: "कोई प्रोफाइल उपलब्ध नहीं"
//     },
//     viewDetails: {
//       ENG: "View Details",
//       HI: "विवरण देखें"
//     },
//     verifiedProfile: {
//       ENG: "Verified Profile",
//       HI: "सत्यापित प्रोफाइल"
//     }
//   }), []);

//   // Check if we have a specific profile from params
//   useEffect(() => {
//     if (params.selectedProfile) {
//       try {
//         const profile = JSON.parse(params.selectedProfile);
//         setSelectedProfile(profile);
//         setFilteredProfiles([profile]);
//         setCurrentProfileIndex(0);
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profile from params:', error);
//       }
//     } else if (params.profiles && params.viewAll === 'true') {
//       try {
//         const profiles = JSON.parse(params.profiles);
//         setFilteredProfiles(profiles.map(p => p.fullData || p));
//         setAllProfiles(profiles.map(p => p.fullData || p));
//         if (profiles.length > 0) {
//           setSelectedProfile(profiles[0].fullData || profiles[0]);
//           setCurrentProfileIndex(0);
//         }
//         setLoading(false);
//         setLoadingProfiles(false);
//         setHasLoaded(true);
//       } catch (error) {
//         console.error('Error parsing profiles from params:', error);
//       }
//     }
//   }, [params]);

//   // Fetch all profiles from the opposite gender - memoized to prevent recreation
//   const fetchAllProfiles = useCallback(async () => {
//     if (!user) return;
   
//     try {
//       setLoading(true);
//       const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
     
//       // Check cache first
//       const cacheKey = `matches_${genderToFetch}`;
//       const cachedProfiles = await getCachedData(cacheKey);
     
//       if (cachedProfiles) {
//         setAllProfiles(cachedProfiles);
//         setFilteredProfiles(cachedProfiles);
       
//         if (cachedProfiles.length > 0) {
//           setSelectedProfile(cachedProfiles[0]);
//           setCurrentProfileIndex(0);
//         } else {
//           setSelectedProfile({
//             id: 'fallback',
//             firstName: 'No profiles',
//             lastName: 'available',
//             profilePhoto: 'https://via.placeholder.com/300',
//             galleryPhotos: []
//           });
//         }
       
//         setHasLoaded(true);
//         setLoading(false);
//         setLoadingProfiles(false);
//         return;
//       }
     
//       // Use the optimized fetchProfiles function
//       const profiles = await fetchProfiles(genderToFetch, 20);
     
//       setAllProfiles(profiles);
//       setFilteredProfiles(profiles);
     
//       // Set the first profile as selected if available
//       if (profiles.length > 0) {
//         setSelectedProfile(profiles[0]);
//         setCurrentProfileIndex(0);
//       } else {
//         // Set a fallback profile if no profiles found
//         setSelectedProfile({
//           id: 'fallback',
//           firstName: 'No profiles',
//           lastName: 'available',
//           profilePhoto: 'https://via.placeholder.com/300',
//           galleryPhotos: []
//         });
//       }
     
//       // Cache the results
//       await setCachedData(cacheKey, profiles);
//       setHasLoaded(true);
//     } catch (error) {
//       console.error('Error fetching profiles:', error);
//       // Set fallback data on error
//       setSelectedProfile({
//         id: 'error',
//         firstName: 'Error loading',
//         lastName: 'profile',
//         profilePhoto: 'https://via.placeholder.com/300',
//         galleryPhotos: []
//       });
//     } finally {
//       setLoading(false);
//       setLoadingProfiles(false);
//     }
//   }, [user, fetchProfiles]);

//   // PanResponder for swipe gestures (only on profile card)
//   const panResponder = useRef(
//     PanResponder.create({
//       onStartShouldSetPanResponder: () => true,
//       onMoveShouldSetPanResponder: (_, gestureState) => {
//         return Math.abs(gestureState.dx) > 10;
//       },
//       onPanResponderMove: (_, gestureState) => {
//         swipeX.setValue(gestureState.dx);
//         swipeY.setValue(gestureState.dy);
       
//         // Scale down slightly during drag
//         scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
//       },
//       onPanResponderRelease: (_, gestureState) => {
//         // If swipe distance is significant, navigate to next/previous profile
//         if (Math.abs(gestureState.dx) > 100) {
//           if (gestureState.dx > 0) {
//             // Swipe right - previous profile
//             goToPreviousProfile();
//           } else {
//             // Swipe left - next profile
//             goToNextProfile();
//           }
//         }
       
//         // Reset animation values
//         Animated.parallel([
//           Animated.spring(swipeX, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(swipeY, {
//             toValue: 0,
//             useNativeDriver: true
//           }),
//           Animated.spring(scale, {
//             toValue: 1,
//             useNativeDriver: true
//           })
//         ]).start();
//       }
//     })
//   ).current;

//   // Navigate to next profile
//   const goToNextProfile = () => {
//     if (filteredProfiles.length === 0) return;
   
//     const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
//     setCurrentProfileIndex(nextIndex);
//     setSelectedProfile(filteredProfiles[nextIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Navigate to previous profile
//   const goToPreviousProfile = () => {
//     if (filteredProfiles.length === 0) return;
   
//     const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
//     setCurrentProfileIndex(prevIndex);
//     setSelectedProfile(filteredProfiles[prevIndex]);
//     // Reset mobile number visibility
//     setShowFullMobile(false);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Remove profile from list (Don't Show functionality)
//   const removeProfile = () => {
//     if (filteredProfiles.length <= 1) {
//       Alert.alert('Info', 'This is the only profile available');
//       return;
//     }
   
//     // Create a new array without the current profile
//     const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
//     setFilteredProfiles(updatedProfiles);
   
//     // If we removed the last profile, go to the previous one
//     let newIndex = currentProfileIndex;
//     if (currentProfileIndex >= updatedProfiles.length) {
//       newIndex = updatedProfiles.length - 1;
//     }
   
//     // Set the new current profile
//     setCurrentProfileIndex(newIndex);
//     setSelectedProfile(updatedProfiles[newIndex]);
//     // Scroll to top when changing profiles
//     scrollViewRef.current?.scrollTo({ y: 0, animated: true });
//   };

//   // Scroll to information section
//   const scrollToInformation = () => {
//     scrollViewRef.current?.scrollTo({ y: 400, animated: true });
//   };

//   // Send interest to a profile
//   const sendInterest = async (profileId, profileName) => {
//     try {
//       if (!user?.id) {
//         Alert.alert('Error', 'User not available');
//         return;
//       }

//       // Check if interest was already sent
//       if (sentInterests[profileId]) {
//         Alert.alert('Info', 'Interest already sent to this profile');
//         return;
//       }

//       // Add to sent interests
//       const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
//       const interestDoc = await addDoc(sentInterestRef, {
//         toUserId: profileId,
//         toUserName: profileName,
//         timestamp: serverTimestamp(),
//         status: 'pending'
//       });

//       // Add to received interests of the target user
//       const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
//       await addDoc(receivedInterestRef, {
//         fromUserId: user.id,
//         fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
//         fromUserImage: user.profilePhoto || '',
//         timestamp: serverTimestamp(),
//         status: 'pending',
//         interestId: interestDoc.id
//       });

//       // Update local state
//       setSentInterests(prev => ({
//         ...prev,
//         [profileId]: 'pending'
//       }));

//       Alert.alert('Success', 'Interest sent successfully!');
//     } catch (error) {
//       console.error('Error sending interest:', error);
//       Alert.alert('Error', 'Failed to send interest. Please try again.');
//     }
//   };

//   // Start a chat with the selected profile
//   const startChat = async () => {
//     if (!selectedProfile || !user?.id) {
//       Alert.alert('Error', 'Cannot start chat. User information missing.');
//       return;
//     }

//     try {
//       // Check if chat already exists
//       const chatsRef = collection(db, 'chats');
//       const q = query(
//         chatsRef,
//         where('participantIds', 'array-contains', user.id)
//       );
     
//       const querySnapshot = await getDocs(q);
//       let existingChat = null;
     
//       querySnapshot.forEach((doc) => {
//         const chatData = doc.data();
//         if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
//           existingChat = { id: doc.id, ...chatData };
//         }
//       });
     
//       if (existingChat) {
//         router.push({
//           pathname: `/chat/${existingChat.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       } else {
//         // Create new chat
//         const chatData = {
//           participants: [
//             `${user.firstName} ${user.lastName}`,
//             `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
//           ],
//           participantIds: [user.id, selectedProfile.id],
//           lastMessage: '',
//           lastMessageTime: serverTimestamp(),
//           createdAt: serverTimestamp()
//         };
       
//         const chatRef = await addDoc(collection(db, 'chats'), chatData);
       
//         // Create participants subcollection
//         await Promise.all([
//           addDoc(collection(chatRef, 'participants'), {
//             userId: user.id,
//             userName: `${user.firstName} ${user.lastName}`,
//             joinedAt: serverTimestamp()
//           }),
//           addDoc(collection(chatRef, 'participants'), {
//             userId: selectedProfile.id,
//             userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
//             joinedAt: serverTimestamp()
//           })
//         ]);
       
//         router.push({
//           pathname: `/chat/${chatRef.id}`,
//           params: {
//             name: selectedProfile.firstName || 'User',
//             profileId: selectedProfile.id
//           }
//         });
//       }
//     } catch (error) {
//       console.error('Error starting chat:', error);
//       Alert.alert('Error', 'Failed to start chat. Please try again.');
//     }
//   };

//   // Calculate age from date of birth
//   const calculateAge = (dateOfBirth) => {
//     if (!dateOfBirth) return '';
//     try {
//       // Handle different date formats
//       let birthDate;
//       if (dateOfBirth.includes('/')) {
//         const [day, month, year] = dateOfBirth.split('/');
//         birthDate = new Date(`${year}-${month}-${day}`);
//       } else {
//         birthDate = new Date(dateOfBirth);
//       }
     
//       const today = new Date();
//       let age = today.getFullYear() - birthDate.getFullYear();
//       const monthDiff = today.getMonth() - birthDate.getMonth();
     
//       if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
//         age--;
//       }
     
//       return age;
//     } catch (error) {
//       return '';
//     }
//   };

//   // Format mobile number with hidden digits
//   const formatMobileNumber = (mobileNumber) => {
//     if (!mobileNumber) return translations.notUpdated[language];
//     if (showFullMobile) return mobileNumber;
   
//     // Show first 2 digits and hide the rest with *
//     if (mobileNumber.length > 2) {
//       return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
//     }
//     return mobileNumber;
//   };

//   // Format personal information data
//   const getPersonalInfo = () => {
//     if (!selectedProfile) return [];
   
//     return [
//       { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
//       { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
//       { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
//       { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
//       { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
//       { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
//       { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
//       { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
//       { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
//       { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
//       { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
//       { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
//       { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
//       { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
//       { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
//       { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
//       { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
//       { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
//     ];
//   };

//   // Format contact information data
//   const getContactInfo = () => {
//     if (!selectedProfile) return [];
   
//     return [
//       {
//         label: translations.mobileNumber[language],
//         value: formatMobileNumber(selectedProfile.mobileNumber),
//         icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
//         onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
//       },
//       { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
//     ];
//   };

//   // Format family information data
//   const getFamilyInfo = () => {
//     if (!selectedProfile) return [];
   
//     const familyInfo = selectedProfile.familyInfo || {};
//     return [
//       { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
//       { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
//       { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
//       { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
//       { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
//       { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
//     ];
//   };

//   // Format lifestyle information data
//   const getLifestyleInfo = () => {
//     if (!selectedProfile) return [];
   
//     // Format alcohol information
//     let alcoholInfo = translations.notUpdated[language];
//     if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
//       alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
//     } else if (selectedProfile.drinksAlcohol) {
//       alcoholInfo = selectedProfile.drinksAlcohol;
//     }
   
//     // Format tobacco information
//     let tobaccoInfo = translations.notUpdated[language];
//     if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
//       tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
//     } else if (selectedProfile.usesTobacco) {
//       tobaccoInfo = selectedProfile.usesTobacco;
//     }
   
//     // Format disability information
//     const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
   
//     return [
//       { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
//       { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
//       { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
//       { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
//       { label: 'Smoking Habits', value: tobaccoInfo },
//       { label: 'Drinking Habits', value: alcoholInfo },
//       { label: 'Disability', value: disabilityInfo },
//     ];
//   };

//   // Open gallery with all images
//   const openGallery = () => {
//     setSelectedGalleryImageIndex(0);
//     setGalleryModalVisible(true);
//   };

//   // Get all images including profile photo and gallery photos
//   const getAllImages = () => {
//     if (!selectedProfile) return [];
//     const images = [];
//     if (selectedProfile.profilePhoto) {
//       images.push(selectedProfile.profilePhoto);
//     }
//     if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
//       images.push(...selectedProfile.galleryPhotos);
//     }
//     return images;
//   };

//   // Get total photo count
//   const getTotalPhotoCount = () => {
//     return getAllImages().length;
//   };

//   // Manual refresh function
//   const refreshProfiles = () => {
//     setHasLoaded(false);
//     setLoading(true);
//     setLoadingProfiles(true);
//     fetchAllProfiles();
//     loadSentInterests();
//   };

//   // Navigate to Upgrade screen
//   const navigateToUpgrade = () => {
//     router.push('/(tabs)/Upgrade');
//   };

//   // Load data only once when screen focuses
//   useFocusEffect(
//     useCallback(() => {
//       if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
//         fetchAllProfiles();
//         loadSentInterests();
//       }

//       // Cleanup function to reset loading state when screen loses focus
//       return () => {
//         // Keep the data but reset loading states if needed
//       };
//     }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles, loadSentInterests])
//   );

//   if (loading) {
//     return (
//       <SafeAreaView style={styles.safeArea}>
//         <View style={styles.loadingContainer}>
//           <ActivityIndicator size="large" color="#FF6B6B" />
//           <Text style={styles.loadingText}>{translations.loading[language]}</Text>
//         </View>
//       </SafeAreaView>
//     );
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <View style={styles.container}>
//         {/* Header */}
//         <View style={styles.header}>
//           <View style={styles.toggleContainer}>
//             <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
//               <Text style={styles.toggleText}>Regular</Text>
//             </TouchableOpacity>
//             <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
//               <Text style={styles.toggleText}>Prime</Text>
//             </TouchableOpacity>
//           </View>
//           <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
//             <Ionicons name="refresh" size={24} color="#FF6B6B" />
//           </TouchableOpacity>
//         </View>

//         {/* Options */}
//         <View style={styles.optionsContainer}>
//           {options.map((option) => (
//             <TouchableOpacity
//               key={option}
//               style={[styles.option, selectedOption === option && styles.selectedOption]}
//               onPress={() => setSelectedOption(option)}
//             >
//               <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
//                 {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
//               </Text>
//             </TouchableOpacity>
//           ))}
//         </View>

//         <ScrollView
//           ref={scrollViewRef}
//           contentContainerStyle={styles.scrollContent}
//           showsVerticalScrollIndicator={true}
//           scrollEventThrottle={16}
//         >
//           {/* Profile Section with Swipe Gestures */}
//           {selectedProfile ? (
//             <View style={styles.profileSection}>
//               {/* Swipeable Profile Card */}
//               <Animated.View
//                 style={[
//                   styles.profileContainer,
//                   {
//                     transform: [
//                       { translateX: swipeX },
//                       { translateY: swipeY },
//                       { scale: scale }
//                     ]
//                   }
//                 ]}
//                 {...panResponder.panHandlers}
//               >
//                 {/* Main Profile Image with Gallery Icon and Verification Badge */}
//                 <TouchableOpacity
//                   style={styles.profileImageContainer}
//                   onPress={openGallery}
//                   activeOpacity={0.9}
//                 >
//                   <Image
//                     source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
//                     style={styles.profileImage}
//                     resizeMode="cover"
//                   />
                 
//                   {/* Verification Badge */}
//                   {selectedProfile.verificationStatus === 'verified' && (
//                     <View style={styles.verificationBadge}>
//                       <Image
//                         source={require('../../assets/badge.png')}
//                         style={styles.verificationBadgeImage}
//                       />
//                     </View>
//                   )}
                 
//                   {/* Gallery Icon with Count (bottom-right corner) */}
//                   {getTotalPhotoCount() > 0 && (
//                     <View style={styles.galleryIconContainer}>
//                       <Ionicons name="images" size={20} color="#fff" />
//                       <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
//                     </View>
//                   )}
//                 </TouchableOpacity>

//                 {/* Profile Info Area - Tappable for scrolling down */}
//                 <TouchableOpacity
//                   activeOpacity={1}
//                   style={styles.profileInfoArea}
//                 >
//                   <View style={styles.profileHeader}>
//                     <View>
//                       <Text style={styles.profileName}>
//                         {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
//                         {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
//                       </Text>
//                       <Text style={styles.profileDetails}>
//                         {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
//                       </Text>
//                     </View>
//                     <View style={styles.matchBadge}>
//                       <Text style={styles.matchText}>99% {translations.match[language]}</Text>
//                     </View>
//                   </View>
//                   <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

//                   {/* Action Buttons */}
//                   <View style={styles.actionButtons}>
//                     <TouchableOpacity
//                       style={[
//                         styles.interestButton,
//                         sentInterests[selectedProfile.id] && styles.interestSentButton
//                       ]}
//                       onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
//                       disabled={!!sentInterests[selectedProfile.id]}
//                     >
//                       {sentInterests[selectedProfile.id] ? (
//                         <>
//                           <Ionicons name="checkmark" size={20} color="#4CAF50" />
//                           <Text style={[styles.interestButtonText, styles.interestSentText]}>
//                             {translations.interestSent[language]}
//                           </Text>
//                         </>
//                       ) : (
//                         <>
//                           <Ionicons name="heart" size={20} color="#FF6B6B" />
//                           <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
//                         </>
//                       )}
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <MaterialIcons name="call" size={24} color="#4CAF50" />
//                     </TouchableOpacity>
//                     <TouchableOpacity style={styles.actionButton}>
//                       <FontAwesome name="whatsapp" size={24} color="#25D366" />
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               </Animated.View>
//             </View>
//           ) : (
//             <View style={styles.noProfilesContainer}>
//               <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
//             </View>
//           )}

//           {/* Information Sections */}
//           {selectedProfile && (
//             <>
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getPersonalInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               {/* Contact Information Section */}
//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getContactInfo().map((item, index) => (
//                     <TouchableOpacity
//                       key={index}
//                       style={styles.infoListItem}
//                       onPress={item.onPress}
//                       disabled={!item.onPress}
//                     >
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <View style={styles.infoValueContainer}>
//                         <Text style={styles.infoValue}>{item.value}</Text>
//                         {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
//                       </View>
//                     </TouchableOpacity>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getFamilyInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
//                 <Text style={styles.aboutText}>
//                   {selectedProfile?.aboutMe || 'No description available yet.'}
//                 </Text>
//               </View>

//               <View style={styles.section}>
//                 <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
//                 <View style={styles.infoList}>
//                   {getLifestyleInfo().map((item, index) => (
//                     <View key={index} style={styles.infoListItem}>
//                       <View style={styles.infoLabelContainer}>
//                         <Text style={styles.infoLabel}>{item.label}</Text>
//                       </View>
//                       <Text style={styles.colon}>:</Text>
//                       <Text style={styles.infoValue}>{item.value}</Text>
//                     </View>
//                   ))}
//                 </View>
//               </View>
//             </>
//           )}
         
//           {/* Spacer for bottom buttons */}
//           <View style={{ height: 100 }} />
//         </ScrollView>

//         {/* Fixed Bottom Action Buttons */}
//         {selectedProfile && filteredProfiles.length > 0 && (
//           <View style={styles.bottomActions}>
//             <TouchableOpacity
//               style={styles.bottomButton}
//               onPress={removeProfile}
//             >
//               <AntDesign name="close" size={20} color="#FF6B6B" />
//               <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.bottomButton, styles.messageButton]}
//               onPress={startChat}
//             >
//               <Feather name="message-square" size={20} color="#fff" />
//               <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
//             </TouchableOpacity>
//           </View>
//         )}

//         {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
//         {selectedProfile && filteredProfiles.length > 1 && (
//           <>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.prevArrow]}
//               onPress={goToPreviousProfile}
//             >
//               <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//             <TouchableOpacity
//               style={[styles.navArrow, styles.nextArrow]}
//               onPress={goToNextProfile}
//             >
//               <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
//             </TouchableOpacity>
//           </>
//         )}
//       </View>

//       {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
//       <Modal
//         visible={galleryModalVisible}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setGalleryModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>
//             <ScrollView
//               horizontal
//               pagingEnabled
//               showsHorizontalScrollIndicator={false}
//               style={styles.galleryScrollView}
//               onMomentumScrollEnd={(event) => {
//                 const contentOffset = event.nativeEvent.contentOffset;
//                 const viewSize = event.nativeEvent.layoutMeasurement;
//                 const pageNum = Math.floor(contentOffset.x / viewSize.width);
//                 setSelectedGalleryImageIndex(pageNum);
//               }}
//             >
//               {getAllImages().map((image, index) => (
//                 <View key={index} style={styles.gallerySlide}>
//                   <Image
//                     source={{ uri: image }}
//                     style={styles.modalImage}
//                     resizeMode="contain"
//                   />
//                 </View>
//               ))}
//             </ScrollView>
           
//             {/* Image counter */}
//             <View style={styles.imageCounter}>
//               <Text style={styles.imageCounterText}>
//                 {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
//               </Text>
//             </View>
           
//             <TouchableOpacity
//               style={styles.closeButton}
//               onPress={() => setGalleryModalVisible(false)}
//             >
//               <Entypo name="cross" size={24} color="#fff" />
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: '#fff',
//   },
//   container: {
//     flex: 1,
//     position: 'relative',
//   },
//   scrollContent: {
//     paddingBottom: 10, // Increased padding for bottom buttons
//   },
//   header: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   toggleContainer: {
//     flexDirection: 'row',
//     backgroundColor: 'rgba(255, 107, 107, 0.1)',
//     borderRadius: 20,
//     padding: 2,
//   },
//   toggleButton: {
//     paddingHorizontal: 15,
//     paddingVertical: 8,
//     borderRadius: 15,
//   },
//   activeToggle: {
//     backgroundColor: '#FF6B6B',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 2,
//   },
//   toggleText: {
//     fontWeight: 'bold',
//     color: '#555',
//   },
//   activeToggleText: {
//     color: '#fff',
//   },
//   languageButton: {
//     padding: 5,
//   },
//   optionsContainer: {
//     flexDirection: 'row',
//     paddingHorizontal: 15,
//     marginBottom: 15,
//   },
//   option: {
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     marginRight: 10,
//     borderRadius: 15,
//     borderWidth: 1,
//     borderColor: '#eee',
//   },
//   selectedOption: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   optionText: {
//     color: '#555',
//     fontSize: 12,
//   },
//   selectedOptionText: {
//     color: '#fff',
//   },
//   profileSection: {
//     position: 'relative',
//     marginBottom: 10,
//   },
//   profileContainer: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: '#eee',
//   },
//   profileImageContainer: {
//     position: 'relative',
//     marginBottom: 15,
//   },
//   profileImage: {
//     width: '100%',
//     height: 300,
//     borderRadius: 10,
//   },
//   verificationBadge: {
//     position: 'absolute',
//     top: 10,
//     left: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     borderRadius: 12,
//     padding: 4,
//     zIndex: 10,
//   },
//   verificationBadgeImage: {
//     width: 24,
//     height: 24,
//     borderRadius: 12,
//   },
//   profileInfoArea: {
//     // This makes the entire area below the image tappable for scrolling
//   },
//   navArrow: {
//     position: 'absolute',
//     top: '40%',
//     zIndex: 10,
//     backgroundColor: 'rgba(255, 255, 255, 0.9)',
//     width: 40,
//     height: 60,
//     borderRadius: 8,
//     justifyContent: 'center',
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.3,
//     shadowRadius: 4,
//     elevation: 5,
//   },
//   prevArrow: {
//     left: 10,
//     borderTopRightRadius: 20,
//     borderBottomRightRadius: 20,
//   },
//   nextArrow: {
//     right: 10,
//     borderTopLeftRadius: 20,
//     borderBottomLeftRadius: 20,
//   },
//   galleryIconContainer: {
//     position: 'absolute',
//     bottom: 10,
//     right: 10,
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     padding: 5,
//     borderRadius: 15,
//   },
//   galleryCount: {
//     color: '#fff',
//     fontWeight: 'bold',
//     marginLeft: 5,
//     fontSize: 14,
//   },
//   profileHeader: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'flex-start',
//     marginBottom: 10,
//   },
//   profileName: {
//     fontSize: 20,
//     fontWeight: 'bold',
//     marginBottom: 5,
//     color: '#333',
//   },
//   profileDetails: {
//     color: '#666',
//     marginBottom: 2,
//     fontSize: 14,
//   },
//   matchBadge: {
//     backgroundColor: '#FF6B6B',
//     paddingHorizontal: 10,
//     paddingVertical: 5,
//     borderRadius: 15,
//   },
//   matchText: {
//     color: '#fff',
//     fontWeight: 'bold',
//     fontSize: 12,
//   },
//   lastSeen: {
//     color: '#4CAF50',
//     marginBottom: 15,
//     fontSize: 12,
//   },
//   actionButtons: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     marginVertical: 10,
//   },
//   interestButton: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     backgroundColor: '#FFF0F0',
//     paddingHorizontal: 15,
//     paddingVertical: 10,
//     borderRadius: 25,
//     flex: 1,
//     marginRight: 10,
//     justifyContent: 'center',
//   },
//   interestSentButton: {
//     backgroundColor: '#E8F5E9',
//   },
//   interestButtonText: {
//     color: '#FF6B6B',
//     fontWeight: 'bold',
//     marginLeft: 5,
//   },
//   interestSentText: {
//     color: '#4CAF50',
//   },
//   actionButton: {
//     padding: 10,
//     borderRadius: 50,
//     borderWidth: 1,
//     borderColor: '#eee',
//     width: 50,
//     alignItems: 'center',
//     backgroundColor: '#f9f9f9',
//     marginHorizontal: 5,
//   },
//   bottomActions: {
//     flexDirection: 'row',
//     padding: 20, // Increased padding
//     borderTopWidth: 1,
//     borderTopColor: '#eee',
//     backgroundColor: '#fff',
//     position: 'absolute',
//     bottom: 0,
//     left: 0,
//     right: 0,
//     ...Platform.select({
//       ios: {
//         shadowColor: '#000',
//         shadowOffset: { width: 0, height: -2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 10,
//       },
//     }),
//   },
//   bottomButton: {
//   flex: 1,
//   flexDirection: 'row',
//   justifyContent: 'center',
//   alignItems: 'center',
//   padding: 5,
//   borderRadius: 10,
//   borderWidth: 10,
//   borderColor: '#eee',
//   marginHorizontal: 10, // Increased margin
//   backgroundColor: '#f9f9f9',
//   marginBottom: 2, // ✅ space outside the button
// },

//   messageButton: {
//     backgroundColor: '#FF6B6B',
//     borderColor: '#FF6B6B',
//   },
//   bottomButtonText: {
//     marginLeft: 5,
//     fontWeight: '600',
//   },
//   messageButtonText: {
//     color: '#fff',
//   },
//   section: {
//     padding: 15,
//     borderBottomWidth: 1,
//     borderBottomColor: 'rgba(0, 0, 0, 0.1)',
//     backgroundColor: '#fff',
//   },
//   sectionTitle: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 15,
//     color: '#333',
//   },
//   infoList: {
//     // Single column layout
//   },
//   infoListItem: {
//     flexDirection: 'row',
//     justifyContent: 'space-between',
//     alignItems: 'center',
//     marginBottom: 12,
//     paddingVertical: 5,
//   },
//   infoLabelContainer: {
//     flex: 1,
//     alignItems: 'flex-start',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   infoLabel: {
//     color: '#666',
//     fontSize: 14,
//     fontWeight: '500',
//     textAlign: 'left',
//     marginLeft: 0,
//     paddingLeft: 0,
//   },
//   colon: {
//     fontWeight: 'bold',
//     color: '#333',
//     fontSize: 14,
//     width: 10,
//     textAlign: 'center',
//     position: 'absolute',
//     left: '50%',
//     marginLeft: -5,
//   },
//   infoValue: {
//     fontWeight: '500',
//     color: '#333',
//     fontSize: 14,
//     flex: 1,
//     marginLeft: 20,
//   },
//   infoValueContainer: {
//     flexDirection: 'row',
//     alignItems: 'center',
//     flex: 1,
//     marginLeft: 20,
//   },
//   lockIcon: {
//     marginLeft: 4,
//   },
//   aboutText: {
//     lineHeight: 22,
//     color: '#555',
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   loadingText: {
//     marginTop: 10,
//     color: '#666',
//   },
//   noProfilesContainer: {
//     padding: 40,
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
//   noProfilesText: {
//     fontSize: 18,
//     color: '#666',
//     textAlign: 'center',
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.9)',
//   },
//   modalContent: {
//     width: '100%',
//     height: '100%',
//     position: 'relative',
//   },
//   galleryScrollView: {
//     flex: 1,
//   },
//   gallerySlide: {
//     width: screenWidth,
//     height: '100%',
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalImage: {
//     width: '100%',
//     height: '100%',
//   },
//   imageCounter: {
//     position: 'absolute',
//     top: 40,
//     alignSelf: 'center',
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     paddingHorizontal: 12,
//     paddingVertical: 6,
//     borderRadius: 15,
//   },
//   imageCounterText: {
//     color: '#fff',
//     fontWeight: 'bold',
//   },
//   closeButton: {
//     position: 'absolute',
//     top: 40,
//     right: 20,
//     backgroundColor: 'rgba(0, 0, 0, 0.5)',
//     borderRadius: 20,
//     padding: 8,
//     zIndex: 10,
//   },
// });







//17/10/2025
// app/(tabs)/Matches.jsx
import { View, Text, Image, TouchableOpacity, ScrollView, StyleSheet, Platform, ActivityIndicator, Modal, Dimensions, Alert, Animated, PanResponder } from 'react-native';
import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { Ionicons, Feather, MaterialIcons, FontAwesome, AntDesign, Entypo } from '@expo/vector-icons';
import { SafeAreaView } from 'react-native-safe-area-context';
import { collection, query, where, getDocs, limit, doc, getDoc, addDoc, serverTimestamp, onSnapshot, updateDoc } from 'firebase/firestore';
import { db } from '../../config/firebase';
import { useLanguage } from '../context/LanguageContext';
import { useAuth } from '../context/AuthContext';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { useFocusEffect } from '@react-navigation/native';
import { useFirestore } from '../hooks/useFirebase';
import AsyncStorage from '@react-native-async-storage/async-storage';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

export default function Matches() {
  const [selectedOption, setSelectedOption] = useState('Newly Joined');
  const [selectedProfile, setSelectedProfile] = useState(null);
  const [allProfiles, setAllProfiles] = useState([]);
  const [filteredProfiles, setFilteredProfiles] = useState([]);
  const [currentProfileIndex, setCurrentProfileIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  const [loadingProfiles, setLoadingProfiles] = useState(true);
  const [showFullMobile, setShowFullMobile] = useState(false);
  const [galleryModalVisible, setGalleryModalVisible] = useState(false);
  const [selectedGalleryImageIndex, setSelectedGalleryImageIndex] = useState(0);
  const [hasLoaded, setHasLoaded] = useState(false);
  const [sentInterests, setSentInterests] = useState({});
  const { user } = useAuth();
  const { language } = useLanguage();
  const router = useRouter();
  const params = useLocalSearchParams();
  const { fetchProfiles } = useFirestore();

  // Animation values for swipe gestures
  const swipeX = useRef(new Animated.Value(0)).current;
  const swipeY = useRef(new Animated.Value(0)).current;
  const scale = useRef(new Animated.Value(1)).current;

  // Ref for scroll view
  const scrollViewRef = useRef(null);

  const options = ['Newly Joined', 'Recently Active', 'Most Viewed'];

  // Cache expiration time (5 minutes)
  const CACHE_EXPIRY = 5 * 60 * 1000;

  // Get cached data with expiration check
  const getCachedData = async (key) => {
    try {
      const cached = await AsyncStorage.getItem(key);
      if (!cached) return null;
     
      const { data, timestamp } = JSON.parse(cached);
      if (Date.now() - timestamp > CACHE_EXPIRY) {
        await AsyncStorage.removeItem(key);
        return null;
      }
     
      return data;
    } catch (error) {
      console.error('Error getting cached data:', error);
      return null;
    }
  };

  // Set data to cache with timestamp
  const setCachedData = async (key, data) => {
    try {
      const cacheData = {
        data,
        timestamp: Date.now()
      };
      await AsyncStorage.setItem(key, JSON.stringify(cacheData));
    } catch (error) {
      console.error('Error setting cached data:', error);
    }
  };

  // Load sent interests
  const loadSentInterests = useCallback(async () => {
    if (!user?.id) return;
    
    try {
      const interestsRef = collection(db, 'Users', user.id, 'sentInterests');
      const q = query(interestsRef);
      
      const querySnapshot = await getDocs(q);
      const interestsMap = {};
      
      querySnapshot.forEach((doc) => {
        const interestData = doc.data();
        if (interestData.toUserId) {
          interestsMap[interestData.toUserId] = interestData.status || 'pending';
        }
      });
      
      setSentInterests(interestsMap);
    } catch (error) {
      console.error('Error loading sent interests:', error);
    }
  }, [user]);

  // Translations - memoized to prevent recreation
  const translations = useMemo(() => ({
    newlyJoined: {
      ENG: "Newly Joined",
      HI: "नए जुड़े"
    },
    recentlyActive: {
      ENG: "Recently Active",
      HI: "हाल ही में सक्रिय"
    },
    mostViewed: {
      ENG: "Most Viewed",
      HI: "सबसे अधिक देखे गए"
    },
    personalInfo: {
      ENG: "Personal Information",
      HI: "व्यक्तिगत जानकारी"
    },
    contactInfo: {
      ENG: "Contact Information",
      HI: "संपर्क जानकारी"
    },
    familyInfo: {
      ENG: "Family Information",
      HI: "पारिवारिक जानकारी"
    },
    aboutMyself: {
      ENG: "About Myself",
      HI: "मेरे बारे में"
    },
    lifestyle: {
      ENG: "Lifestyle",
      HI: "जीवन शैली"
    },
    profilesYouMayLike: {
      ENG: "Profiles you may like",
      HI: "आपको पसंद आ सकने वाले प्रोफाइल"
    },
    seeAll: {
      ENG: "See All",
      HI: "सभी देखें"
    },
    dontShow: {
      ENG: "Don't Show Again",
      HI: "फिर से न दिखाएं"
    },
    sendMessage: {
      ENG: "Send Message",
      HI: "संदेश भेजें"
    },
    sendInterest: {
      ENG: "Send Interest",
      HI: "रुचि भेजें"
    },
    interestSent: {
      ENG: "Interest Sent",
      HI: "रुचि भेज दी गई"
    },
    activeToday: {
      ENG: "Active today",
      HI: "आज सक्रिय"
    },
    match: {
      ENG: "match",
      HI: "मेल"
    },
    notUpdated: {
      ENG: "Not updated",
      HI: "अपडेट नहीं किया गया"
    },
    loading: {
      ENG: "Loading...",
      HI: "लोड हो रहा है..."
    },
    mobileNumber: {
      ENG: "Mobile Number",
      HI: "मोबाइल नंबर"
    },
    upgradeToView: {
      ENG: "Upgrade to view",
      HI: "देखने के लिए अपग्रेड करें"
    },
    viewGallery: {
      ENG: "View Gallery",
      HI: "गैलरी देखें"
    },
    close: {
      ENG: "Close",
      HI: "बंद करें"
    },
    noProfilesAvailable: {
      ENG: "No profiles available",
      HI: "कोई प्रोफाइल उपलब्ध नहीं"
    },
    viewDetails: {
      ENG: "View Details",
      HI: "विवरण देखें"
    },
    verifiedProfile: {
      ENG: "Verified Profile",
      HI: "सत्यापित प्रोफाइल"
    }
  }), []);

  // Check if we have a specific profile from params
  useEffect(() => {
    if (params.selectedProfile) {
      try {
        const profile = JSON.parse(params.selectedProfile);
        setSelectedProfile(profile);
        setFilteredProfiles([profile]);
        setCurrentProfileIndex(0);
        setLoading(false);
        setLoadingProfiles(false);
        setHasLoaded(true);
      } catch (error) {
        console.error('Error parsing profile from params:', error);
      }
    } else if (params.profiles && params.viewAll === 'true') {
      try {
        const profiles = JSON.parse(params.profiles);
        setFilteredProfiles(profiles.map(p => p.fullData || p));
        setAllProfiles(profiles.map(p => p.fullData || p));
        if (profiles.length > 0) {
          setSelectedProfile(profiles[0].fullData || profiles[0]);
          setCurrentProfileIndex(0);
        }
        setLoading(false);
        setLoadingProfiles(false);
        setHasLoaded(true);
      } catch (error) {
        console.error('Error parsing profiles from params:', error);
      }
    }
  }, [params]);

  // Fetch all profiles from the opposite gender - memoized to prevent recreation
  const fetchAllProfiles = useCallback(async () => {
    if (!user) return;
   
    try {
      setLoading(true);
      const genderToFetch = user.gender === 'Male' ? 'Female' : 'Male';
     
      // Check cache first
      const cacheKey = `matches_${genderToFetch}`;
      const cachedProfiles = await getCachedData(cacheKey);
     
      if (cachedProfiles) {
        setAllProfiles(cachedProfiles);
        setFilteredProfiles(cachedProfiles);
       
        if (cachedProfiles.length > 0) {
          setSelectedProfile(cachedProfiles[0]);
          setCurrentProfileIndex(0);
        } else {
          setSelectedProfile({
            id: 'fallback',
            firstName: 'No profiles',
            lastName: 'available',
            profilePhoto: 'https://via.placeholder.com/300',
            galleryPhotos: []
          });
        }
       
        setHasLoaded(true);
        setLoading(false);
        setLoadingProfiles(false);
        return;
      }
     
      // Use the optimized fetchProfiles function
      const profiles = await fetchProfiles(genderToFetch, 20);
     
      setAllProfiles(profiles);
      setFilteredProfiles(profiles);
     
      // Set the first profile as selected if available
      if (profiles.length > 0) {
        setSelectedProfile(profiles[0]);
        setCurrentProfileIndex(0);
      } else {
        // Set a fallback profile if no profiles found
        setSelectedProfile({
          id: 'fallback',
          firstName: 'No profiles',
          lastName: 'available',
          profilePhoto: 'https://via.placeholder.com/300',
          galleryPhotos: []
        });
      }
     
      // Cache the results
      await setCachedData(cacheKey, profiles);
      setHasLoaded(true);
    } catch (error) {
      console.error('Error fetching profiles:', error);
      // Set fallback data on error
      setSelectedProfile({
        id: 'error',
        firstName: 'Error loading',
        lastName: 'profile',
        profilePhoto: 'https://via.placeholder.com/300',
        galleryPhotos: []
      });
    } finally {
      setLoading(false);
      setLoadingProfiles(false);
    }
  }, [user, fetchProfiles]);

  // PanResponder for swipe gestures (only on profile card)
  const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => true,
      onMoveShouldSetPanResponder: (_, gestureState) => {
        return Math.abs(gestureState.dx) > 10;
      },
      onPanResponderMove: (_, gestureState) => {
        swipeX.setValue(gestureState.dx);
        swipeY.setValue(gestureState.dy);
       
        // Scale down slightly during drag
        scale.setValue(1 - Math.min(Math.abs(gestureState.dx) / 500, 0.1));
      },
      onPanResponderRelease: (_, gestureState) => {
        // If swipe distance is significant, navigate to next/previous profile
        if (Math.abs(gestureState.dx) > 100) {
          if (gestureState.dx > 0) {
            // Swipe right - previous profile
            goToPreviousProfile();
          } else {
            // Swipe left - next profile
            goToNextProfile();
          }
        }
       
        // Reset animation values
        Animated.parallel([
          Animated.spring(swipeX, {
            toValue: 0,
            useNativeDriver: true
          }),
          Animated.spring(swipeY, {
            toValue: 0,
            useNativeDriver: true
          }),
          Animated.spring(scale, {
            toValue: 1,
            useNativeDriver: true
          })
        ]).start();
      }
    })
  ).current;

  // Navigate to next profile
  const goToNextProfile = () => {
    if (filteredProfiles.length === 0) return;
   
    const nextIndex = (currentProfileIndex + 1) % filteredProfiles.length;
    setCurrentProfileIndex(nextIndex);
    setSelectedProfile(filteredProfiles[nextIndex]);
    // Reset mobile number visibility
    setShowFullMobile(false);
    // Scroll to top when changing profiles
    scrollViewRef.current?.scrollTo({ y: 0, animated: true });
  };

  // Navigate to previous profile
  const goToPreviousProfile = () => {
    if (filteredProfiles.length === 0) return;
   
    const prevIndex = (currentProfileIndex - 1 + filteredProfiles.length) % filteredProfiles.length;
    setCurrentProfileIndex(prevIndex);
    setSelectedProfile(filteredProfiles[prevIndex]);
    // Reset mobile number visibility
    setShowFullMobile(false);
    // Scroll to top when changing profiles
    scrollViewRef.current?.scrollTo({ y: 0, animated: true });
  };

  // Remove profile from list (Don't Show functionality)
  const removeProfile = () => {
    if (filteredProfiles.length <= 1) {
      Alert.alert('Info', 'This is the only profile available');
      return;
    }
   
    // Create a new array without the current profile
    const updatedProfiles = filteredProfiles.filter((_, index) => index !== currentProfileIndex);
    setFilteredProfiles(updatedProfiles);
   
    // If we removed the last profile, go to the previous one
    let newIndex = currentProfileIndex;
    if (currentProfileIndex >= updatedProfiles.length) {
      newIndex = updatedProfiles.length - 1;
    }
   
    // Set the new current profile
    setCurrentProfileIndex(newIndex);
    setSelectedProfile(updatedProfiles[newIndex]);
    // Scroll to top when changing profiles
    scrollViewRef.current?.scrollTo({ y: 0, animated: true });
  };

  // Scroll to information section
  const scrollToInformation = () => {
    scrollViewRef.current?.scrollTo({ y: 400, animated: true });
  };

  // Send interest to a profile
  const sendInterest = async (profileId, profileName) => {
    try {
      if (!user?.id) {
        Alert.alert('Error', 'User not available');
        return;
      }

      // Check if interest was already sent
      if (sentInterests[profileId]) {
        Alert.alert('Info', 'Interest already sent to this profile');
        return;
      }

      // Add to sent interests
      const sentInterestRef = collection(db, 'Users', user.id, 'sentInterests');
      const interestDoc = await addDoc(sentInterestRef, {
        toUserId: profileId,
        toUserName: profileName,
        timestamp: serverTimestamp(),
        status: 'pending'
      });

      // Add to received interests of the target user
      const receivedInterestRef = collection(db, 'Users', profileId, 'receivedInterests');
      await addDoc(receivedInterestRef, {
        fromUserId: user.id,
        fromUserName: user.displayName || `${user.firstName} ${user.lastName}`,
        fromUserImage: user.profilePhoto || '',
        timestamp: serverTimestamp(),
        status: 'pending',
        interestId: interestDoc.id
      });

      // Update local state
      setSentInterests(prev => ({
        ...prev,
        [profileId]: 'pending'
      }));

      Alert.alert('Success', 'Interest sent successfully!');
    } catch (error) {
      console.error('Error sending interest:', error);
      Alert.alert('Error', 'Failed to send interest. Please try again.');
    }
  };

  // Start a chat with the selected profile
  const startChat = async () => {
    if (!selectedProfile || !user?.id) {
      Alert.alert('Error', 'Cannot start chat. User information missing.');
      return;
    }

    try {
      // Check if chat already exists
      const chatsRef = collection(db, 'chats');
      const q = query(
        chatsRef,
        where('participantIds', 'array-contains', user.id)
      );
     
      const querySnapshot = await getDocs(q);
      let existingChat = null;
     
      querySnapshot.forEach((doc) => {
        const chatData = doc.data();
        if (chatData.participantIds && chatData.participantIds.includes(selectedProfile.id)) {
          existingChat = { id: doc.id, ...chatData };
        }
      });
     
      if (existingChat) {
        router.push({
          pathname: `/chat/${existingChat.id}`,
          params: {
            name: selectedProfile.firstName || 'User',
            profileId: selectedProfile.id
          }
        });
      } else {
        // Create new chat
        const chatData = {
          participants: [
            `${user.firstName} ${user.lastName}`,
            `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim()
          ],
          participantIds: [user.id, selectedProfile.id],
          lastMessage: '',
          lastMessageTime: serverTimestamp(),
          createdAt: serverTimestamp()
        };
       
        const chatRef = await addDoc(collection(db, 'chats'), chatData);
       
        // Create participants subcollection
        await Promise.all([
          addDoc(collection(chatRef, 'participants'), {
            userId: user.id,
            userName: `${user.firstName} ${user.lastName}`,
            joinedAt: serverTimestamp()
          }),
          addDoc(collection(chatRef, 'participants'), {
            userId: selectedProfile.id,
            userName: `${selectedProfile.firstName || ''} ${selectedProfile.lastName || ''}`.trim(),
            joinedAt: serverTimestamp()
          })
        ]);
       
        router.push({
          pathname: `/chat/${chatRef.id}`,
          params: {
            name: selectedProfile.firstName || 'User',
            profileId: selectedProfile.id
          }
        });
      }
    } catch (error) {
      console.error('Error starting chat:', error);
      Alert.alert('Error', 'Failed to start chat. Please try again.');
    }
  };

  // Calculate age from date of birth
  const calculateAge = (dateOfBirth) => {
    if (!dateOfBirth) return '';
    try {
      // Handle different date formats
      let birthDate;
      if (dateOfBirth.includes('/')) {
        const [day, month, year] = dateOfBirth.split('/');
        birthDate = new Date(`${year}-${month}-${day}`);
      } else {
        birthDate = new Date(dateOfBirth);
      }
     
      const today = new Date();
      let age = today.getFullYear() - birthDate.getFullYear();
      const monthDiff = today.getMonth() - birthDate.getMonth();
     
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
      }
     
      return age;
    } catch (error) {
      return '';
    }
  };

  // Format mobile number with hidden digits
  const formatMobileNumber = (mobileNumber) => {
    if (!mobileNumber) return translations.notUpdated[language];
    if (showFullMobile) return mobileNumber;
   
    // Show first 2 digits and hide the rest with *
    if (mobileNumber.length > 2) {
      return mobileNumber.substring(0, 2) + '*'.repeat(mobileNumber.length - 2);
    }
    return mobileNumber;
  };

  // Format personal information data
  const getPersonalInfo = () => {
    if (!selectedProfile) return [];
   
    return [
      { label: 'Age', value: selectedProfile.age ? `${selectedProfile.age} years` : calculateAge(selectedProfile.dateOfBirth) || translations.notUpdated[language] },
      { label: 'Height', value: selectedProfile.height || translations.notUpdated[language] },
      { label: 'Spoken Language', value: selectedProfile.language || translations.notUpdated[language] },
      { label: 'Profile created by', value: selectedProfile.profileFor || translations.notUpdated[language] },
      { label: 'Marital Status', value: selectedProfile.maritalStatus || translations.notUpdated[language] },
      { label: 'Lives in', value: selectedProfile.city ? `${selectedProfile.city}, ${selectedProfile.state || ''}`.trim() : translations.notUpdated[language] },
      { label: 'Eating Habits', value: selectedProfile.diet || translations.notUpdated[language] },
      { label: 'Religion', value: selectedProfile.religion || translations.notUpdated[language] },
      { label: 'Caste', value: selectedProfile.community || translations.notUpdated[language] },
      { label: 'Subcaste', value: selectedProfile.subCaste || translations.notUpdated[language] },
      { label: 'Gotra', value: selectedProfile.gotra || translations.notUpdated[language] },
      { label: 'Date Of Birth', value: selectedProfile.dateOfBirth || translations.notUpdated[language] },
      { label: 'Rassi', value: translations.upgradeToView[language], icon: 'lock' },
      { label: 'Employment', value: selectedProfile.employmentType || translations.notUpdated[language] },
      { label: 'Annual Income', value: selectedProfile.incomeRange || translations.notUpdated[language] },
      { label: 'Education', value: selectedProfile.qualification || translations.notUpdated[language] },
      { label: 'Occupation', value: selectedProfile.occupation || translations.notUpdated[language] },
      { label: 'Studied at', value: translations.upgradeToView[language], icon: 'lock' },
      { label: 'Works at', value: translations.upgradeToView[language], icon: 'lock' },
    ];
  };

  // Format contact information data
  const getContactInfo = () => {
    if (!selectedProfile) return [];
   
    return [
      {
        label: translations.mobileNumber[language],
        value: formatMobileNumber(selectedProfile.mobileNumber),
        icon: selectedProfile.mobileNumber && !showFullMobile ? 'lock' : null,
        onPress: () => selectedProfile.mobileNumber && setShowFullMobile(!showFullMobile)
      },
      { label: 'Email', value: selectedProfile.email || translations.notUpdated[language] },
    ];
  };

  // Format family information data
  const getFamilyInfo = () => {
    if (!selectedProfile) return [];
   
    const familyInfo = selectedProfile.familyInfo || {};
    return [
      { label: 'Family Status', value: familyInfo.familyStatus || translations.notUpdated[language] },
      { label: 'Father', value: familyInfo.fatherStatus || translations.notUpdated[language] },
      { label: 'Mother', value: familyInfo.motherStatus || translations.notUpdated[language] },
      { label: 'Brothers', value: familyInfo.brothersCount ? `${familyInfo.brothersCount} brothers` : translations.notUpdated[language] },
      { label: 'Sisters', value: familyInfo.sistersCount ? `${familyInfo.sistersCount} sisters` : translations.notUpdated[language] },
      { label: 'Ancestral Origin', value: selectedProfile.village || translations.notUpdated[language] },
    ];
  };

  // Format lifestyle information data
  const getLifestyleInfo = () => {
    if (!selectedProfile) return [];
   
    // Format alcohol information
    let alcoholInfo = translations.notUpdated[language];
    if (selectedProfile.drinksAlcohol === 'Yes' && selectedProfile.alcoholFrequency) {
      alcoholInfo = `Yes/${selectedProfile.alcoholFrequency}`;
    } else if (selectedProfile.drinksAlcohol) {
      alcoholInfo = selectedProfile.drinksAlcohol;
    }
   
    // Format tobacco information
    let tobaccoInfo = translations.notUpdated[language];
    if (selectedProfile.usesTobacco === 'Yes' && selectedProfile.tobaccoFrequency) {
      tobaccoInfo = `Yes/${selectedProfile.tobaccoFrequency}`;
    } else if (selectedProfile.usesTobacco) {
      tobaccoInfo = selectedProfile.usesTobacco;
    }
   
    // Format disability information
    const disabilityInfo = selectedProfile.hasDisability || translations.notUpdated[language];
   
    return [
      { label: 'Cuisine', value: selectedProfile.favoriteCuisine || translations.notUpdated[language] },
      { label: 'Hobbies', value: selectedProfile.interests ? (Array.isArray(selectedProfile.interests) ? selectedProfile.interests.join(', ') : selectedProfile.interests) : translations.notUpdated[language] },
      { label: 'Movies', value: selectedProfile.favoriteMovies || translations.notUpdated[language] },
      { label: 'Music', value: selectedProfile.favoriteMusic || translations.notUpdated[language] },
      { label: 'Smoking Habits', value: tobaccoInfo },
      { label: 'Drinking Habits', value: alcoholInfo },
      { label: 'Disability', value: disabilityInfo },
    ];
  };

  // Open gallery with all images
  const openGallery = () => {
    setSelectedGalleryImageIndex(0);
    setGalleryModalVisible(true);
  };

  // Get all images including profile photo and gallery photos
  const getAllImages = () => {
    if (!selectedProfile) return [];
    const images = [];
    if (selectedProfile.profilePhoto) {
      images.push(selectedProfile.profilePhoto);
    }
    if (selectedProfile.galleryPhotos && Array.isArray(selectedProfile.galleryPhotos)) {
      images.push(...selectedProfile.galleryPhotos);
    }
    return images;
  };

  // Get total photo count
  const getTotalPhotoCount = () => {
    return getAllImages().length;
  };

  // Manual refresh function
  const refreshProfiles = () => {
    setHasLoaded(false);
    setLoading(true);
    setLoadingProfiles(true);
    fetchAllProfiles();
    loadSentInterests();
  };

  // Navigate to Upgrade screen
  const navigateToUpgrade = () => {
    router.push('/(tabs)/Upgrade');
  };

  // Load data only once when screen focuses
  useFocusEffect(
    useCallback(() => {
      if (!hasLoaded && user && !params.selectedProfile && !params.viewAll) {
        fetchAllProfiles();
        loadSentInterests();
      }

      // Cleanup function to reset loading state when screen loses focus
      return () => {
        // Keep the data but reset loading states if needed
      };
    }, [hasLoaded, user, params.selectedProfile, params.viewAll, fetchAllProfiles, loadSentInterests])
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#FF6B6B" />
        <Text style={styles.loadingText}>{translations.loading[language]}</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.toggleContainer}>
          <TouchableOpacity style={[styles.toggleButton, styles.activeToggle]}>
            <Text style={styles.toggleText}>Regular</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.toggleButton} onPress={navigateToUpgrade}>
            <Text style={styles.toggleText}>Prime</Text>
          </TouchableOpacity>
        </View>
        <TouchableOpacity style={styles.languageButton} onPress={refreshProfiles}>
          <Ionicons name="refresh" size={24} color="#FF6B6B" />
        </TouchableOpacity>
      </View>

      {/* Options */}
      <View style={styles.optionsContainer}>
        {options.map((option) => (
          <TouchableOpacity
            key={option}
            style={[styles.option, selectedOption === option && styles.selectedOption]}
            onPress={() => setSelectedOption(option)}
          >
            <Text style={[styles.optionText, selectedOption === option && styles.selectedOptionText]}>
              {translations[option.toLowerCase().replace(' ', '')]?.[language] || option}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <ScrollView
        ref={scrollViewRef}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={true}
        scrollEventThrottle={16}
      >
        {/* Profile Section with Swipe Gestures */}
        {selectedProfile ? (
          <View style={styles.profileSection}>
            {/* Swipeable Profile Card */}
            <Animated.View
              style={[
                styles.profileContainer,
                {
                  transform: [
                    { translateX: swipeX },
                    { translateY: swipeY },
                    { scale: scale }
                  ]
                }
              ]}
              {...panResponder.panHandlers}
            >
              {/* Main Profile Image with Gallery Icon and Verification Badge */}
              <TouchableOpacity
                style={styles.profileImageContainer}
                onPress={openGallery}
                activeOpacity={0.9}
              >
                <Image
                  source={{ uri: selectedProfile.profilePhoto || 'https://via.placeholder.com/300' }}
                  style={styles.profileImage}
                  resizeMode="cover"
                />
               
                {/* Verification Badge */}
                {selectedProfile.verificationStatus === 'verified' && (
                  <View style={styles.verificationBadge}>
                    <Image
                      source={require('../../assets/badge.png')}
                      style={styles.verificationBadgeImage}
                    />
                  </View>
                )}
               
                {/* Gallery Icon with Count (bottom-right corner) */}
                {getTotalPhotoCount() > 0 && (
                  <View style={styles.galleryIconContainer}>
                    <Ionicons name="images" size={20} color="#fff" />
                    <Text style={styles.galleryCount}>{getTotalPhotoCount()}</Text>
                  </View>
                )}
              </TouchableOpacity>

              {/* Profile Info Area - Tappable for scrolling down */}
              <TouchableOpacity
                activeOpacity={1}
                style={styles.profileInfoArea}
              >
                <View style={styles.profileHeader}>
                  <View>
                    <Text style={styles.profileName}>
                      {selectedProfile.firstName || 'User'} {selectedProfile.lastName || ''}
                    </Text>
                    <Text style={styles.profileDetails}>
                      {selectedProfile.age || calculateAge(selectedProfile.dateOfBirth) || 'N/A'}yrs,{' '}
                      {selectedProfile.height || "N/A"}, {selectedProfile.city || ''}
                    </Text>
                    <Text style={styles.profileDetails}>
                      {selectedProfile.qualification || ''}, {selectedProfile.occupation || translations.notUpdated[language]}
                    </Text>
                  </View>
                  <View style={styles.matchBadge}>
                    <Text style={styles.matchText}>99% {translations.match[language]}</Text>
                  </View>
                </View>
                <Text style={styles.lastSeen}>{translations.activeToday[language]}</Text>

                {/* Action Buttons */}
                <View style={styles.actionButtons}>
                  <TouchableOpacity
                    style={[
                      styles.interestButton,
                      sentInterests[selectedProfile.id] && styles.interestSentButton
                    ]}
                    onPress={() => sendInterest(selectedProfile.id, `${selectedProfile.firstName} ${selectedProfile.lastName}`)}
                    disabled={!!sentInterests[selectedProfile.id]}
                  >
                    {sentInterests[selectedProfile.id] ? (
                      <>
                        <Ionicons name="checkmark" size={20} color="#4CAF50" />
                        <Text style={[styles.interestButtonText, styles.interestSentText]}>
                          {translations.interestSent[language]}
                        </Text>
                      </>
                    ) : (
                      <>
                        <Ionicons name="heart" size={20} color="#FF6B6B" />
                        <Text style={styles.interestButtonText}>{translations.sendInterest[language]}</Text>
                      </>
                    )}
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.actionButton}>
                    <MaterialIcons name="call" size={24} color="#4CAF50" />
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.actionButton}>
                    <FontAwesome name="whatsapp" size={24} color="#25D366" />
                  </TouchableOpacity>
                </View>
              </TouchableOpacity>
            </Animated.View>
          </View>
        ) : (
          <View style={styles.noProfilesContainer}>
            <Text style={styles.noProfilesText}>{translations.noProfilesAvailable[language]}</Text>
          </View>
        )}

        {/* Information Sections */}
        {selectedProfile && (
          <>
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>{translations.personalInfo[language]}</Text>
              <View style={styles.infoList}>
                {getPersonalInfo().map((item, index) => (
                  <View key={index} style={styles.infoListItem}>
                    <View style={styles.infoLabelContainer}>
                      <Text style={styles.infoLabel}>{item.label}</Text>
                    </View>
                    <Text style={styles.colon}>:</Text>
                    <View style={styles.infoValueContainer}>
                      <Text style={styles.infoValue}>{item.value}</Text>
                      {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
                    </View>
                  </View>
                ))}
              </View>
            </View>

            {/* Contact Information Section */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>{translations.contactInfo[language]}</Text>
              <View style={styles.infoList}>
                {getContactInfo().map((item, index) => (
                  <TouchableOpacity
                    key={index}
                    style={styles.infoListItem}
                    onPress={item.onPress}
                    disabled={!item.onPress}
                  >
                    <View style={styles.infoLabelContainer}>
                      <Text style={styles.infoLabel}>{item.label}</Text>
                    </View>
                    <Text style={styles.colon}>:</Text>
                    <View style={styles.infoValueContainer}>
                      <Text style={styles.infoValue}>{item.value}</Text>
                      {item.icon && <Feather name={item.icon} size={16} color="#888" style={styles.lockIcon} />}
                    </View>
                  </TouchableOpacity>
                ))}
              </View>
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>{translations.familyInfo[language]}</Text>
              <View style={styles.infoList}>
                {getFamilyInfo().map((item, index) => (
                  <View key={index} style={styles.infoListItem}>
                    <View style={styles.infoLabelContainer}>
                      <Text style={styles.infoLabel}>{item.label}</Text>
                    </View>
                    <Text style={styles.colon}>:</Text>
                    <Text style={styles.infoValue}>{item.value}</Text>
                  </View>
                ))}
              </View>
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>{translations.aboutMyself[language]}</Text>
              <Text style={styles.aboutText}>
                {selectedProfile?.aboutMe || 'No description available yet.'}
              </Text>
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>{translations.lifestyle[language]}</Text>
              <View style={styles.infoList}>
                {getLifestyleInfo().map((item, index) => (
                  <View key={index} style={styles.infoListItem}>
                    <View style={styles.infoLabelContainer}>
                      <Text style={styles.infoLabel}>{item.label}</Text>
                    </View>
                    <Text style={styles.colon}>:</Text>
                    <Text style={styles.infoValue}>{item.value}</Text>
                  </View>
                ))}
              </View>
            </View>
          </>
        )}
       
        {/* Spacer for bottom buttons */}
        <View style={{ height: 100 }} />
      </ScrollView>

      {/* Fixed Bottom Action Buttons */}
      {selectedProfile && filteredProfiles.length > 0 && (
        <View style={styles.bottomActions}>
          <TouchableOpacity
            style={styles.bottomButton}
            onPress={removeProfile}
          >
            <AntDesign name="close" size={20} color="#FF6B6B" />
            <Text style={styles.bottomButtonText}>{translations.dontShow[language]}</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.bottomButton, styles.messageButton]}
            onPress={startChat}
          >
            <Feather name="message-square" size={20} color="#fff" />
            <Text style={[styles.bottomButtonText, styles.messageButtonText]}>{translations.sendMessage[language]}</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Navigation Arrows - Fixed at screen edges (outside of ScrollView) */}
      {selectedProfile && filteredProfiles.length > 1 && (
        <>
          <TouchableOpacity
            style={[styles.navArrow, styles.prevArrow]}
            onPress={goToPreviousProfile}
          >
            <Ionicons name="chevron-back" size={30} color="#FF6B6B" />
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.navArrow, styles.nextArrow]}
            onPress={goToNextProfile}
          >
            <Ionicons name="chevron-forward" size={30} color="#FF6B6B" />
          </TouchableOpacity>
        </>
      )}

      {/* Gallery Modal - Full Screen Image Viewer with Horizontal Scroll */}
      <Modal
        visible={galleryModalVisible}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setGalleryModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <ScrollView
              horizontal
              pagingEnabled
              showsHorizontalScrollIndicator={false}
              style={styles.galleryScrollView}
              onMomentumScrollEnd={(event) => {
                const contentOffset = event.nativeEvent.contentOffset;
                const viewSize = event.nativeEvent.layoutMeasurement;
                const pageNum = Math.floor(contentOffset.x / viewSize.width);
                setSelectedGalleryImageIndex(pageNum);
              }}
            >
              {getAllImages().map((image, index) => (
                <View key={index} style={styles.gallerySlide}>
                  <Image
                    source={{ uri: image }}
                    style={styles.modalImage}
                    resizeMode="contain"
                  />
                </View>
              ))}
            </ScrollView>
           
            {/* Image counter */}
            <View style={styles.imageCounter}>
              <Text style={styles.imageCounterText}>
                {selectedGalleryImageIndex + 1} / {getTotalPhotoCount()}
              </Text>
            </View>
           
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setGalleryModalVisible(false)}
            >
              <Entypo name="cross" size={24} color="#fff" />
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    position: 'relative',
    backgroundColor: '#fff',
  },
  scrollContent: {
    paddingBottom: 10,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  toggleContainer: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 107, 107, 0.1)',
    borderRadius: 20,
    padding: 2,
  },
  toggleButton: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 15,
  },
  activeToggle: {
    backgroundColor: '#FF6B6B',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  toggleText: {
    fontWeight: 'bold',
    color: '#555',
  },
  activeToggleText: {
    color: '#fff',
  },
  languageButton: {
    padding: 5,
  },
  optionsContainer: {
    flexDirection: 'row',
    paddingHorizontal: 15,
    marginBottom: 15,
  },
  option: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginRight: 10,
    borderRadius: 15,
    borderWidth: 1,
    borderColor: '#eee',
  },
  selectedOption: {
    backgroundColor: '#FF6B6B',
    borderColor: '#FF6B6B',
  },
  optionText: {
    color: '#555',
    fontSize: 12,
  },
  selectedOptionText: {
    color: '#fff',
  },
  profileSection: {
    position: 'relative',
    marginBottom: 10,
  },
  profileContainer: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  profileImageContainer: {
    position: 'relative',
    marginBottom: 15,
  },
  profileImage: {
    width: '100%',
    height: 300,
    borderRadius: 10,
  },
  verificationBadge: {
    position: 'absolute',
    top: 10,
    left: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    borderRadius: 12,
    padding: 4,
    zIndex: 10,
  },
  verificationBadgeImage: {
    width: 24,
    height: 24,
    borderRadius: 12,
  },
  profileInfoArea: {
    // This makes the entire area below the image tappable for scrolling
  },
  navArrow: {
    position: 'absolute',
    top: '40%',
    zIndex: 10,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    width: 40,
    height: 60,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 5,
  },
  prevArrow: {
    left: 10,
    borderTopRightRadius: 20,
    borderBottomRightRadius: 20,
  },
  nextArrow: {
    right: 10,
    borderTopLeftRadius: 20,
    borderBottomLeftRadius: 20,
  },
  galleryIconContainer: {
    position: 'absolute',
    bottom: 10,
    right: 10,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 5,
    borderRadius: 15,
  },
  galleryCount: {
    color: '#fff',
    fontWeight: 'bold',
    marginLeft: 5,
    fontSize: 14,
  },
  profileHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 10,
  },
  profileName: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#333',
  },
  profileDetails: {
    color: '#666',
    marginBottom: 2,
    fontSize: 14,
  },
  matchBadge: {
    backgroundColor: '#FF6B6B',
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 15,
  },
  matchText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 12,
  },
  lastSeen: {
    color: '#4CAF50',
    marginBottom: 15,
    fontSize: 12,
  },
  actionButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 10,
  },
  interestButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFF0F0',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 25,
    flex: 1,
    marginRight: 10,
    justifyContent: 'center',
  },
  interestSentButton: {
    backgroundColor: '#E8F5E9',
  },
  interestButtonText: {
    color: '#FF6B6B',
    fontWeight: 'bold',
    marginLeft: 5,
  },
  interestSentText: {
    color: '#4CAF50',
  },
  actionButton: {
    padding: 10,
    borderRadius: 50,
    borderWidth: 1,
    borderColor: '#eee',
    width: 50,
    alignItems: 'center',
    backgroundColor: '#f9f9f9',
    marginHorizontal: 5,
  },
  bottomActions: {
    flexDirection: 'row',
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: '#eee',
    backgroundColor: '#fff',
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: -2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 10,
      },
    }),
  },
  bottomButton: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 12,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#eee',
    marginHorizontal: 5,
    backgroundColor: '#f9f9f9',
  },
  messageButton: {
    backgroundColor: '#FF6B6B',
    borderColor: '#FF6B6B',
  },
  bottomButtonText: {
    marginLeft: 5,
    fontWeight: '600',
  },
  messageButtonText: {
    color: '#fff',
  },
  section: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
    backgroundColor: '#fff',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
  },
  infoList: {
    // Single column layout
  },
  infoListItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
    paddingVertical: 5,
  },
  infoLabelContainer: {
    flex: 1,
    alignItems: 'flex-start',
    marginLeft: 0,
    paddingLeft: 0,
  },
  infoLabel: {
    color: '#666',
    fontSize: 14,
    fontWeight: '500',
    textAlign: 'left',
    marginLeft: 0,
    paddingLeft: 0,
  },
  colon: {
    fontWeight: 'bold',
    color: '#333',
    fontSize: 14,
    width: 10,
    textAlign: 'center',
    position: 'absolute',
    left: '50%',
    marginLeft: -5,
  },
  infoValue: {
    fontWeight: '500',
    color: '#333',
    fontSize: 14,
    flex: 1,
    marginLeft: 20,
  },
  infoValueContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
    marginLeft: 20,
  },
  lockIcon: {
    marginLeft: 4,
  },
  aboutText: {
    lineHeight: 22,
    color: '#555',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  loadingText: {
    marginTop: 10,
    color: '#666',
  },
  noProfilesContainer: {
    padding: 40,
    alignItems: 'center',
    justifyContent: 'center',
  },
  noProfilesText: {
    fontSize: 18,
    color: '#666',
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
  },
  modalContent: {
    width: '100%',
    height: '100%',
    position: 'relative',
  },
  galleryScrollView: {
    flex: 1,
  },
  gallerySlide: {
    width: screenWidth,
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalImage: {
    width: '100%',
    height: '100%',
  },
  imageCounter: {
    position: 'absolute',
    top: 40,
    alignSelf: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 15,
  },
  imageCounterText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  closeButton: {
    position: 'absolute',
    top: 40,
    right: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderRadius: 20,
    padding: 8,
    zIndex: 10,
  },
});